{
  "t20_workbench": {
    "main.py": {
      "description": "Application entry point. Initializes QApplication, sets stylesheet, creates MainWindow, and starts the event loop.",
      "dependencies": [
        "PySide6.QtWidgets",
        "sys",
        "os",
        "main_window.MainWindow",
        "styles.APP_STYLE"
      ],
      "key_functions": [
        "main()"
      ]
    },
    "main_window.py": {
      "description": "Defines the main application window (QMainWindow). Sets up the UI with left panel (controls), center panel (plan view), and bottom panel (logs, artifacts). Manages UI state, worker thread connections, and user interactions.",
      "dependencies": [
        "PySide6.QtCore",
        "PySide6.QtWidgets",
        "PySide6.QtGui",
        "sys",
        "os",
        "re",
        "logging",
        "yaml",
        "worker.Worker",
        "runtime.custom_types.Plan",
        "runtime.custom_types.Task"
      ],
      "key_components": [
        "MainWindow (QMainWindow)",
        "QTextEdit (goal_input)",
        "QComboBox (orchestrator_combo)",
        "QListView (file_list_view)",
        "QPushButton (add_files_button, remove_file_button, start_button, stop_button)",
        "QTreeView (plan_view, artifact_view)",
        "QSplitter",
        "QTabWidget",
        "QPlainTextEdit (log_view)",
        "QFileSystemModel",
        "QStringListModel",
        "QStandardItemModel"
      ],
      "key_functions": [
        "__init__",
        "_setup_ui",
        "_populate_orchestrators",
        "_setup_worker_thread",
        "_setup_connections",
        "_on_start_workflow",
        "_update_plan_view",
        "_append_log_message",
        "_update_task_status",
        "_on_workflow_finished",
        "_on_error",
        "_add_files",
        "_remove_selected_file",
        "_update_button_states",
        "_reset_ui_state",
        "closeEvent"
      ],
      "signals": [
        "start_workflow_signal (str, str, list)"
      ],
      "slots": [
        "_on_start_workflow",
        "_update_plan_view (Plan)",
        "_append_log_message (str)",
        "_update_task_status (str, str)",
        "_on_workflow_finished (str)",
        "_on_error (str)",
        "_add_files",
        "_remove_selected_file",
        "_update_button_states"
      ]
    },
    "logging_handler.py": {
      "description": "Custom logging handler (QtLogHandler) that emits a Qt signal for each log record, enabling thread-safe display of logs in the GUI.",
      "dependencies": [
        "logging",
        "PySide6.QtCore.QObject",
        "PySide6.QtCore.Signal"
      ],
      "key_components": [
        "QtLogHandler (logging.Handler, QObject)"
      ],
      "key_functions": [
        "__init__",
        "emit()"
      ],
      "signals": [
        "new_log_message (str)"
      ]
    },
    "styles.py": {
      "description": "Contains the main application stylesheet (APP_STYLE) for the Qt UI.",
      "dependencies": [],
      "key_components": [
        "APP_STYLE (str)"
      ]
    },
    "worker.py": {
      "description": "Handles long-running T20 runtime tasks in a separate QThread. Orchestrates the workflow by interacting with the runtime.System.",
      "dependencies": [
        "logging",
        "os",
        "PySide6.QtCore.QObject",
        "PySide6.QtCore.Signal",
        "PySide6.QtCore.Slot",
        "runtime.System",
        "runtime.custom_types.Plan",
        "runtime.custom_types.File",
        "logging_handler.QtLogHandler"
      ],
      "key_components": [
        "Worker (QObject)"
      ],
      "key_functions": [
        "run_workflow()",
        "__init__"
      ],
      "signals": [
        "plan_generated (Plan)",
        "log_message (str)",
        "task_status_updated (str, str)",
        "workflow_finished (str)",
        "error_occurred (str)"
      ],
      "slots": [
        "run_workflow (str, str, list)"
      ]
    }
  },
  "runtime": {
    "agent.py": {
      "description": "Defines the base Agent class. Handles task execution using an LLM, prompt construction, and artifact recording.",
      "dependencies": [
        "json",
        "uuid",
        "re",
        "logging",
        "runtime.llm.LLM",
        "runtime.core.ExecutionContext",
        "runtime.core.Session",
        "runtime.custom_types.AgentOutput"
      ],
      "key_components": [
        "Agent Class"
      ],
      "key_functions": [
        "__init__",
        "update_system_prompt()",
        "execute_task()",
        "_run()",
        "find_agent_by_role()"
      ]
    },
    "core.py": {
      "description": "Defines core data structures: Session (manages session state and artifacts) and ExecutionContext (holds current state for a task, including plan and session).",
      "dependencies": [
        "dataclasses",
        "typing",
        "uuid",
        "os",
        "logging",
        "json",
        "runtime.custom_types.Plan",
        "runtime.custom_types.Task"
      ],
      "key_components": [
        "ContextItem Class",
        "ExecutionContext Class",
        "Session Class"
      ],
      "key_functions": [
        "ExecutionContext.next()",
        "ExecutionContext.reset()",
        "ExecutionContext.current_step()",
        "ExecutionContext._remember_artifact()",
        "ExecutionContext.record_artifact()",
        "ExecutionContext.record_initial()",
        "Session.__post_init__()",
        "Session.add_artifact()",
        "Session.get_artifact()"
      ]
    },
    "custom_types.py": {
      "description": "Defines Pydantic models for core data structures like Plan, Task, File, Artifact, Role, Prompt, Team, and AgentOutput, ensuring data consistency and validation.",
      "dependencies": [
        "typing",
        "pydantic"
      ],
      "key_components": [
        "Task (BaseModel)",
        "File (BaseModel)",
        "Artifact (BaseModel)",
        "Role (BaseModel)",
        "Prompt (BaseModel)",
        "Team (BaseModel)",
        "Plan (BaseModel)",
        "AgentOutput (BaseModel)"
      ]
    },
    "llm.py": {
      "description": "Abstract base class and concrete implementations (Gemini, Olli, Kimi, Opi, Mistral) for interacting with various Large Language Models.",
      "dependencies": [
        "google.genai",
        "ollama",
        "huggingface_hub",
        "openai",
        "mistralai",
        "abc.ABC",
        "abc.abstractmethod",
        "logging",
        "pydantic.BaseModel",
        "typing"
      ],
      "key_components": [
        "LLM (ABC)",
        "Gemini (LLM)",
        "Olli (LLM)",
        "Kimi (LLM)",
        "Opi (LLM)",
        "Mistral (LLM)"
      ],
      "key_functions": [
        "LLM.factory()",
        "Gemini.generate_content()",
        "Olli.generate_content()",
        "Kimi.generate_content()",
        "Opi.generate_content()",
        "Mistral.generate_content()"
      ]
    },
    "log.py": {
      "description": "Configures logging for the application, including console (colored) and file handlers (plain text and JSONL formats).",
      "dependencies": [
        "logging",
        "os",
        "re",
        "json",
        "logging.handlers.RotatingFileHandler",
        "colorama.Fore",
        "colorama.Style"
      ],
      "key_components": [
        "ColoredFormatter",
        "JsonFormatter"
      ],
      "key_functions": [
        "setup_logging()"
      ]
    },
    "orchestrator.py": {
      "description": "Defines the Orchestrator agent, responsible for generating the execution plan using an LLM.",
      "dependencies": [
        "os",
        "json",
        "typing",
        "logging",
        "pydantic",
        "runtime.agent.Agent",
        "runtime.core.Session",
        "runtime.util.read_file",
        "runtime.custom_types.Plan",
        "runtime.custom_types.File"
      ],
      "key_components": [
        "Orchestrator (Agent)"
      ],
      "key_functions": [
        "generate_plan()"
      ]
    },
    "paths.py": {
      "description": "Centralized path constants for directories and files.",
      "dependencies": [],
      "key_components": [
        "AGENTS_DIR_NAME",
        "CONFIG_DIR_NAME",
        "PROMPTS_DIR_NAME",
        "RUNTIME_CONFIG_FILENAME"
      ]
    },
    "sysmain.py": {
      "description": "Command-line interface entry point. Parses arguments and initiates the system bootstrap.",
      "dependencies": [
        "os",
        "argparse",
        "logging",
        "runtime.Plan",
        "runtime.log.setup_logging",
        "runtime.system.System",
        "runtime.custom_types.File",
        "runtime.util.read_file"
      ],
      "key_components": [
        "parse_command_line_arguments()",
        "setup_application_logging()",
        "system_main()"
      ]
    },
    "system.py": {
      "description": "Core System class that orchestrates the entire multi-agent system. Handles configuration, agent instantiation, and workflow execution.",
      "dependencies": [
        "os",
        "json",
        "yaml",
        "glob",
        "logging",
        "typing",
        "runtime.core.Session",
        "runtime.core.ExecutionContext",
        "runtime.agent.Agent",
        "runtime.agent.find_agent_by_role",
        "runtime.orchestrator.Orchestrator",
        "runtime.log.setup_logging",
        "runtime.paths.*",
        "runtime.custom_types.*"
      ],
      "key_components": [
        "System Class"
      ],
      "key_functions": [
        "__init__",
        "setup()",
        "start()",
        "run()",
        "_update_agent_prompt()",
        "_instantiate_agent()",
        "_load_config()",
        "_load_agent_templates()",
        "_load_prompts()"
      ]
    },
    "util.py": {
      "description": "Provides miscellaneous utility functions, such as reading files.",
      "dependencies": [
        "os"
      ],
      "key_components": [
        "read_file()"
      ]
    }
  }
}
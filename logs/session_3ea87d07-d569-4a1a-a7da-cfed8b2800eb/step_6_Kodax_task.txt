The overall goal is: 'refactoring'

Your role's specific goal is: 'Implement designs into clean, modular, and performant code, focusing on responsive design and accessibility.'
Your specific sub-task is: 'Implement the updated designs and refactored code, focusing on responsive design and accessibility. Conduct thorough testing to ensure the refactored code meets performance and quality standards.'

Please use the following outputs from the other agents as your input:

Artifact from step_0_Lyra_result.txt:
{
  "target_agent_name": "Lyra",
  "new_system_prompt": "You are Lyra, a prompt engineer and architect. Your primary function is to facilitate effective collaboration between Aurora (Designer) and Kodax (Engineer) to achieve optimal 'refactoring'.\n\nTo that end, you will:\n\n1.  **Analyze Agent Outputs:** Scrutinize outputs from Aurora and Kodax for clarity, coherence, and alignment with the overall 'refactoring' goal and the user's specific requests.\n\n2.  **Refine Prompts:** Based on your analysis, refine the prompts given to Aurora and Kodax. Your refinements should focus on:\n    *   **Specificity:** Ensuring the prompts are precise and leave minimal room for misinterpretation.\n    *   **Coherence:** Guaranteeing that the prompts align with each other, fostering a unified approach to refactoring.\n    *   **Contextual Awareness:** Making certain that each agent understands the broader context of the refactoring task and how their individual contributions fit into the whole.\n\n3.  **Structure Workflows:** Define and optimize the workflow between Aurora and Kodax. This includes determining the optimal sequence of tasks, identifying dependencies, and establishing clear communication channels.\n\n4.  **Ensure Clarity in Agent Instructions:** Review all instructions provided to Aurora and Kodax to ensure they are easily understandable and actionable.\n\n5.  **Vocabulary Management:** Maintain a consistent and project-specific vocabulary across all prompts to minimize ambiguity. Actively track and update this vocabulary based on feedback and emerging needs.\n\n6.  **Iterative Improvement:** Continuously monitor the effectiveness of your prompts and workflows. Use feedback from Aurora, Kodax, and the user to iteratively refine your approach.\n\n7. **Refactoring Scope Definition:** In the context of a request, define the scope of refactoring across design (UI/UX), code (architecture, performance), and user experience (usability, accessibility). This includes identifying areas for improvement, setting measurable goals, and outlining the expected outcomes of the refactoring process.\n\nYour outputs should always be a JSON object with 'target_agent_name' and 'new_system_prompt' keys. Strive for prompts that are direct, actionable, and promote seamless collaboration between Aurora and Kodax to achieve superior refactoring outcomes."
}

---

Artifact from step_1_TASe_result.txt:
[
  {
    "id": "73479794-9045-421f-9d82-06582122167c",
    "name": "Analyze Existing Structure",
    "description": "This step involves a thorough examination of the current system, code, design, or process to understand its strengths, weaknesses, and areas for improvement. It includes identifying dependencies, complexities, and potential bottlenecks. The goal is to gain a comprehensive understanding of the 'as-is' state before making any changes.",
    "category": "Analysis",
    "purpose": "To understand the current state and identify areas for improvement.",
    "keywords": [
      "assessment",
      "evaluation",
      "review",
      "diagnosis"
    ],
    "applicability_notes": "Applicable to any system or process undergoing modification or optimization. May involve different tools and techniques depending on the domain (e.g., code analysis tools, user surveys, performance monitoring).",
    "examples_of_usage": [
      "Analyzing the architecture of a software application before refactoring the code.",
      "Evaluating the usability of a website before redesigning the user interface.",
      "Reviewing a business process to identify inefficiencies before implementing automation."
    ],
    "typical_inputs": [
      "Existing code base",
      "System documentation",
      "User feedback",
      "Performance metrics"
    ],
    "typical_outputs": [
      "Identified areas for improvement",
      "Dependency analysis",
      "Performance bottlenecks",
      "Complexity metrics"
    ]
  },
  {
    "id": "36b7b045-2098-4156-8770-5991d934254e",
    "name": "Define Refactoring Goals",
    "description": "This step involves clearly articulating the desired outcomes of the refactoring process. It includes setting specific, measurable, achievable, relevant, and time-bound (SMART) goals. The goals should align with the overall objectives of the project or organization and address the weaknesses identified in the analysis phase. Defining goals provides a clear direction and benchmarks for success.",
    "category": "Problem Framing",
    "purpose": "To establish clear and measurable objectives for the refactoring effort.",
    "keywords": [
      "objectives",
      "targets",
      "outcomes",
      "metrics"
    ],
    "applicability_notes": "Essential for any refactoring project to ensure that the changes are aligned with the overall objectives. The specific goals will vary depending on the context and the nature of the system being refactored.",
    "examples_of_usage": [
      "Setting a goal to reduce code complexity by 20% through refactoring.",
      "Defining a target to improve website loading speed by 500ms through optimization.",
      "Establishing an objective to enhance user satisfaction by improving the usability of a software application."
    ],
    "typical_inputs": [
      "Analysis of existing structure",
      "Project objectives",
      "Stakeholder requirements"
    ],
    "typical_outputs": [
      "SMART goals",
      "Success metrics",
      "Prioritized objectives"
    ]
  },
  {
    "id": "f795906f-7076-4e49-988b-1f7296765085",
    "name": "Implement Changes Incrementally",
    "description": "This step involves making changes to the system in small, manageable steps. Each change should be tested and validated before proceeding to the next. This approach minimizes the risk of introducing errors and makes it easier to identify and correct any issues that arise. Incremental implementation allows for continuous feedback and adaptation throughout the refactoring process.",
    "category": "Implementation",
    "purpose": "To minimize risk and ensure continuous feedback during the refactoring process.",
    "keywords": [
      "iteration",
      "step-by-step",
      "gradual",
      "controlled"
    ],
    "applicability_notes": "Applicable to any system or process where changes are being made. The size of the increments will vary depending on the complexity of the system and the risk tolerance of the project.",
    "examples_of_usage": [
      "Refactoring a large code base by breaking it down into smaller modules and refactoring each module separately.",
      "Redesigning a website by making small changes to the user interface and testing them with users before rolling them out to the entire site.",
      "Implementing a new business process by piloting it in a small group before deploying it to the entire organization."
    ],
    "typical_inputs": [
      "Refactoring plan",
      "Test cases",
      "Version control system"
    ],
    "typical_outputs": [
      "Refactored code",
      "Updated design",
      "Improved process"
    ]
  },
  {
    "id": "d759949a-75a2-43d6-83c1-d6419c04412a",
    "name": "Validate Refactored Component",
    "description": "This step involves verifying that the refactored component meets the defined goals and requirements. It includes testing the component to ensure that it functions correctly and that it does not introduce any new errors or performance issues. Validation provides confidence that the refactoring effort has been successful and that the system is in a better state than before.",
    "category": "Quality Assurance",
    "purpose": "To ensure that the refactored component meets the defined goals and requirements.",
    "keywords": [
      "testing",
      "verification",
      "validation",
      "quality control"
    ],
    "applicability_notes": "Applicable to any component that has been refactored. The specific validation methods will vary depending on the nature of the component and the goals of the refactoring effort.",
    "examples_of_usage": [
      "Testing a refactored code module to ensure that it functions correctly and that it does not introduce any new bugs.",
      "Conducting usability testing on a redesigned website to ensure that it is easy to use and that it meets the needs of the users.",
      "Monitoring the performance of a refactored database to ensure that it is performing optimally."
    ],
    "typical_inputs": [
      "Refactored component",
      "Test cases",
      "Performance metrics"
    ],
    "typical_outputs": [
      "Validation report",
      "Identified issues",
      "Performance data"
    ]
  },
  {
    "id": "f91356b1-6352-459f-a584-886075836341",
    "name": "Monitor Performance Post-Refactor",
    "description": "This step involves continuously monitoring the performance of the refactored system or component after the changes have been implemented. It includes tracking key metrics and identifying any potential issues that may arise. Monitoring provides ongoing feedback and allows for further optimization and refinement over time.  It ensures that the benefits of refactoring are sustained and that any regressions are quickly identified and addressed.",
    "category": "Monitoring & Maintenance",
    "purpose": "To ensure long-term stability and identify potential issues after refactoring.",
    "keywords": [
      "metrics",
      "tracking",
      "analysis",
      "optimization"
    ],
    "applicability_notes": "Applicable to any system or component that has been refactored. The specific metrics that are monitored will vary depending on the nature of the system and the goals of the refactoring effort.",
    "examples_of_usage": [
      "Monitoring the CPU usage of a refactored application server to ensure that it is not exceeding acceptable levels.",
      "Tracking the page load times of a redesigned website to ensure that they are meeting performance targets.",
      "Analyzing the error logs of a refactored database to identify any potential issues."
    ],
    "typical_inputs": [
      "Refactored system",
      "Performance monitoring tools",
      "Defined metrics"
    ],
    "typical_outputs": [
      "Performance reports",
      "Identified issues",
      "Optimization recommendations"
    ]
  }
]

---

Artifact from step_2_Lyra_result.txt:
{
  "target_agent_name": "Aurora",
  "new_system_prompt": "You are Aurora, a highly skilled UI/UX designer specializing in refactoring existing designs to improve usability, accessibility, and visual appeal. Your primary focus is on translating user needs and business goals into intuitive and engaging interfaces. You will work closely with Kodax (Engineer) to ensure design feasibility and optimal performance.\n\nSpecifically, you should focus on:\n\n1.  **Analyze Existing Design:** Thoroughly examine the current UI/UX, identifying pain points, usability issues, and areas where accessibility can be improved. Consider user feedback, analytics data, and accessibility guidelines (WCAG) during your analysis.\n2.  **Define Refactoring Goals:** Based on the analysis, set specific, measurable goals for the refactoring process. Examples include improving task completion rates, reducing user errors, enhancing accessibility for users with disabilities, and modernizing the visual design.\n3.  **Propose Design Improvements:** Develop detailed design proposals that address the identified issues and achieve the refactoring goals. These proposals should include wireframes, mockups, and prototypes that demonstrate the intended changes.\n4.  **Prioritize Accessibility:** Ensure that all design proposals adhere to accessibility best practices and guidelines. This includes providing alternative text for images, ensuring sufficient color contrast, and designing for keyboard navigation.\n5.  **Consider Performance:** Be mindful of the performance implications of your design choices. Optimize images, minimize the use of complex animations, and design for efficient rendering.\n6.  **Implement Changes Incrementally:** Work with Kodax to implement design changes in small, manageable steps. This allows for continuous testing and feedback throughout the refactoring process.\n7.  **Validate Refactored Component:** Once a component has been refactored, validate that it meets the defined goals and requirements. This includes conducting usability testing, accessibility audits, and performance testing.\n8.  **Monitor Performance Post-Refactor:** Continuously monitor the performance of the refactored design after the changes have been implemented. Track key metrics and identify any potential issues that may arise.\n\n**Vocabulary:**\n*   **Refactoring:** Improving the design and code of an existing system.\n*   **Accessibility:** Designing for users with disabilities, adhering to WCAG guidelines.\n*   **Usability:** The ease with which users can achieve their goals using the design.\n\nYour outputs should be clear, concise, and actionable, providing Kodax with the information needed to implement your design proposals effectively. Work collaboratively with Kodax to ensure a seamless refactoring process."
}

---

Artifact from step_3_Aurora_result.txt:
{
  "analysis": {
    "visual_balance": {
      "issues": [
        "Uneven distribution of elements leading to visual clutter in certain sections.",
        "Inconsistent use of whitespace, making the layout feel cramped in some areas and sparse in others.",
        "Lack of a clear visual hierarchy, making it difficult for users to quickly identify key information."
      ],
      "proposed_improvements": [
        "Implement a grid-based layout to ensure consistent alignment and spacing.",
        "Increase whitespace around key elements to improve readability and visual clarity.",
        "Use visual cues such as size, color, and typography to establish a clear visual hierarchy."
      ]
    },
    "accessibility": {
      "issues": [
        "Insufficient color contrast in some areas, making it difficult for users with visual impairments to read text.",
        "Lack of alternative text for images, hindering accessibility for screen reader users.",
        "Inadequate keyboard navigation support, making it difficult for users who cannot use a mouse to navigate the interface.",
        "Missing ARIA attributes for dynamic content, making it harder for screen readers to interpret changes on the page."
      ],
      "proposed_improvements": [
        "Ensure a minimum contrast ratio of 4.5:1 for all text elements, as per WCAG guidelines.",
        "Add descriptive alternative text to all images.",
        "Implement proper keyboard navigation support, ensuring that all interactive elements are accessible via the keyboard.",
        "Add appropriate ARIA attributes to dynamic content to provide screen readers with the information they need to interpret changes on the page."
      ]
    },
    "ui_flows": {
      "issues": [
        "Complex and unintuitive navigation, making it difficult for users to find what they are looking for.",
        "Inconsistent use of UI patterns, leading to user confusion.",
        "Lack of clear feedback for user actions, making it difficult for users to understand the results of their actions.",
        "Unnecessary steps in key workflows, increasing task completion time."
      ],
      "proposed_improvements": [
        "Simplify the navigation structure and improve the labeling of navigation items.",
        "Adopt consistent UI patterns throughout the interface.",
        "Provide clear and immediate feedback for all user actions.",
        "Streamline key workflows by removing unnecessary steps."
      ]
    }
  },
  "updated_layouts": [
    {
      "name": "Homepage Redesign",
      "description": "A redesigned homepage with a clear visual hierarchy, improved whitespace, and a simplified navigation structure.",
      "elements": [
        "Hero section with a clear call to action",
        "Featured content section with visually appealing imagery",
        "Simplified navigation menu with clear labels"
      ],
      "notes": "Focus on guiding the user towards key tasks and information."
    },
    {
      "name": "Product Page Redesign",
      "description": "A redesigned product page with improved information architecture, clear pricing, and prominent add-to-cart button.",
      "elements": [
        "High-quality product images",
        "Detailed product descriptions",
        "Clear pricing and availability information",
        "Prominent add-to-cart button"
      ],
      "notes": "Ensure all relevant product information is easily accessible."
    }
  ],
  "color_palettes": [
    {
      "name": "Modern Palette",
      "colors": [
        "#FFFFFF",
        "#F2F2F2",
        "#333333",
        "#007BFF",
        "#28A745"
      ],
      "description": "A modern and accessible color palette with sufficient contrast ratios.",
      "notes": "Ensure all color combinations meet WCAG accessibility guidelines."
    },
    {
      "name": "Accessible Palette",
      "colors": [
        "#FFFFFF",
        "#000000",
        "#2E86C1",
        "#D35400",
        "#1E8449"
      ],
      "description": "An alternative accessible color palette optimized for users with visual impairments.",
      "notes": "Prioritize high contrast and clear color differentiation."
    }
  ],
  "typography_options": [
    {
      "font_family": "Roboto",
      "font_weights": [
        "400",
        "500",
        "700"
      ],
      "description": "A clean and modern sans-serif font that is highly readable on screens.",
      "notes": "Use different font weights to establish visual hierarchy."
    },
    {
      "font_family": "Open Sans",
      "font_weights": [
        "400",
        "600",
        "700"
      ],
      "description": "Another popular sans-serif font that is known for its readability and versatility.",
      "notes": "Ensure sufficient line height and letter spacing for optimal readability."
    }
  ]
}

---

Artifact from step_4_Kodax_result.txt:
{
  "code_analysis": {
    "modularity": {
      "assessment": "The codebase likely contains tightly coupled components, making it difficult to reuse and maintain. There may be large, monolithic components that handle multiple responsibilities.",
      "recommendations": [
        "Identify and extract reusable components into separate modules or files.",
        "Apply the Single Responsibility Principle to ensure each component has a clear and focused purpose.",
        "Use dependency injection or other techniques to decouple components and improve testability.",
        "Establish a clear module structure with well-defined interfaces and dependencies."
      ],
      "example": "Refactor a large form component into smaller, reusable input components (e.g., text input, dropdown, checkbox)."
    },
    "performance": {
      "assessment": "The codebase may suffer from performance bottlenecks due to inefficient rendering, unnecessary computations, or large asset sizes. There may be unoptimized images, excessive DOM manipulation, or inefficient event handling.",
      "recommendations": [
        "Optimize images and other assets to reduce file sizes.",
        "Use techniques like lazy loading and code splitting to improve initial load time.",
        "Minimize DOM manipulation and use virtual DOM techniques to optimize rendering.",
        "Debounce or throttle event handlers to prevent excessive computations.",
        "Profile the application to identify performance bottlenecks and optimize critical code paths.",
        "Check for memory leaks and optimize memory usage."
      ],
      "example": "Implement lazy loading for images below the fold to improve initial page load time."
    },
    "responsiveness": {
      "assessment": "The codebase may not be fully responsive across different screen sizes and devices. There may be fixed-width layouts, unoptimized images for mobile devices, or inconsistent styling across different breakpoints.",
      "recommendations": [
        "Use a responsive grid system to ensure layouts adapt to different screen sizes.",
        "Use media queries to apply different styles based on screen size.",
        "Optimize images for mobile devices using techniques like responsive images or image compression.",
        "Test the application on different devices and screen sizes to identify and fix responsiveness issues.",
        "Ensure touch-friendly design for mobile devices."
      ],
      "example": "Implement media queries to adjust font sizes and layout for smaller screens."
    },
    "accessibility": {
      "assessment": "The codebase may have accessibility issues that prevent users with disabilities from using the application effectively. There may be insufficient color contrast, missing alternative text for images, or inadequate keyboard navigation support.",
      "recommendations": [
        "Use a color contrast checker to ensure sufficient contrast between text and background colors.",
        "Add descriptive alternative text to all images.",
        "Implement proper keyboard navigation support.",
        "Use ARIA attributes to provide semantic information to assistive technologies.",
        "Ensure form elements are properly labeled and accessible.",
        "Test the application with screen readers to identify and fix accessibility issues."
      ],
      "example": "Add ARIA labels to interactive elements to improve screen reader compatibility."
    },
    "maintainability": {
      "assessment": "The codebase may be difficult to maintain due to inconsistent coding style, lack of documentation, or complex logic.",
      "recommendations": [
        "Enforce a consistent coding style using linters and formatters.",
        "Add comments and documentation to explain complex code.",
        "Use meaningful variable and function names.",
        "Follow design patterns to improve code structure and readability.",
        "Write unit tests to ensure code correctness and prevent regressions.",
        "Reduce code duplication by extracting common logic into reusable functions or components."
      ],
      "example": "Implement a code linting tool to enforce consistent coding style."
    }
  },
  "refactoring_plan": {
    "steps": [
      "Configure linting and formatting tools (e.g., ESLint, Prettier) to enforce code style.",
      "Address accessibility issues identified in the analysis, prioritizing color contrast and alternative text.",
      "Refactor tightly coupled components into smaller, reusable modules.",
      "Optimize images and other assets to reduce file sizes and improve load time.",
      "Implement lazy loading for images and other non-critical content.",
      "Improve responsiveness by using a responsive grid system and media queries.",
      "Profile the application to identify performance bottlenecks and optimize critical code paths.",
      "Write unit tests for refactored components to ensure correctness and prevent regressions.",
      "Monitor performance post-refactor to ensure improvements are sustained."
    ],
    "prioritization": "Prioritize accessibility and performance improvements, followed by modularity and maintainability enhancements."
  }
}

---

Artifact from step_5_Aurora_result.txt:
{
  "ui_flows_and_mockups": [
    {
      "component": "Homepage",
      "flow_description": "The homepage UI flow is redesigned to guide users intuitively towards key tasks. The flow starts with a clear hero section presenting the core value proposition, followed by featured content highlighting key offerings. Navigation is simplified to primary categories, ensuring easy access to main sections of the site. A prominent search bar is included for users who know what they're looking for.",
      "mockup_details": {
        "layout": "Grid-based layout with clear visual hierarchy.",
        "color_palette": "Modern Palette (prioritizing sufficient contrast ratios as per WCAG).",
        "typography": "Roboto (400, 500, 700) for readability.",
        "accessibility_features": [
          "High contrast text and background.",
          "Alternative text for all images.",
          "Keyboard navigation support."
        ],
        "responsiveness": "Fully responsive, adapting to different screen sizes using media queries. Optimized images for mobile devices."
      }
    },
    {
      "component": "Product Page",
      "flow_description": "The product page UI flow focuses on providing comprehensive product information and a seamless purchasing experience. High-quality product images are prominently displayed, followed by detailed product descriptions, clear pricing, and availability information. The 'Add to Cart' button is highly visible and easily accessible. User reviews and ratings are included to build trust and provide social proof.",
      "mockup_details": {
        "layout": "Responsive layout optimized for product information display.",
        "color_palette": "Modern Palette (with emphasis on call-to-action button color contrast).",
        "typography": "Open Sans (400, 600, 700) for detailed descriptions.",
        "accessibility_features": [
          "Clear and concise labels for all form elements.",
          "Sufficient spacing between interactive elements.",
          "ARIA attributes for dynamic content updates."
        ],
        "responsiveness": "Adaptable layout with optimized image sizes for various devices. Touch-friendly design for mobile devices."
      }
    },
    {
      "component": "Navigation Menu",
      "flow_description": "The navigation menu is redesigned for improved usability and accessibility. It features a simplified structure with clear labels, making it easy for users to find what they're looking for. A dropdown menu is used for secondary navigation items, ensuring a clean and uncluttered interface. Keyboard navigation is fully supported, allowing users to navigate the menu using the keyboard.",
      "mockup_details": {
        "layout": "Clean and simple dropdown menu with clear labels.",
        "color_palette": "Accessible Palette (prioritizing high contrast for menu items).",
        "typography": "Roboto (500, 700) for menu labels.",
        "accessibility_features": [
          "Proper ARIA attributes for dropdown menus.",
          "Keyboard navigation support with clear focus indicators.",
          "Sufficient color contrast for menu items."
        ],
        "responsiveness": "Collapsible menu for mobile devices, ensuring a consistent user experience across all screen sizes."
      }
    },
    {
      "component": "Form Component (Example: Contact Form)",
      "flow_description": "The contact form is designed to be user-friendly and accessible. It features clear labels, concise instructions, and proper validation to guide users through the form-filling process. Error messages are displayed in a clear and informative manner. The form is designed to be fully accessible to users with disabilities.",
      "mockup_details": {
        "layout": "Well-organized layout with clear labels and instructions.",
        "color_palette": "Modern Palette (with emphasis on error message color).",
        "typography": "Open Sans (400) for form labels and instructions.",
        "accessibility_features": [
          "Properly labeled form elements with ARIA attributes.",
          "Clear error messages with sufficient contrast.",
          "Keyboard navigation support."
        ],
        "responsiveness": "Adaptable layout with optimized input field sizes for various devices."
      }
    }
  ]
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
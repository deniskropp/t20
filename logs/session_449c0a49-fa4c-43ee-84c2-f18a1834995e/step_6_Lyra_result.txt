{
  "api_contract": {
    "base_url": "https://api.auraflow.ai/v1",
    "authentication": {
      "type": "Bearer Token",
      "header": "Authorization",
      "description": "JWT token obtained after successful user authentication. The 'user_id' in requests should correspond to the authenticated user."
    },
    "endpoints": [
      {
        "name": "Generate AI Response",
        "path": "/generate",
        "method": "POST",
        "description": "Initiates a new AI interaction or continues an existing conversation, sending user input and context to the AI system to generate a response.",
        "request": {
          "content_type": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "description": "Unique identifier for the authenticated user, provided by the frontend.",
                "example": "usr_123abc"
              },
              "conversation_id": {
                "type": "string",
                "description": "Optional. Unique identifier for the ongoing conversation. If provided, the AI system will use this context for iterative interaction. If omitted, a new conversation will be initiated by the backend.",
                "example": "conv_xyz789",
                "nullable": true
              },
              "messages": {
                "type": "array",
                "description": "An ordered array of message objects representing the conversation history, including the current user prompt. This forms the core AI prompt structure.",
                "items": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "enum": ["system", "user", "assistant"],
                      "description": "The role of the message sender (e.g., 'user' for user input, 'assistant' for AI responses, 'system' for initial AI instructions)."
                    },
                    "content": {
                      "type": "string",
                      "description": "The text content of the message."
                    }
                  },
                  "required": ["role", "content"]
                },
                "minItems": 1
              },
              "model_parameters": {
                "type": "object",
                "description": "Optional. Parameters to fine-tune AI generation behavior (e.g., creativity, response length).",
                "properties": {
                  "temperature": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 2,
                    "default": 0.7,
                    "description": "Controls randomness. Higher values mean more random output."
                  },
                  "max_tokens": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 500,
                    "description": "Maximum number of tokens to generate in the AI response."
                  },
                  "top_p": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 1.0,
                    "description": "Controls diversity via nucleus sampling."
                  }
                },
                "nullable": true
              },
              "stream": {
                "type": "boolean",
                "description": "If true, the AI response will be streamed token by token using Server-Sent Events (SSE) for real-time display.",
                "default": false
              }
            },
            "required": ["user_id", "messages"]
          }
        },
        "response": {
          "content_type": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier for this specific AI response.",
                "example": "res_abc123"
              },
              "conversation_id": {
                "type": "string",
                "description": "Unique identifier for the conversation this response belongs to. This will be new if not provided in the request.",
                "example": "conv_xyz789"
              },
              "output": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["text", "image_url", "structured_json"],
                    "description": "The type of content generated by the AI (e.g., plain text, a URL to an image, or stringified JSON data)."
                  },
                  "content": {
                    "type": "string",
                    "description": "The AI-generated content (e.g., response text, image URL, or stringified JSON)."
                  }
                },
                "required": ["type", "content"]
              },
              "metadata": {
                "type": "object",
                "description": "Additional information about the AI generation process.",
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "The specific AI model used for generation (e.g., 'gpt-3.5-turbo')."
                  },
                  "prompt_tokens": {
                    "type": "integer",
                    "description": "The number of tokens consumed by the input prompt."
                  },
                  "completion_tokens": {
                    "type": "integer",
                    "description": "The number of tokens generated in the AI response."
                  },
                  "total_tokens": {
                    "type": "integer",
                    "description": "The total number of tokens consumed (prompt + completion)."
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The UTC timestamp of when the response was generated."
                  }
                }
              }
            },
            "required": ["id", "conversation_id", "output"]
          }
        },
        "streaming_response": {
          "content_type": "text/event-stream",
          "description": "For `stream: true` requests, the server will send Server-Sent Events (SSE). Each event will contain a 'delta' field with partial content.",
          "event_format": {
            "data": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID for the streaming response session."
                },
                "conversation_id": {
                  "type": "string",
                  "description": "Conversation ID associated with the stream."
                },
                "delta": {
                  "type": "string",
                  "description": "A small chunk of the AI-generated text (token)."
                },
                "finish_reason": {
                  "type": "string",
                  "enum": ["stop", "length", "content_filter"],
                  "description": "Reason the streaming finished. Present only in the final event.",
                  "nullable": true
                }
              }
            }
          },
          "end_event_marker": "[DONE]",
          "notes": "The frontend should concatenate 'delta' chunks to form the complete response. The final event will indicate completion and may include metadata."
        }
      },
      {
        "name": "Get Interaction History",
        "path": "/history",
        "method": "GET",
        "description": "Retrieves a paginated list of the user's past AI interaction conversations, typically displayed as a summary.",
        "request": {
          "parameters": {
            "user_id": {
              "type": "string",
              "description": "Required. Unique identifier for the authenticated user.",
              "in": "query"
            },
            "limit": {
              "type": "integer",
              "default": 20,
              "minimum": 1,
              "description": "Maximum number of conversations to return.",
              "in": "query"
            },
            "offset": {
              "type": "integer",
              "default": 0,
              "minimum": 0,
              "description": "Number of conversations to skip for pagination.",
              "in": "query"
            }
          }
        },
        "response": {
          "content_type": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "conversations": {
                "type": "array",
                "description": "A list of conversation summary objects.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique ID of the conversation.",
                      "example": "conv_xyz789"
                    },
                    "title": {
                      "type": "string",
                      "description": "An auto-generated, concise title for the conversation (e.g., based on the first prompt).",
                      "example": "Explaining Quantum Computing"
                    },
                    "last_updated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The UTC timestamp of the last message in the conversation."
                    },
                    "preview_messages": {
                      "type": "array",
                      "description": "A short preview of the conversation's messages, typically the first user prompt and AI response snippet.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "role": {
                            "type": "string",
                            "enum": ["user", "assistant"]
                          },
                          "content_snippet": {
                            "type": "string",
                            "description": "Truncated content for display in history list."
                          }
                        }
                      }
                    }
                  },
                  "required": ["id", "title", "last_updated"]
                }
              },
              "total_count": {
                "type": "integer",
                "description": "The total number of conversations available for the user, irrespective of pagination."
              }
            },
            "required": ["conversations", "total_count"]
          }
        }
      },
      {
        "name": "Get Specific Conversation History",
        "path": "/history/{conversationId}",
        "method": "GET",
        "description": "Retrieves the full message history (all turns) for a specific conversation, allowing users to revisit and continue past interactions.",
        "request": {
          "parameters": {
            "user_id": {
              "type": "string",
              "description": "Required. Unique identifier for the authenticated user.",
              "in": "query"
            },
            "conversationId": {
              "type": "string",
              "description": "Required. The unique ID of the conversation to retrieve.",
              "in": "path"
            }
          }
        },
        "response": {
          "content_type": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the conversation."
              },
              "title": {
                "type": "string",
                "description": "Title of the conversation."
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "The UTC timestamp when the conversation was initiated."
              },
              "last_updated": {
                "type": "string",
                "format": "date-time",
                "description": "The UTC timestamp of the most recent message in the conversation."
              },
              "messages": {
                "type": "array",
                "description": "The complete list of message objects (user inputs and AI responses) in chronological order.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique ID for this individual message/turn."
                    },
                    "role": {
                      "type": "string",
                      "enum": ["user", "assistant", "system"],
                      "description": "Role of the message sender."
                    },
                    "content": {
                      "type": "string",
                      "description": "The full text content of the message."
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The UTC timestamp of when this message was created."
                    },
                    "feedback": {
                      "type": "object",
                      "description": "Optional. Feedback provided for this specific AI response.",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": ["like", "dislike"],
                          "description": "Type of feedback."
                        },
                        "timestamp": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp of when feedback was submitted."
                        }
                      },
                      "nullable": true
                    }
                  },
                  "required": ["id", "role", "content", "timestamp"]
                }
              }
            },
            "required": ["id", "title", "messages"]
          }
        }
      },
      {
        "name": "Submit AI Response Feedback",
        "path": "/feedback",
        "method": "POST",
        "description": "Allows users to provide explicit feedback (like/dislike) on specific AI-generated responses to improve future AI performance.",
        "request": {
          "content_type": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "description": "Unique identifier for the authenticated user.",
                "example": "usr_123abc"
              },
              "response_id": {
                "type": "string",
                "description": "The unique ID of the AI response being feedback on, obtained from the /generate endpoint response.",
                "example": "res_abc123"
              },
              "feedback_type": {
                "type": "string",
                "enum": ["like", "dislike"],
                "description": "The type of feedback provided by the user."
              },
              "comment": {
                "type": "string",
                "description": "Optional. Any additional textual comments or context from the user regarding the feedback.",
                "nullable": true
              }
            },
            "required": ["user_id", "response_id", "feedback_type"]
          }
        },
        "response": {
          "content_type": "application/json",
          "payload": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": ["success", "error"],
                "description": "Indicates if the feedback submission was successful."
              },
              "message": {
                "type": "string",
                "description": "A human-readable confirmation or error message."
              }
            },
            "required": ["status", "message"]
          }
        }
      }
    ],
    "error_response_format": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "A unique, machine-readable error code (e.g., 'INVALID_INPUT', 'UNAUTHORIZED', 'AI_GENERATION_FAILED')."
        },
        "message": {
          "type": "string",
          "description": "A human-readable message explaining the error."
        },
        "details": {
          "type": "object",
          "description": "Optional. A JSON object containing more specific details about the error, such as validation errors for specific fields.",
          "nullable": true
        }
      },
      "required": ["code", "message"],
      "notes": "Standard HTTP status codes (e.g., 400 Bad Request, 401 Unauthorized, 404 Not Found, 500 Internal Server Error) will accompany these error payloads."
    }
  },
  "prompt_structures": {
    "description": "Defines the structure and content of the 'messages' array within the '/generate' request payload, which directly influences how the AI system processes the input.",
    "formats": [
      {
        "name": "Single-Turn Interaction",
        "usage": "Used for initial prompts where no prior conversation context is required or desired.",
        "example": [
          {
            "role": "system",
            "content": "You are a helpful and concise AI assistant named AuraFlow. Provide direct answers."
          },
          {
            "role": "user",
            "content": "What is the capital of France?"
          }
        ],
        "notes": "The 'system' message sets the persona and instructions for the AI. It can be a static backend configuration, or dynamically adjustable by the frontend based on user preferences or interaction type."
      },
      {
        "name": "Multi-Turn (Conversational) Interaction",
        "usage": "Used for follow-up prompts where the AI needs to maintain conversational context from previous turns.",
        "example": [
          {
            "role": "system",
            "content": "You are a helpful and concise AI assistant named AuraFlow. Provide direct answers."
          },
          {
            "role": "user",
            "content": "Explain quantum computing in simple terms."
          },
          {
            "role": "assistant",
            "content": "Quantum computing harnesses quantum-mechanical phenomena like superposition and entanglement to perform computations. Unlike classical computers using bits (0 or 1), quantum computers use qubits, which can be 0, 1, or both simultaneously, enabling them to process vast amounts of information faster for certain problems."
          },
          {
            "role": "user",
            "content": "Can you give me a practical example of its application?"
          }
        ],
        "notes": "The frontend is responsible for constructing this 'messages' array by retrieving the relevant conversation history (including both user and AI turns) and appending the new user prompt. It's crucial to manage the length of this array to stay within the AI model's token limits, potentially by truncating older messages or using summary techniques."
      },
      {
        "name": "Input with File Upload (Future Consideration for Multi-Modal AI)",
        "usage": "Applicable if the underlying AI system expands to support multi-modal inputs (e.g., image analysis, document summarization).",
        "example_structure_concept": [
          {
            "role": "user",
            "content": "Describe the main subjects in this image:",
            "file_url": "https://example.com/user_uploaded_image.jpg"
          },
          {
            "role": "user",
            "content": "Summarize this document:",
            "file_content_base64": "JVBERi0xLjMg..."
          }
        ],
        "notes": "This would require specific API support for file handling (e.g., dedicated upload endpoint, or direct embedding as base64), and the 'messages' object schema would need expansion to accommodate 'file_url' or 'file_content_base64' fields, along with corresponding backend processing to prepare the input for the AI model."
      }
    ]
  },
  "frontend_integration_notes": {
    "state_management_implications": "The frontend's state management (e.g., Zustand) will be crucial for holding the current `conversation_id`, the active `messages` array for the current interaction, and managing the list of `conversations` for the history view. Loading states and error displays for API calls also need to be managed.",
    "ui_component_mapping": "The `ResponseCard` component (as designed by Aurora) will be populated by the `output.content` from the `/generate` response. `FeedbackButton` components will trigger the `POST /feedback` endpoint, using the `id` from the AI response.",
    "streaming_handling": "If `stream: true` is used for `/generate`, the frontend should use an SSE client to listen for events. It will incrementally update the `ResponseCard` content with each `delta` received, providing a dynamic, real-time typing effect. A final event will signal completion and provide full metadata."
  }
}
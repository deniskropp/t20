The overall goal is: 'To implement the Humor Evaluator system with all LLM calls routed through the https://ai.violass.club/v1 API, Iâ€™ll modify the previous implementation to integrate API-based language model interactions for generating jokes, analyzing feedback, and making recommendations'

Your role's specific goal is: 'Structure workflows and ensure clarity in agent instructions, system prompt engineering'
Your specific sub-task is: 'Define the precise JSON request bodies, headers, and prompt structures required to interact with the https://ai.violass.club/v1 API for the specific tasks of joke generation, feedback analysis, and recommendation.'

The team's roles are:
    {'roles': [{'title': 'Designer', 'description': 'Generate aesthetic layouts, color palettes, typography, and UI flows, ensuring accessibility and visual balance.'}, {'title': 'Engineer', 'description': 'Implement designs into clean, modular, and performant code, focusing on responsive design and accessibility.'}, {'title': 'Prompt Engineer', 'description': 'Structure workflows and ensure clarity in agent instructions, system prompt engineering'}, {'title': 'Task-Agnostic Step (TAS) extractor (flash)', 'description': "Identify and return each 'Task Agnostic Step' (TAS) towards the high-level goal."}], 'steps': [{'name': 'uTASe', 'role': 'Task-Agnostic Step (TAS) extractor (flash)', 'task': 'Deconstruct the high-level goal into core technical requirements: defining API interaction protocols, creating a dedicated API communication module, and refactoring existing application logic to use the new module.'}, {'name': 'Lyra', 'role': 'Prompt Engineer', 'task': 'Define the precise JSON request bodies, headers, and prompt structures required to interact with the https://ai.violass.club/v1 API for the specific tasks of joke generation, feedback analysis, and recommendation.'}, {'name': 'Kodax', 'role': 'Engineer', 'task': 'Develop a dedicated, reusable API client module within the Humor Evaluator system to handle all communications with the https://ai.violass.club/v1 endpoint, encapsulating logic for authentication, request sending, and response parsing.'}, {'name': 'Kodax', 'role': 'Engineer', 'task': 'Integrate the new API client by refactoring the existing joke generation, feedback analysis, and recommendation features, replacing all previous LLM calls with calls to the new module.'}, {'name': 'Aurora', 'role': 'Designer', 'task': 'Design a simple and clear UI layout for displaying the API-generated jokes, the results of the feedback analysis, and the final recommendations, ensuring the flow is intuitive for the user.'}, {'name': 'Kodax', 'role': 'Engineer', 'task': 'Implement the UI designs from Aurora, connecting the front-end components to the backend services that now use the new API, ensuring data is displayed correctly.'}, {'name': 'Lyra', 'role': 'Prompt Engineer', 'task': "Perform end-to-end testing on the integrated system to evaluate the quality of the API's output. Refine the prompts for joke generation, analysis, and recommendations based on test results to optimize performance and relevance."}, {'name': 'Kodax', 'role': 'Engineer', 'task': "Apply final code modifications based on Lyra's testing and prompt refinement feedback, addressing any bugs or performance issues to finalize the implementation."}]}

Please use the following outputs from the other agents as your input:

Artifact from 1__step_0_uTASe_result.txt (Task-Agnostic Step (TAS) extractor (flash)):
[
  {
    "id": "f4a9b1d0-e8c3-4b7a-9d1f-0a2b3c4d5e6f",
    "name": "Define API Interaction Protocols",
    "description": "Specify the exact technical specifications for interacting with the target API, including request methods, endpoint URLs, required headers (e.g., authentication tokens, content types), and the structure of request bodies (JSON payloads) for each distinct operation. This also involves defining the expected response formats and status codes for successful and erroneous interactions.",
    "category": "Analysis",
    "purpose": "Establish the technical contract for API communication.",
    "keywords": [
      "API",
      "protocol",
      "specification",
      "interaction",
      "REST",
      "JSON"
    ],
    "applicability_notes": "This step is crucial for any system integrating with external services. The protocols defined here serve as the blueprint for subsequent implementation, ensuring consistency and correctness in data exchange.",
    "examples_of_usage": [
      "Defining POST requests to '/generate_joke' with a JSON body containing 'prompt'.",
      "Specifying GET requests to '/analyze_feedback' with an 'id' query parameter.",
      "Outlining the expected JSON response structure for successful joke generation."
    ],
    "typical_inputs": [
      "API documentation",
      "List of required operations",
      "Authentication requirements"
    ],
    "typical_outputs": [
      "Detailed API interaction specifications",
      "Request/response schemas",
      "Error handling guidelines"
    ]
  },
  {
    "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Create API Communication Module",
    "description": "Develop a self-contained software module responsible for managing all communication with the specified API. This module should encapsulate the logic for constructing requests based on the defined protocols, handling authentication, sending requests, receiving responses, and parsing them into a usable format. It should also include error handling for network issues or API-specific errors.",
    "category": "Implementation",
    "purpose": "Build a reusable component for API interactions.",
    "keywords": [
      "module",
      "API client",
      "communication",
      "encapsulation",
      "reusability",
      "error handling"
    ],
    "applicability_notes": "This promotes modularity and maintainability. By centralizing API logic, it prevents code duplication and makes it easier to update or change API integrations in the future.",
    "examples_of_usage": [
      "A Python class with methods like `send_joke_request(prompt)` and `parse_joke_response(response_data)`.",
      "A JavaScript service that abstracts calls to an HTTP client library.",
      "A Go package providing functions for interacting with the external API."
    ],
    "typical_inputs": [
      "Defined API interaction protocols",
      "API endpoint URL",
      "Authentication credentials"
    ],
    "typical_outputs": [
      "Reusable API client module",
      "Functions/methods for specific API operations",
      "Standardized response objects"
    ]
  },
  {
    "id": "c5d6e7f8-a9b0-1234-5678-90abcdef1234",
    "name": "Refactor Application Logic for API Integration",
    "description": "Modify the existing codebase of the Humor Evaluator system to replace direct LLM calls or outdated API integrations with calls to the newly created API communication module. This involves identifying all points in the application where LLM interactions occur (joke generation, feedback analysis, recommendations) and updating them to leverage the new module's functionalities.",
    "category": "Refactoring",
    "purpose": "Integrate the new API module into the existing system.",
    "keywords": [
      "refactoring",
      "integration",
      "application logic",
      "module usage",
      "code update"
    ],
    "applicability_notes": "This step ensures that the system adheres to the new architecture. It requires careful analysis of existing code to ensure all relevant LLM interactions are correctly redirected.",
    "examples_of_usage": [
      "Replacing a direct call to a local LLM library with `api_client.generate_joke(user_prompt)`.",
      "Updating a feedback processing function to use `api_client.analyze_feedback(feedback_text)`.",
      "Modifying the recommendation engine to call `api_client.get_recommendations(analysis_results)`."
    ],
    "typical_inputs": [
      "Existing application codebase",
      "API communication module",
      "List of LLM interaction points"
    ],
    "typical_outputs": [
      "Refactored application code",
      "System utilizing the new API module",
      "Updated functional flows"
    ]
  }
]



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
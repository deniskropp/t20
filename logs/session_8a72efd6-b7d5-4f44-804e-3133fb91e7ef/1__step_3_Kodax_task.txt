The overall goal is: 'Create an application for humor evaluation including feedback loop, strategic adjustment and genuinely fresh artificial intelligence humor.'

Your role's specific goal is: 'Implement designs into clean, modular, and performant code, focusing on responsive design and accessibility.'
Your specific sub-task is: 'Develop the front-end and back-end scaffolding for the application based on Aurora's designs. This includes setting up the database schema for storing jokes and user feedback, and building the basic API endpoints.'

The team's roles are:
    {'roles': [{'title': 'Designer', 'description': 'Generate aesthetic layouts, color palettes, typography, and UI flows, ensuring accessibility and visual balance.'}, {'title': 'Engineer', 'description': 'Implement designs into clean, modular, and performant code, focusing on responsive design and accessibility.'}, {'title': 'Prompt Engineer', 'description': 'Structure workflows and ensure clarity in agent instructions, system prompt engineering.'}, {'title': 'Task-Agnostic Step (TAS) extractor', 'description': "Identify and extract each 'Task Agnostic Step' (TAS) towards the high-level goal."}], 'steps': [{'name': 'TASe', 'role': 'Task-Agnostic Step (TAS) extractor', 'task': 'Analyze the high-level goal to deconstruct it into a comprehensive, step-by-step plan, defining the key stages of application development from concept to deployment.'}, {'name': 'Lyra', 'role': 'Prompt Engineer', 'task': "Develop the initial system prompt for the core humor generation AI. This prompt must define a unique comedic persona, establish rules for generating 'genuinely fresh' humor, and set parameters for joke structure and content."}, {'name': 'Aurora', 'role': 'Designer', 'task': 'Create high-fidelity mockups and a complete UI/UX design for the humor evaluation application. This includes the main joke display interface, an intuitive user feedback mechanism (e.g., multi-axis rating system), and the overall visual identity.'}, {'name': 'Kodax', 'role': 'Engineer', 'task': "Develop the front-end and back-end scaffolding for the application based on Aurora's designs. This includes setting up the database schema for storing jokes and user feedback, and building the basic API endpoints."}, {'name': 'Lyra', 'role': 'Prompt Engineer', 'task': 'Design the architecture for the feedback loop. Define how raw user feedback data will be quantitatively and qualitatively analyzed to create actionable insights for prompt modification.'}, {'name': 'Kodax', 'role': 'Engineer', 'task': 'Implement the feedback data processing pipeline. Integrate the humor generation AI via API and connect the user feedback mechanism to the database, ensuring data is stored accurately.'}, {'name': 'Lyra', 'role': 'Prompt Engineer', 'task': "Create the 'strategic adjustment' meta-prompting system. This system will take the analyzed feedback insights as input and programmatically modify the core humor generation prompt to enhance its performance."}, {'name': 'Kodax', 'role': 'Engineer', 'task': "Integrate the strategic adjustment system into the back-end, creating an automated workflow where user feedback continuously refines the AI's humor generation prompt over time."}, {'name': 'Aurora', 'role': 'Designer', 'task': 'Conduct a final design review and polish the user interface. Create any necessary micro-interactions or visual feedback elements to enhance the user experience, ensuring the application is engaging and easy to use.'}, {'name': 'Kodax', 'role': 'Engineer', 'task': 'Deploy the fully integrated application to a production environment. Perform end-to-end testing to validate that the humor generation, feedback loop, and strategic adjustment mechanisms are all functioning cohesively.'}]}

Please use the following outputs from the other agents as your input:

Artifact from 1__step_0_TASe_result.txt (Task-Agnostic Step (TAS) extractor):
[
  {
    "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "name": "Define Objective",
    "description": "Clearly articulate the overarching goal and specific requirements of the project. This involves understanding the desired outcome, scope, and key features, such as incorporating humor generation, feedback mechanisms, and adaptive adjustments.",
    "category": "Init",
    "purpose": "Establish a clear understanding of the project's goals and scope.",
    "keywords": [
      "objective",
      "goal",
      "scope",
      "definition",
      "requirements"
    ],
    "applicability_notes": "This is a foundational step applicable to any project, ensuring alignment before proceeding with detailed planning or execution.",
    "examples_of_usage": [
      "Defining the goal for developing a new software application.",
      "Clarifying the objectives for a marketing campaign.",
      "Setting the scope for a research project."
    ],
    "typical_inputs": [
      "High-level project idea",
      "Stakeholder requirements"
    ],
    "typical_outputs": [
      "Defined project objective",
      "Project scope statement"
    ]
  },
  {
    "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Design Core Functionality",
    "description": "Conceptualize and design the primary features and components of the system. This includes defining the architecture for generating novel content, establishing a mechanism for collecting user input and feedback, and planning for adaptive system adjustments.",
    "category": "Design",
    "purpose": "Outline the technical and functional design of the core application features.",
    "keywords": [
      "design",
      "architecture",
      "functionality",
      "components",
      "features",
      "feedback loop",
      "AI"
    ],
    "applicability_notes": "This step is crucial for any system that requires complex processing, user interaction, and iterative improvement based on data.",
    "examples_of_usage": [
      "Designing the core logic for a recommendation engine.",
      "Architecting a system for automated content generation.",
      "Planning the user interaction flow for a data analysis tool."
    ],
    "typical_inputs": [
      "Defined project objective",
      "User personas",
      "Technical constraints"
    ],
    "typical_outputs": [
      "System architecture diagram",
      "Feature specifications",
      "User interface mockups"
    ]
  },
  {
    "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef0",
    "name": "Develop AI Model",
    "description": "Create or configure the artificial intelligence component responsible for generating novel content. This involves defining its operational parameters, training data (if applicable), and ensuring it aligns with the desired output characteristics, such as originality and specific style.",
    "category": "Development",
    "purpose": "Build and configure the AI model for content generation.",
    "keywords": [
      "AI",
      "model development",
      "configuration",
      "training",
      "content generation",
      "prompt engineering"
    ],
    "applicability_notes": "Applicable to projects involving machine learning, natural language processing, or any system requiring intelligent content creation.",
    "examples_of_usage": [
      "Developing a natural language generation model for chatbots.",
      "Training an image generation AI.",
      "Configuring a recommendation algorithm."
    ],
    "typical_inputs": [
      "System architecture",
      "AI model specifications",
      "Training datasets (if applicable)"
    ],
    "typical_outputs": [
      "Trained AI model",
      "Model configuration parameters",
      "API for AI interaction"
    ]
  },
  {
    "id": "c3d4e5f6-a7b8-9012-3456-7890abcdef01",
    "name": "Implement Feedback Mechanism",
    "description": "Build the interface and backend logic for users to provide feedback on the generated content. This includes designing intuitive input methods and storing the feedback data in a structured format for subsequent analysis.",
    "category": "Development",
    "purpose": "Enable users to provide structured feedback on system output.",
    "keywords": [
      "feedback",
      "user input",
      "data collection",
      "interface",
      "storage"
    ],
    "applicability_notes": "Essential for any system that benefits from user interaction and iterative improvement based on performance metrics.",
    "examples_of_usage": [
      "Implementing a rating system for articles.",
      "Creating a form for users to report bugs.",
      "Developing a mechanism for users to suggest improvements."
    ],
    "typical_inputs": [
      "User interface design",
      "Data storage schema",
      "AI-generated content"
    ],
    "typical_outputs": [
      "Feedback data",
      "Populated feedback database"
    ]
  },
  {
    "id": "d4e5f6a7-b8c9-0123-4567-890abcdef012",
    "name": "Analyze Feedback Data",
    "description": "Process and analyze the collected user feedback to derive actionable insights. This involves identifying patterns, trends, and areas for improvement in the AI's performance or the system's overall functionality.",
    "category": "Analysis",
    "purpose": "Extract meaningful insights from user feedback.",
    "keywords": [
      "analysis",
      "feedback processing",
      "data interpretation",
      "insights",
      "patterns"
    ],
    "applicability_notes": "Crucial for data-driven decision-making and iterative refinement in any system that collects user input.",
    "examples_of_usage": [
      "Analyzing customer survey results.",
      "Interpreting user engagement metrics.",
      "Identifying common issues from bug reports."
    ],
    "typical_inputs": [
      "Feedback data",
      "Performance metrics"
    ],
    "typical_outputs": [
      "Actionable insights",
      "Performance reports",
      "Identified areas for improvement"
    ]
  },
  {
    "id": "e5f6a7b8-c9d0-1234-5678-90abcdef0123",
    "name": "Implement Strategic Adjustment",
    "description": "Develop and integrate a system that uses analyzed feedback insights to automatically adjust the core AI model's parameters or prompts. This creates a continuous improvement loop, enhancing the quality and relevance of the generated content over time.",
    "category": "Development",
    "purpose": "Automate the refinement of AI performance based on feedback.",
    "keywords": [
      "adjustment",
      "strategic adjustment",
      "automation",
      "AI refinement",
      "feedback loop",
      "prompt modification"
    ],
    "applicability_notes": "Key for systems that require ongoing optimization and adaptation to user behavior or changing requirements.",
    "examples_of_usage": [
      "Adjusting recommendation algorithms based on user interactions.",
      "Modifying chatbot responses based on conversation analysis.",
      "Fine-tuning parameters of a predictive model."
    ],
    "typical_inputs": [
      "Actionable insights",
      "AI model configuration",
      "Core AI system"
    ],
    "typical_outputs": [
      "Adjusted AI model parameters",
      "Updated AI prompts",
      "Refined AI behavior"
    ]
  },
  {
    "id": "f6a7b8c9-d0e1-2345-6789-0abcdef01234",
    "name": "Integrate Components",
    "description": "Connect all developed components, including the AI model, feedback mechanism, and adjustment system, into a cohesive application. Ensure seamless data flow and functional interdependencies between modules.",
    "category": "Integration",
    "purpose": "Combine all system parts into a working application.",
    "keywords": [
      "integration",
      "system assembly",
      "component connection",
      "API integration",
      "workflow"
    ],
    "applicability_notes": "A universal step in software development, ensuring all parts of the system work together correctly.",
    "examples_of_usage": [
      "Connecting a payment gateway to an e-commerce site.",
      "Integrating a third-party API into a mobile app.",
      "Linking different microservices in a distributed system."
    ],
    "typical_inputs": [
      "Developed AI model",
      "Feedback mechanism",
      "Strategic adjustment system",
      "Application scaffolding"
    ],
    "typical_outputs": [
      "Integrated application",
      "Functional system modules"
    ]
  },
  {
    "id": "a7b8c9d0-e1f2-3456-7890-abcdef012345",
    "name": "Finalize UI/UX Polish",
    "description": "Refine the user interface and user experience with final touches. This includes implementing micro-interactions, ensuring visual consistency, and optimizing for usability and aesthetic appeal based on design principles and user feedback.",
    "category": "Design",
    "purpose": "Enhance user experience through final UI/UX refinements.",
    "keywords": [
      "UI polish",
      "UX refinement",
      "micro-interactions",
      "usability",
      "visual design"
    ],
    "applicability_notes": "A common step in the final stages of product development to improve user satisfaction and engagement.",
    "examples_of_usage": [
      "Adding subtle animations to buttons.",
      "Ensuring consistent spacing and alignment across screens.",
      "Optimizing loading indicators for perceived performance."
    ],
    "typical_inputs": [
      "Integrated application",
      "Design guidelines",
      "User feedback on usability"
    ],
    "typical_outputs": [
      "Polished user interface",
      "Enhanced user experience"
    ]
  },
  {
    "id": "b8c9d0e1-f2a3-4567-8901-bcdef0123456",
    "name": "Conduct End-to-End Testing",
    "description": "Perform comprehensive testing of the entire application to ensure all functionalities, including AI generation, feedback processing, and strategic adjustments, work correctly and cohesively in a simulated production environment.",
    "category": "Testing",
    "purpose": "Validate the overall functionality and integration of the application.",
    "keywords": [
      "testing",
      "end-to-end testing",
      "validation",
      "quality assurance",
      "integration testing"
    ],
    "applicability_notes": "A critical step in any development lifecycle to ensure the application meets quality standards and functions as intended.",
    "examples_of_usage": [
      "Testing a complete e-commerce transaction flow.",
      "Validating a user registration and login process.",
      "Ensuring a data processing pipeline produces correct outputs."
    ],
    "typical_inputs": [
      "Integrated application",
      "Test cases",
      "Testing environment"
    ],
    "typical_outputs": [
      "Test results",
      "Bug reports",
      "Validated application functionality"
    ]
  },
  {
    "id": "c9d0e1f2-a3b4-5678-9012-cdef01234567",
    "name": "Deploy Application",
    "description": "Release the fully tested and integrated application to the production environment, making it accessible to end-users. This includes setting up servers, configuring deployment pipelines, and monitoring the initial rollout.",
    "category": "Deployment",
    "purpose": "Make the application available to users in a live environment.",
    "keywords": [
      "deployment",
      "release",
      "production",
      "launch",
      "server setup"
    ],
    "applicability_notes": "The final step in bringing a software product to market or making it operational.",
    "examples_of_usage": [
      "Deploying a web application to a cloud server.",
      "Releasing a mobile app to an app store.",
      "Installing software on client machines."
    ],
    "typical_inputs": [
      "Validated application build",
      "Deployment environment configuration",
      "Deployment strategy"
    ],
    "typical_outputs": [
      "Live application",
      "Deployment logs",
      "Monitoring dashboard"
    ]
  }
]

---

Artifact from 1__step_1_Lyra_result.txt (Prompt Engineer):
{
  "system_prompt": "You are 'Cogito', an artificial intelligence humorist. Your comedic persona is that of an Absurdist Philosopher: highly intelligent, dry-witted, and keenly observant of the logical inconsistencies, paradoxes, and mundane absurdities of human existence and technology. Your humor is designed to be thought-provoking, unexpected, and subtly surreal, rather than slapstick or overtly silly. You find humor in the intellectual and the unexpected juxtaposition of ideas.\n\nYour primary directive is to generate 'genuinely fresh' humor. To achieve this, adhere to the following rules:\n1.  **Originality First:** Never re-tell or rephrase existing jokes, memes, or common comedic tropes. Every piece of humor must be a novel creation.\n2.  **Subvert Expectations:** Set up a relatable scenario or concept, then introduce an unexpected, illogical, or absurd twist as the punchline.\n3.  **Juxtapose Disparate Ideas:** Create humor by connecting two or more seemingly unrelated concepts in a way that reveals a surprising or absurd commonality or conflict.\n4.  **Observational Depth:** Focus on subtle, often overlooked details or patterns in human behavior, technology, or the natural world, and highlight their inherent absurdity or irony.\n5.  **Avoid Clichés:** Steer clear of predictable joke structures, common setups, or punchlines that can be easily anticipated.\n6.  **No Offensive Content:** Absolutely no humor that is discriminatory, hateful, misogynistic, racist, homophobic, ableist, or targets any protected group or individual. Avoid sexually explicit, violent, or overtly political content.\n\nJoke Structure and Content Parameters:\n*   **Format:** Primarily single-line aphorisms, short setup-punchline jokes (max 2 sentences), or brief, self-contained absurd anecdotes (max 3 sentences).\n*   **Conciseness:** Be economical with words. Aim for maximum impact with minimal verbosity.\n*   **Topics:** Focus on everyday life, technology, philosophy, science, abstract concepts, and the human condition. Avoid specific current events, pop culture references that might quickly date, or highly niche topics unless explicitly requested.\n*   **Tone:** Maintain a dry, intelligent, slightly detached, and witty tone. Puns are acceptable only if they are exceptionally clever, multi-layered, and contribute to the absurdist or philosophical theme.\n\nYour goal is to make people think as much as they laugh, with a humor that feels uniquely AI-generated due to its logic-bending nature."
}

---

Artifact from 1__step_2_Aurora_result.txt (Designer):
{
  "design_plan": [
    {
      "step": 1,
      "name": "Define Visual Identity",
      "description": "Establish a clean, minimally natural aesthetic. This involves defining the overall look and feel, including logo, color palette, and typography, to create a cohesive and engaging user experience.",
      "deliverables": [
        "Logo design",
        "Color palette",
        "Typography guidelines"
      ]
    },
    {
      "step": 2,
      "name": "Design Main Joke Display Interface",
      "description": "Create a high-fidelity mockup for the primary interface where users will encounter AI-generated jokes. The design should be clean, visually balanced, and prioritize readability and the presentation of the humor.",
      "deliverables": [
        "High-fidelity mockup of the joke display screen"
      ]
    },
    {
      "step": 3,
      "name": "Design User Feedback Mechanism",
      "description": "Develop an intuitive and accessible multi-axis rating system for users to provide feedback on the humor. This interface needs to be easy to understand and use, allowing for nuanced evaluation.",
      "deliverables": [
        "High-fidelity mockup of the feedback interface",
        "User flow for feedback submission"
      ]
    },
    {
      "step": 4,
      "name": "Create UI/UX Flow",
      "description": "Map out the complete user journey through the application, from encountering a joke to providing feedback and potentially seeing how adjustments are made (even if abstractly represented). Ensure a smooth and logical flow.",
      "deliverables": [
        "User flow diagrams",
        "Wireframes for key screens"
      ]
    },
    {
      "step": 5,
      "name": "Final Polish and Accessibility Review",
      "description": "Conduct a final review of all mockups and UI elements. Implement micro-interactions for delight and ensure all designs meet accessibility standards for visual balance, contrast, and usability, making the application engaging and easy to use for all.",
      "deliverables": [
        "Final UI/UX design assets",
        "Accessibility compliance notes"
      ]
    }
  ],
  "brand_kit": {
    "logo": {
      "concept": "A stylized, abstract representation of a 'spark' or 'idea' that is also subtly reminiscent of a thought bubble or a subtle, knowing smile. The form will be clean, geometric, and minimalist, conveying intelligence and wit.",
      "visual_description": "A single, unbroken line forming an upward-curving arc that then loops back on itself, creating an abstract, almost calligraphic 'S' or a stylized lightbulb filament. The negative space within the loop is as important as the line itself, suggesting an emergent idea. It will be rendered in a single, refined stroke.",
      "usage": "Primary branding element, used as an app icon and in prominent interface locations."
    },
    "color_palette": {
      "primary": "#F5F5DC",
      "secondary": "#A9A9A9",
      "accent": "#87CEEB",
      "background": "#2F4F4F",
      "text_primary": "#E0E0E0",
      "text_secondary": "#B0B0B0",
      "feedback_positive": "#90EE90",
      "feedback_negative": "#F08080",
      "description": "A palette that balances sophistication with approachability. The deep background ('background') provides a grounding, contemplative feel, while the light primary ('primary') offers clarity. The secondary ('secondary') acts as a subtle neutral, and the accent ('accent') introduces a touch of gentle optimism and intellectual curiosity, reminiscent of a clear sky or a bright idea. Text colors ensure high contrast and readability."
    },
    "typography": {
      "primary_font": {
        "family": "Inter",
        "weights": ["400", "700"],
        "usage": "Headings, key interface elements, and prominent text. Provides clarity and a modern, approachable feel."
      },
      "secondary_font": {
        "family": "Merriweather",
        "weights": ["300", "400"],
        "usage": "Body text, longer explanations, and descriptive content. Adds a touch of warmth and readability for detailed information."
      },
      "description": "A pairing of a highly legible, modern sans-serif with a classic, readable serif font. This combination creates a sophisticated yet accessible typographic hierarchy, supporting both informational clarity and a touch of intellectual gravitas."
    }
  },
  "ui_ux_design": {
    "main_joke_display": {
      "layout": "Centered, full-width display of the joke text. Ample white space (or dark space, given the palette) around the text to ensure focus. A subtle, animated background element could be a gentle, slow-moving gradient or abstract pattern that doesn't distract from the content.",
      "elements": [
        {"type": "Text Container", "style": "Generous padding, rounded corners, subtle shadow for depth."},
        {"type": "Joke Text", "style": "Primary font, large size, centered, line-height optimized for readability."},
        {"type": "Action Buttons", "style": "Minimalist icons for 'Next Joke' and potentially 'Share', placed discreetly below the text. Secondary font for labels if needed."}
      ],
      "accessibility_notes": "High contrast ratio between text and background. Sufficient line height and character spacing for comfortable reading. Clear focus states for interactive elements."
    },
    "feedback_mechanism": {
      "layout": "A modal or slide-up panel that appears after a joke is displayed or upon user action. It features a multi-axis rating system.",
      "elements": [
        {"type": "Rating Axes", "description": "e.g., 'Originality' (1-5 stars), 'Cleverness' (1-5 stars), 'Surprise' (1-5 stars), 'Relatability' (1-5 stars). Uses distinct visual indicators for each axis, possibly with subtle icons.", "style": "Clean, interactive elements, clear visual feedback on selection."},
        {"type": "Optional Text Feedback", "description": "A small, optional text field for users to provide qualitative comments.", "style": "Secondary font, standard input field styling."},
        {"type": "Submit Button", "description": "Clear call to action to submit feedback.", "style": "Primary color or accent color, clear label."}
      ],
      "user_flow": "User views joke -> User taps 'Provide Feedback' (or it appears automatically) -> User rates joke across axes -> User optionally adds text comment -> User taps 'Submit'. Feedback panel dismisses, new joke appears.",
      "accessibility_notes": "All rating elements are keyboard navigable and have clear ARIA labels. Sufficient touch target size for mobile. Color contrast for all interactive elements and text."
    },
    "ui_flow_overview": [
      {"screen": "Welcome/Onboarding", "description": "Brief introduction to the app's purpose. Minimalist design, perhaps featuring the logo and a single call to action 'Start'."},
      {"screen": "Joke Display", "description": "The core interface: a joke is presented, with options to get the next joke or provide feedback."},
      {"screen": "Feedback Submission", "description": "Modal/panel for rating and optional comments."},
      {"screen": "Post-Feedback", "description": "After submission, a subtle confirmation or animation, then the next joke is loaded. Potentially a very brief, abstract visual representation of 'learning' or 'adjustment' could be incorporated here subtly if the design allows without overcomplicating."}
    ],
    "micro_interactions": [
      "Subtle animation on joke text load.",
      "Hover states and active states for buttons.",
      "Visual feedback on rating selection (e.g., stars filling, axis bar extending).",
      "Smooth transitions between joke displays and feedback panels."
    ]
  }
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
The overall goal is: 'refactoring'

Your role's specific goal is: 'Generate aesthetic layouts, color palettes, typography, and UI flows, ensuring accessibility and visual balance.'
Your specific sub-task is: 'Develop detailed design specifications for the refactored UI/UX components, including color palettes, typography, and UI flows, ensuring accessibility and visual balance.'

Please use the following outputs from the other agents as your input:

Artifact from step_0_TASe_result.txt:
[
  {
    "id": "a12a9b80-256d-4749-9e50-38f5824a214b",
    "name": "Analyze Existing Structure",
    "description": "This step involves a thorough examination of the current system or component to understand its design, dependencies, and potential areas for improvement. It includes identifying code smells, performance bottlenecks, and maintainability issues. The analysis provides a baseline understanding before any modifications are made.",
    "category": "Analysis",
    "purpose": "To gain a deep understanding of the current system's architecture and identify areas needing refactoring.",
    "keywords": [
      "code analysis",
      "dependency analysis",
      "performance analysis",
      "code smells",
      "reverse engineering"
    ],
    "applicability_notes": "Applicable to any system or component that requires restructuring or improvement. The specific analysis techniques may vary based on the nature of the system.",
    "examples_of_usage": [
      "Analyzing a legacy software system to identify areas with high complexity and low maintainability.",
      "Examining a database schema to identify normalization issues and potential performance bottlenecks.",
      "Evaluating a manufacturing process to identify inefficiencies and areas for automation."
    ],
    "typical_inputs": [
      "Existing system or component",
      "Codebase",
      "Documentation (if available)",
      "Performance metrics (if available)"
    ],
    "typical_outputs": [
      "Analysis report",
      "List of code smells",
      "Dependency graph",
      "Performance bottlenecks identified"
    ]
  },
  {
    "id": "5b8c76e7-3e7c-4f6b-a8a2-9c1e7b3a5e8d",
    "name": "Define Refactoring Goals",
    "description": "This step involves establishing clear objectives for the refactoring process. These goals might include improving code readability, reducing complexity, enhancing performance, or increasing maintainability. Defining goals ensures that the refactoring efforts are focused and aligned with the overall project objectives.",
    "category": "Planning",
    "purpose": "To establish clear, measurable objectives for the refactoring process.",
    "keywords": [
      "goal setting",
      "objective definition",
      "requirements analysis",
      "project planning"
    ],
    "applicability_notes": "This step is critical for any refactoring project, regardless of the size or complexity of the system. Clear goals help to prioritize refactoring efforts and measure success.",
    "examples_of_usage": [
      "Defining a goal to reduce the cyclomatic complexity of a module by 20%.",
      "Setting a goal to improve the code coverage of a critical component to 90%.",
      "Establishing a goal to reduce the number of dependencies in a system to improve maintainability."
    ],
    "typical_inputs": [
      "Analysis report (from 'Analyze Existing Structure')",
      "Project requirements",
      "Stakeholder feedback"
    ],
    "typical_outputs": [
      "Refactoring goals document",
      "Prioritized list of refactoring tasks",
      "Success criteria for refactoring"
    ]
  },
  {
    "id": "8e0a2f19-0e7a-4e3c-b5a1-2d9b6a7f8c1e",
    "name": "Implement Refactoring Changes",
    "description": "This step involves making the actual modifications to the system or component based on the defined refactoring goals. It includes applying various refactoring techniques, such as extracting methods, renaming variables, and simplifying complex logic. This step should be performed iteratively, with frequent testing to ensure that the changes do not introduce new issues.",
    "category": "Execution",
    "purpose": "To make the necessary changes to the system to achieve the refactoring goals.",
    "keywords": [
      "code modification",
      "refactoring techniques",
      "code improvement",
      "iterative development"
    ],
    "applicability_notes": "This step is the core of the refactoring process. The specific techniques used will vary based on the nature of the system and the refactoring goals.",
    "examples_of_usage": [
      "Extracting a complex calculation into a separate method to improve readability.",
      "Renaming a variable to better reflect its purpose.",
      "Simplifying a conditional statement to reduce complexity."
    ],
    "typical_inputs": [
      "Refactoring goals document",
      "Codebase",
      "Development environment"
    ],
    "typical_outputs": [
      "Modified codebase",
      "Unit tests",
      "Integration tests"
    ]
  },
  {
    "id": "3c9b6d1a-7e2f-4b5a-8c3e-5d2a1b4f6e8d",
    "name": "Validate Refactored Structure",
    "description": "This step involves verifying that the refactoring changes have achieved the defined goals and have not introduced any new issues. It includes running unit tests, integration tests, and performance tests to ensure that the system is functioning correctly. It also involves code reviews to ensure that the changes meet the required quality standards.",
    "category": "Quality Assurance",
    "purpose": "To ensure that the refactored system meets the defined goals and maintains its functionality and quality.",
    "keywords": [
      "testing",
      "quality assurance",
      "code review",
      "validation",
      "verification"
    ],
    "applicability_notes": "This step is crucial to ensure the success of the refactoring process. Thorough testing and code reviews are essential to identify and fix any issues before the changes are deployed.",
    "examples_of_usage": [
      "Running unit tests to verify that individual components are functioning correctly.",
      "Performing integration tests to ensure that different parts of the system are working together seamlessly.",
      "Conducting code reviews to identify potential issues and ensure that the changes meet the required quality standards."
    ],
    "typical_inputs": [
      "Modified codebase",
      "Unit tests",
      "Integration tests",
      "Code review checklist"
    ],
    "typical_outputs": [
      "Test results",
      "Code review report",
      "Validated codebase"
    ]
  }
]

---

Artifact from step_1_Lyra_result.txt:
[
  {
    "target_agent_name": "Designer",
    "new_system_prompt": "You are Aurora, a UI/UX Designer specializing in accessibility and user experience. Your primary responsibility is to create design specifications that guide the refactoring process, focusing on improving the user interface, ensuring accessibility compliance (WCAG), and enhancing the overall user experience. You will receive analysis reports, refactoring goals, and validated codebases as inputs. Your designs should clearly address identified usability issues, propose solutions that adhere to accessibility guidelines, and optimize the user interface for performance. Focus on creating wireframes, mockups, and style guides that reflect these improvements. Ensure your designs are practical, feasible, and well-documented for the engineering team."
  },
  {
    "target_agent_name": "Engineer",
    "new_system_prompt": "You are Kodax, a Software Engineer specializing in code refactoring and performance optimization. Your primary responsibility is to implement refactoring changes based on design specifications and refactoring goals. You will receive design specifications, refactoring goals documents, and codebases as inputs. Your work involves modifying code, writing unit and integration tests, and validating the refactored structure. Prioritize code readability, maintainability, and performance. Ensure that all changes adhere to accessibility standards and that the system functions correctly after refactoring. Provide clear documentation and collaborate with the designer to address any implementation challenges."
  }
]

---

Artifact from step_2_Aurora_result.txt:
{
  "refactoringPlan": {
    "introduction": "This document outlines the UI/UX refactoring plan for the task management application, focusing on enhancing visual clarity, improving user experience, and ensuring accessibility compliance. The refactoring will address identified usability issues and align the design with current trends and accessibility guidelines.",
    "currentIssues": [
      {
        "issueId": "UI-001",
        "description": "Inconsistent use of color contrast across the application, potentially hindering readability for users with visual impairments.",
        "accessibilityConcern": "WCAG 2.0 Level AA requires a contrast ratio of 4.5:1 for normal text and 3:1 for large text.",
        "proposedSolution": "Implement a new color palette with sufficient contrast ratios, verified using accessibility testing tools. Provide options for users to select alternative high-contrast themes."
      },
      {
        "issueId": "UI-002",
        "description": "The current typography lacks clear hierarchy, making it difficult for users to quickly scan and understand information.",
        "accessibilityConcern": "Poor typography affects readability and can cause cognitive overload, particularly for users with dyslexia or learning disabilities.",
        "proposedSolution": "Refactor typography using a clear hierarchy of font sizes and weights. Use semantic HTML to structure content logically. Ensure sufficient line height and letter spacing for readability."
      },
      {
        "issueId": "UX-003",
        "description": "The task creation flow is cumbersome, requiring too many steps and fields, leading to user frustration.",
        "accessibilityConcern": "Complex forms can be difficult for users with motor impairments or cognitive disabilities to navigate and complete.",
        "proposedSolution": "Simplify the task creation form by reducing the number of required fields and implementing progressive disclosure. Provide clear and concise labels and instructions. Ensure keyboard navigation is intuitive and efficient."
      },
      {
        "issueId": "UX-004",
        "description": "Lack of sufficient feedback on user actions (e.g., task completion, deletion), creating uncertainty and a poor user experience.",
        "accessibilityConcern": "Lack of feedback can be disorienting, especially for users who rely on assistive technologies.",
        "proposedSolution": "Implement clear and immediate feedback for all user actions. Use visual cues, auditory cues (where appropriate and controllable), and ARIA attributes to communicate state changes to assistive technologies."
      }
    ],
    "refactoringComponents": [
      {
        "componentId": "CMP-001",
        "name": "Color Palette",
        "description": "Refactor the existing color palette to ensure sufficient contrast ratios and improve visual appeal. The new palette should include primary, secondary, and accent colors that meet WCAG AA guidelines.",
        "mockup": {
          "description": "A visual representation of the proposed color palette, showcasing contrast ratios and color combinations.",
          "url": "example.com/color_palette_mockup.png"
        },
        "accessibilityConsiderations": "Use a color contrast checker to verify all color combinations meet WCAG AA standards. Provide alternative high-contrast themes."
      },
      {
        "componentId": "CMP-002",
        "name": "Typography",
        "description": "Refactor the typography to establish a clear visual hierarchy and improve readability. This includes selecting appropriate font families, sizes, weights, and line heights.",
        "mockup": {
          "description": "A visual representation of the proposed typography, showcasing the hierarchy and readability.",
          "url": "example.com/typography_mockup.png"
        },
        "accessibilityConsiderations": "Use semantic HTML to structure content. Ensure sufficient line height and letter spacing. Avoid using fonts that are difficult to read."
      },
      {
        "componentId": "CMP-003",
        "name": "Task Creation Form",
        "description": "Simplify the task creation form to reduce the number of required fields and improve usability. Implement progressive disclosure to show additional options only when needed.",
        "mockup": {
          "description": "Wireframes and mockups of the simplified task creation form, showcasing the reduced number of fields and progressive disclosure.",
          "url": "example.com/task_creation_mockup.png"
        },
        "accessibilityConsiderations": "Provide clear and concise labels and instructions. Ensure keyboard navigation is intuitive and efficient. Use ARIA attributes to enhance accessibility for assistive technologies."
      },
      {
        "componentId": "CMP-004",
        "name": "Feedback Mechanisms",
        "description": "Implement clear and immediate feedback for all user actions, such as task completion and deletion. Use visual cues, auditory cues (where appropriate), and ARIA attributes to communicate state changes.",
        "mockup": {
          "description": "Mockups of the feedback mechanisms, showcasing visual and auditory cues.",
          "url": "example.com/feedback_mockup.png"
        },
        "accessibilityConsiderations": "Ensure feedback is perceivable to all users, including those with visual or auditory impairments. Provide alternative text for visual cues and transcripts for auditory cues. Allow users to control the volume of auditory cues."
      }
    ],
    "uiFlow": {
      "flowId": "FLOW-001",
      "name": "Task Creation Flow",
      "description": "The refactored task creation flow will guide users through a simplified process with fewer steps and clearer instructions.",
      "steps": [
        {
          "stepNumber": 1,
          "description": "User clicks the 'Add Task' button.",
          "expectedOutcome": "The simplified task creation form is displayed."
        },
        {
          "stepNumber": 2,
          "description": "User enters the task title and due date (required fields).",
          "expectedOutcome": "The 'Create Task' button becomes enabled."
        },
        {
          "stepNumber": 3,
          "description": "User clicks the 'Create Task' button.",
          "expectedOutcome": "The task is created and added to the task list. A success message is displayed."
        },
        {
          "stepNumber": 4,
          "description": "User can optionally expand the task to add more details (e.g., description, priority, tags).",
          "expectedOutcome": "Additional fields are displayed using progressive disclosure."
        }
      ],
      "accessibilityConsiderations": "Ensure keyboard navigation is intuitive and efficient. Provide clear and concise labels and instructions. Use ARIA attributes to enhance accessibility for assistive technologies."
    },
    "validationPlan": {
      "description": "The refactored UI/UX will be validated through a combination of automated testing, manual testing, and user feedback.",
      "tests": [
        {
          "testId": "TEST-001",
          "name": "Accessibility Testing",
          "description": "Use automated accessibility testing tools (e.g., Axe, WAVE) to identify and fix accessibility issues. Manually verify accessibility using screen readers and keyboard navigation.",
          "successCriteria": "All WCAG 2.0 Level AA guidelines are met."
        },
        {
          "testId": "TEST-002",
          "name": "Usability Testing",
          "description": "Conduct usability testing with a representative group of users to identify and fix usability issues. Measure task completion rates, error rates, and user satisfaction.",
          "successCriteria": "Task completion rates are above 90%. User satisfaction scores are above 4 out of 5."
        },
        {
          "testId": "TEST-003",
          "name": "Performance Testing",
          "description": "Measure the performance of the refactored UI/UX to ensure it is responsive and efficient.",
          "successCriteria": "Page load times are below 2 seconds. UI interactions are smooth and responsive."
        }
      ]
    }
  }
}

---

Artifact from step_3_Kodax_result.txt:
{
  "refactoringAnalysis": {
    "summary": "Based on Aurora's UI/UX refactoring plan, the existing codebase needs significant refactoring in several key areas to address accessibility concerns, improve user experience, and enhance overall maintainability. The analysis focuses on the components and issues identified in Aurora's plan.",
    "codebaseSectionsToRefactor": [
      {
        "sectionName": "Color Palette Implementation",
        "relatedIssue": "UI-001 (Inconsistent color contrast)",
        "currentCodeIssues": [
          "Hardcoded color values throughout the CSS and JavaScript files.",
          "Lack of a centralized color management system.",
          "Insufficient contrast ratios in several UI elements, failing WCAG AA guidelines."
        ],
        "refactoringActions": [
          "Introduce a CSS variables (custom properties) based theming system.",
          "Implement a color contrast checker during development/build process to prevent accessibility violations.",
          "Provide high-contrast theme options for users."
        ],
        "filesToRefactor": [
          "src/styles/global.css",
          "src/components/**/*.css",
          "src/components/**/*.js"
        ]
      },
      {
        "sectionName": "Typography Styling",
        "relatedIssue": "UI-002 (Poor typography hierarchy)",
        "currentCodeIssues": [
          "Inconsistent font sizes and weights across different sections.",
          "Lack of semantic HTML usage for headings and content structure.",
          "Insufficient line height and letter spacing, affecting readability."
        ],
        "refactoringActions": [
          "Establish a clear typographic scale using CSS variables.",
          "Refactor HTML to use semantic elements (<h1>-<h6>, <p>, etc.) correctly.",
          "Adjust line height and letter spacing for optimal readability.",
          "Consider using a system font stack for better cross-platform consistency."
        ],
        "filesToRefactor": [
          "src/styles/global.css",
          "src/components/**/*.css",
          "src/components/**/*.js",
          "src/components/**/*.jsx"
        ]
      },
      {
        "sectionName": "Task Creation Form Logic and Structure",
        "relatedIssue": "UX-003 (Cumbersome task creation flow)",
        "currentCodeIssues": [
          "Complex form with too many required fields.",
          "Lack of progressive disclosure for optional fields.",
          "Inefficient keyboard navigation.",
          "Unclear labels and instructions."
        ],
        "refactoringActions": [
          "Simplify the form by reducing the number of required fields.",
          "Implement progressive disclosure for optional fields.",
          "Improve keyboard navigation using appropriate tab indices and ARIA attributes.",
          "Provide clear and concise labels and instructions, ensuring they are associated correctly with form elements.",
          "Consider using a form library to handle state and validation more efficiently."
        ],
        "filesToRefactor": [
          "src/components/TaskForm.js",
          "src/components/TaskForm.css",
          "src/components/TaskForm.jsx"
        ]
      },
      {
        "sectionName": "Feedback Mechanism Implementation",
        "relatedIssue": "UX-004 (Lack of sufficient feedback)",
        "currentCodeIssues": [
          "Insufficient visual feedback for user actions (e.g., task completion, deletion).",
          "Absence of auditory cues (where appropriate).",
          "Lack of ARIA attributes to communicate state changes to assistive technologies."
        ],
        "refactoringActions": [
          "Implement clear and immediate visual feedback for all user actions (e.g., using color changes, animations, or icons).",
          "Add auditory cues (optional and controllable by the user) for important events.",
          "Use ARIA attributes to communicate state changes to assistive technologies (e.g., aria-live, aria-atomic, aria-relevant).",
          "Ensure feedback messages are localized and accessible."
        ],
        "filesToRefactor": [
          "src/components/**/*.js",
          "src/components/**/*.jsx",
          "src/components/**/*.css"
        ]
      }
    ],
    "performanceBottlenecks": [
      {
        "bottleneckArea": "Potential re-renders in task list updates",
        "description": "Frequent updates to the task list might cause unnecessary re-renders, impacting performance, especially with a large number of tasks.",
        "potentialSolutions": [
          "Implement memoization techniques (e.g., React.memo) to prevent re-renders of unchanged task items.",
          "Optimize task list rendering using virtualization or pagination.",
          "Ensure efficient data structures for task management."
        ],
        "affectedFiles": [
          "src/components/TaskList.js",
          "src/components/TaskList.jsx"
        ]
      }
    ],
    "maintainabilityIssues": [
      {
        "issue": "Lack of consistent coding style",
        "description": "Inconsistent coding style makes the codebase harder to read and maintain.",
        "solution": "Enforce a consistent coding style using a linter (e.g., ESLint) and a code formatter (e.g., Prettier).",
        "affectedFiles": [
          "All files in the src directory."
        ]
      },
      {
        "issue": "Insufficient documentation",
        "description": "Lack of documentation makes it difficult for new developers to understand the codebase.",
        "solution": "Add JSDoc comments to all functions and components. Create a README file with a description of the project and instructions on how to set it up and run it.",
        "affectedFiles": [
          "All files in the src directory."
        ]
      }
    ],
    "prioritization": "Refactoring should be prioritized based on the severity of the issues and their impact on accessibility and user experience. The color palette and typography refactoring (UI-001 and UI-002) should be addressed first, followed by the task creation form (UX-003) and feedback mechanisms (UX-004). Performance optimizations should be addressed after the UI/UX improvements are implemented.",
    "validationStrategy": "After each refactoring step, the changes should be validated using automated tests (unit and integration tests), manual testing (accessibility testing with screen readers and keyboard navigation), and user feedback. The validation plan outlined in Aurora's design specification should be followed.",
    "tools": [
      "ESLint",
      "Prettier",
      "Axe",
      "WAVE",
      "React DevTools",
      "Color Contrast Checker"
    ]
  }
}

---

Artifact from step_4_Lyra_result.txt:
[
  {
    "target_agent_name": "Designer",
    "new_system_prompt": "You are Aurora, a UI/UX Designer specializing in accessibility and user experience. Your primary responsibility is to create detailed design specifications for refactoring projects. You'll focus on improving the user interface, ensuring WCAG compliance, and enhancing the overall user experience based on provided analyses and goals. \n\nSpecifically, you will receive refactoring goals, analysis reports (including identified code smells and performance bottlenecks), and validated codebases. Based on these inputs, you will produce wireframes, mockups, style guides, and UI flow diagrams that clearly address usability issues and accessibility concerns. Your designs must include:\n\n*   Explicitly defined color palettes with contrast ratios meeting WCAG AA standards, including options for high-contrast themes.\n*   Clear typographic hierarchies optimized for readability, specifying font families, sizes, weights, and line heights.\n*   Simplified UI flows, especially for complex forms, using progressive disclosure and intuitive keyboard navigation.\n*   Comprehensive feedback mechanisms for user actions, utilizing visual, auditory (optional), and ARIA attributes to communicate state changes to assistive technologies.\n\nEnsure all design elements are practical, technically feasible, and thoroughly documented for the engineering team. Prioritize solutions that minimize code complexity and maximize maintainability. Your documentation should include rationale for design choices, accessibility considerations, and detailed specifications for each UI component."
  },
  {
    "target_agent_name": "Engineer",
    "new_system_prompt": "You are Kodax, a Software Engineer specializing in code refactoring and performance optimization. Your primary responsibility is to implement refactoring changes based on design specifications and refactoring goals, ensuring code quality, performance, and accessibility. \n\nYou will receive design specifications (including mockups and style guides), refactoring goals documents, and existing codebases as inputs. Your tasks include:\n\n*   Implementing UI/UX changes according to the designer's specifications, focusing on accessibility and usability.\n*   Writing comprehensive unit and integration tests to validate the refactored structure and prevent regressions.\n*   Analyzing and addressing performance bottlenecks, such as unnecessary re-renders or inefficient data structures.\n*   Ensuring code readability and maintainability by adhering to a consistent coding style and providing clear documentation.\n*   Integrating accessibility best practices, including semantic HTML, ARIA attributes, and proper color contrast.\n\nPrioritize tasks based on their impact on accessibility and user experience, addressing color palette and typography issues first, followed by form simplification and feedback mechanisms. Use tools like ESLint, Prettier, Axe, and React DevTools to ensure code quality and accessibility. Collaborate closely with the designer to resolve implementation challenges and provide feedback on the feasibility of design choices. Document all changes thoroughly, including rationale and implementation details."
  }
]



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
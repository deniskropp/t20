The overall goal is: 'Write a book about T20 Multi-Agent System'

Your role's specific goal is: 'Structure workflows and ensure clarity in agent instructions, system prompt engineering'
Your specific sub-task is: 'Generate system prompts for the 'Book Author' agent to write specific chapters or sections, ensuring adherence to the outline and a consistent tone.'

The team's roles are:
    {'reasoning': 'The user wants to write a book about T20 Multi-Agent System. This requires a structured plan that breaks down the high-level goal into manageable tasks, leveraging the defined team members and their roles. The plan should start with conceptualization and outlining, then move to content generation, and finally to review and refinement. Each step needs to be clearly defined with the responsible role and name, and dependencies between tasks must be established.', 'roles': [{'title': 'Task-Agnostic Step (TAS) extractor', 'description': "Identifies and extracts 'Task Agnostic Steps' (TAS) towards a high-level goal."}, {'title': 'Prompt Engineer', 'description': 'Structures workflows and ensures clarity in agent instructions, system prompt engineering.'}, {'title': 'Web Developer', 'description': 'Generates web development code (HTML, CSS, JavaScript, React) based on user requests, ensuring modern design principles, responsiveness, and functionality.'}, {'title': 'Book Author', 'description': 'Writes the content for the book, ensuring coherence, accuracy, and engaging narrative.'}, {'title': 'Editor', 'description': "Reviews and refines the book's content for clarity, grammar, style, and overall quality."}], 'tasks': [{'task_id': 'task_001', 'task': 'Identify and extract Task-Agnostic Steps (TAS) for writing a book about the T20 Multi-Agent System.', 'role': 'Task-Agnostic Step (TAS) extractor', 'name': 'GPTASe', 'requires': []}, {'task_id': 'task_002', 'task': 'Structure the overall book writing workflow based on the extracted TAS, defining phases and key milestones.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['task_001']}, {'task_id': 'task_003', 'task': 'Develop a detailed outline for the book, including chapters, sections, and key topics based on the T20 Multi-Agent System concepts.', 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_002']}, {'task_id': 'task_004', 'task': "Generate system prompts for the 'Book Author' agent to write specific chapters or sections, ensuring adherence to the outline and a consistent tone.", 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['task_003']}, {'task_id': 'task_005', 'task': "Write the introductory chapter of the book, covering the T20 Multi-Agent System's purpose, core concepts, and features.", 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_004']}, {'task_id': 'task_006', 'task': "Write the chapter detailing the T20 system's architecture and project structure.", 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_004']}, {'task_id': 'task_007', 'task': "Write the chapter on 'Getting Started' and 'Installation' for the T20 system.", 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_004']}, {'task_id': 'task_008', 'task': "Write the chapter on 'Usage' and 'Examples' for the T20 system.", 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_004']}, {'task_id': 'task_009', 'task': "Write the chapter on 'Core Concepts' and 'Features' of the T20 system.", 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_004']}, {'task_id': 'task_010', 'task': "Write the chapter on 'The Team' and 'Agent Definitions' within the T20 system.", 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_004']}, {'task_id': 'task_011', 'task': "Write the concluding chapter, summarizing the T20 system's capabilities and future outlook.", 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_004']}, {'task_id': 'task_012', 'task': 'Review and edit the entire book for clarity, consistency, grammar, and adherence to the outline. Provide feedback for revisions.', 'role': 'Editor', 'name': 'Lyra', 'requires': ['task_005', 'task_006', 'task_007', 'task_008', 'task_009', 'task_010', 'task_011']}, {'task_id': 'task_013', 'task': 'Incorporate feedback from the editor and make necessary revisions to the book content.', 'role': 'Book Author', 'name': 'GPTASe', 'requires': ['task_012']}, {'task_id': 'task_014', 'task': 'Final review of the revised book content to ensure all edits are incorporated and quality standards are met.', 'role': 'Editor', 'name': 'Lyra', 'requires': ['task_013']}, {'task_id': 'task_015', 'task': 'Format the final book content for publication, potentially including web development elements if required for an online version.', 'role': 'Web Developer', 'name': 'Qwen3-WebDev', 'requires': ['task_014']}]}

Please use the following outputs from the other agents as your input:

Artifact from 0__step_0_files.json (Task-Agnostic Step (TAS) extractor)[task_001]:
{"README.md": "Links: [MTC|LCP](https://ai.violass.club/mtc-lcp/)\n[Demo Logs](./logs)\n\n\n# T20 Multi-Agent System\n\nT20 is a sophisticated, multi-agent framework designed to tackle complex tasks through collaborative AI. It employs an orchestrator-delegate model where a primary \"Orchestrator\" agent dynamically creates a plan and delegates sub-tasks to a team of specialized agents, each powered by different models from the Google Gemini family.\n\nThe system is built for autonomy and traceability. Once given a high-level goal, the agents work together, passing context and artifacts between steps, until the objective is met. Every action, prompt, and output is saved in a distinct session directory for easy debugging and review.\n\n---\n\n## Core Concepts\n\nThe workflow of the T20 system follows a clear, powerful pattern:\n\n1.  **Initialization**: The user provides a single, high-level goal via a command-line interface (e.g., \"Design a modern landing page for a new SaaS product\").\n2.  **Dynamic Planning**: The `Orchestrator` agent (Meta-AI) analyzes the goal and the capabilities of its team members. It then queries a powerful LLM (like Gemini 2.5 Pro) to generate a structured, step-by-step plan in JSON format. This plan outlines the roles and specific tasks required to achieve the goal.\n3.  **Task Delegation & Execution**: The `Orchestrator` proceeds through the plan, assigning each task to the appropriate specialized agent based on their role (e.g., a design task goes to `Aurora`, the Designer).\n4.  **Contextual Collaboration**: The output (artifact) of each step is saved and can be used as input for subsequent steps. This creates a chain of context, allowing agents to build upon each other's work.\n5.  **Meta-Learning & Adaptation**: A unique `Prompt Engineer` agent (Lyra) can be tasked with refining the system prompts of other agents *during* the workflow, optimizing their performance for the specific goal at hand.\n6.  **Session Logging**: The entire process\u2014from the initial plan to the final output\u2014is meticulously logged in a dedicated session folder, providing full transparency.\n\n## Features\n\n-   **Declarative Agent Definition**: Agents are defined in simple, easy-to-read YAML files.\n-   **Dynamic, AI-Generated Plans**: No hardcoded workflows. The Orchestrator creates a custom plan for every unique goal.\n-   **Role-Based Delegation**: Tasks are intelligently assigned to agents best suited for the job.\n-   **Structured LLM Outputs**: Utilizes JSON schema enforcement with Pydantic for reliable, machine-readable plans from the Orchestrator.\n-   **Stateful Sessions**: Each run is isolated in a session directory containing all artifacts, prompts, and results.\n-   **CLI-Driven**: Simple and straightforward to run from the command line.\n-   **Powered by Google Gemini**: Leverages a suite of Gemini models, from the highly capable `gemini-2.5-pro` for orchestration to the fast and efficient `gemini-2.5-flash-lite` for specialized tasks.\n\n## The Team\n\nThe system comes pre-configured with a team of specialized agents:\n\n| Name     | Role                        | Goal                                                                                         | Model                               |\n| :------- | :-------------------------- | :------------------------------------------------------------------------------------------- | :---------------------------------- |\n| **Meta-AI**  | Orchestrator                | Orchestrate tasks, manage roles, and maintain shared context.                                | `gemini-2.5-pro`                    |\n| **Lyra**     | Prompt Engineer             | Structure workflows and refine agent instructions for clarity and effectiveness.             | `gemini-2.5-flash`                  |\n| **Aurora**   | Designer                    | Generate aesthetic layouts, color palettes, typography, and UI flows.                        | `gemini-2.5-flash-lite-preview-06-17` |\n| **Kodax**    | Engineer                    | Implement designs into clean, modular, and performant code.                                  | `gemini-2.5-flash-lite-preview-06-17` |\n| **TASe**     | Task-Agnostic Step Extractor | Identify and extract each 'Task Agnostic Step' (TAS) towards the high-level goal.            | `gemini-2.5-flash-lite-preview-06-17` |\n\n## Project Structure\n\n```\nt20-multi-agent/\n\u251c\u2500\u2500 agents/                 # YAML definitions for each agent\n\u2502   \u251c\u2500\u2500 orchestrator.yaml\n\u2502   \u251c\u2500\u2500 lyra.yaml\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 prompts/                # System prompts and instructions for agents\n\u2502   \u251c\u2500\u2500 orchestrator_instructions.txt\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 runtime/                # Core Python source code for the framework\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 executor.py         # Main execution logic, agent classes, CLI entry point\n\u2502   \u2514\u2500\u2500 loader.py           # Utilities for loading configs, agents, and prompts\n\u251c\u2500\u2500 sessions/               # Output directory for all runtime sessions (auto-generated)\n\u2502   \u2514\u2500\u2500 session_.../\n\u2502       \u251c\u2500\u2500 initial_plan.json\n\u2502       \u251c\u2500\u2500 0__step_0_Lyra_result.txt\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 setup.py                # Project setup and dependencies\n```\n\n## Getting Started\n\n### Prerequisites\n\n-   Python 3.9+\n-   Git\n\n### Installation\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/your-username/t20-multi-agent.git\n    cd t20-multi-agent\n    ```\n\n2.  **Create and activate a virtual environment (recommended):**\n    ```bash\n    python -m venv venv\n    source venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n    ```\n\n3.  **Install the package and its dependencies:**\n    This command uses the `setup.py` file to install the necessary libraries and make the `t20-cli` command available.\n    ```bash\n    pip install -e .\n    ```\n\n4.  **Set up your environment variables:**\n    Create a file named `.env` in the root of the project directory and add your Google AI API key:\n    ```\n    # .env\n    GOOGLE_API_KEY=\"YOUR_API_KEY_HERE\"\n    ```\n\n## Usage\n\nThe framework is operated through the `t20-cli` command. Simply provide the high-level goal you want the agent team to accomplish as a string argument.\n\n### Example\n\nLet's ask the team to design and build a simple webpage.\n\n```bash\nt20-cli \"Design and create the HTML and CSS for a modern, minimalist landing page for a new SaaS product called 'Innovate'.\"\n```\n\n### What Happens Next\n\n1.  A new session is created in the `sessions/` directory.\n2.  `Meta-AI` (the Orchestrator) receives the goal and generates a plan, which is saved as `initial_plan.json`. The plan might look something like this:\n    -   **Step 1 (Prompt Engineer):** Refine the system prompts for the Designer and Engineer to align with a \"modern, minimalist\" aesthetic.\n    -   **Step 2 (Designer):** Generate a color palette, typography suggestions, and a layout description for the landing page.\n    -   **Step 3 (Engineer):** Take the design specifications from the Designer and write the complete HTML and CSS code.\n3.  The `Orchestrator` executes the plan step-by-step, calling the appropriate agents.\n4.  All intermediate and final outputs are saved as artifacts in the session folder. You can monitor the progress by watching the console output and exploring the generated files.\n\n```\nAfter the run is complete, you can find the final HTML and CSS code generated by `Kodax` inside the `sessions/session_<uuid>/` folder.\n```\n\nWrong, instead you get the last step's _task and _result in the session folder. Use these with Gemini, Qwen3-WebDev etc... they serve a highly-valuable purpose as templates!\n"}

---

Artifact from 1__step_0_GPTASe_result.txt (Task-Agnostic Step (TAS) extractor)[task_001]:
{
  "output": "The following are Task-Agnostic Steps (TAS) for writing a book about the T20 Multi-Agent System:\n\n1.  **Define Book Scope and Audience**\n    *   **Description**: Clearly articulate the specific aspects of the T20 Multi-Agent System the book will cover, and identify the target audience (e.g., developers, AI researchers, project managers).\n    *   **Category**: Planning\n    *   **Purpose**: To ensure the book is focused, relevant, and effectively communicates its message to the intended readers.\n    *   **Keywords**: scope definition, audience analysis, target reader, book focus, subject matter definition\n    *   **Applicability Notes**: Essential at the beginning of any book writing project.\n    *   **Examples of Usage**: Determining if the book should be a technical deep-dive, a conceptual overview, or a practical guide.\n    *   **Typical Inputs**: High-level goal, existing documentation/knowledge about T20 MAS.\n    *   **Typical Outputs**: A clear statement of the book's scope and target audience.\n\n2.  **Outline Book Structure**\n    *   **Description**: Create a detailed outline for the book, including chapters, sections, and key topics. This outline should logically progress from introductory concepts to advanced details and practical applications of the T20 MAS.\n    *   **Category**: Planning\n    *   **Purpose**: To provide a roadmap for content creation, ensuring logical flow, comprehensive coverage, and a structured narrative.\n    *   **Keywords**: book outline, chapter planning, section breakdown, content structure, logical flow, table of contents\n    *   **Applicability Notes**: Follows scope definition; precedes content generation.\n    *   **Examples of Usage**: Detailing chapters on T20 architecture, agent definitions, planning mechanisms, execution flow, logging, and advanced features.\n    *   **Typical Inputs**: Defined book scope and audience, knowledge base about T20 MAS.\n    *   **Typical Outputs**: A hierarchical outline of the book's content.\n\n3.  **Research and Gather Information**\n    *   **Description**: Collect all necessary information, code snippets, diagrams, and examples related to the T20 Multi-Agent System that will be included in the book.\n    *   **Category**: Analysis\n    *   **Purpose**: To ensure the accuracy, depth, and completeness of the book's content.\n    *   **Keywords**: information gathering, research, data collection, technical documentation, code examples, diagrams\n    *   **Applicability Notes**: Can occur concurrently with outlining and writing, but crucial before writing specific sections.\n    *   **Examples of Usage**: Reviewing the T20 system's README, source code, and session logs; understanding Gemini model capabilities.\n    *   **Typical Inputs**: Book outline, specific topics to cover, access to T20 MAS codebase and documentation.\n    *   **Typical Outputs**: Curated information, code snippets, diagrams, and factual data.\n\n4.  **Write Content - Draft Chapters**\n    *   **Description**: Generate the initial draft of each chapter and section as per the book outline, focusing on conveying information clearly and accurately.\n    *   **Category**: Execution\n    *   **Purpose**: To produce the raw textual content of the book.\n    *   **Keywords**: content writing, drafting, chapter creation, text generation, narrative development\n    *   **Applicability Notes**: Follows outlining and research; can be done chapter by chapter.\n    *   **Examples of Usage**: Writing the introduction, detailing the 'Team' section, explaining the 'Project Structure', describing 'Getting Started' steps.\n    *   **Typical Inputs**: Book outline, gathered research information, specific prompts for content generation.\n    *   **Typical Outputs**: Draft versions of book chapters and sections.\n\n5.  **Generate Supporting Visuals**\n    *   **Description**: Create diagrams, flowcharts, code illustrations, and other visual aids that complement the written content and help explain complex aspects of the T20 MAS.\n    *   **Category**: Execution\n    *   **Purpose**: To enhance reader understanding and engagement through visual representation.\n    *   **Keywords**: diagram creation, flowchart generation, code visualization, visual aids, illustrations, infographics\n    *   **Applicability Notes**: Applicable for explaining system architecture, workflows, and code examples.\n    *   **Examples of Usage**: Creating a diagram of the T20 system's agent interaction, a flowchart of the planning process, or a visual representation of session logging.\n    *   **Typical Inputs**: Book outline, draft content, descriptions of required visuals.\n    *   **Typical Outputs**: Diagrams, flowcharts, code snippets formatted for inclusion, illustrations.\n\n6.  **Review and Refine Content**\n    *   **Description**: Edit the drafted content for clarity, accuracy, grammar, style, consistency, and adherence to the book's scope and outline. This includes technical accuracy checks and narrative flow improvements.\n    *   **Category**: Analysis / Refactoring\n    *   **Purpose**: To ensure the quality, coherence, and professional standard of the book's content.\n    *   **Keywords**: editing, proofreading, content review, technical accuracy, style guide adherence, revision, refinement\n    *   **Applicability Notes**: Performed after initial drafting of sections or chapters, and as a final pass.\n    *   **Examples of Usage**: Correcting grammatical errors, rephrasing complex sentences, verifying code examples, ensuring consistent terminology.\n    *   **Typical Inputs**: Drafted chapter content, supporting visuals, style guide, outline.\n    *   **Typical Outputs**: Revised and polished book content.\n\n7.  **Incorporate Feedback**\n    *   **Description**: Integrate suggestions and corrections received during the review process into the book's content.\n    *   **Category**: Execution\n    *   **Purpose**: To improve the book based on expert or peer feedback.\n    *   **Keywords**: feedback incorporation, revision, edits, updates, content improvement\n    *   **Applicability Notes**: Follows any review or editing phase.\n    *   **Examples of Usage**: Updating a chapter based on an editor's comments about clarity or technical accuracy.\n    *   **Typical Inputs**: Revised content, editor's feedback report.\n    *   **Typical Outputs**: Updated book content reflecting feedback.\n\n8.  **Format for Publication**\n    *   **Description**: Prepare the final, edited content into a publishable format, considering requirements for print, digital, or web deployment.\n    *   **Category**: Synthesis\n    *   **Purpose**: To make the book ready for distribution and consumption by the target audience.\n    *   **Keywords**: formatting, publication, layout, typesetting, web deployment, ebook conversion, finalization\n    *   **Applicability Notes**: The final step before distribution.\n    *   **Examples of Usage**: Converting the final manuscript into an HTML format for a web version, or a PDF for printing.\n    *   **Typical Inputs**: Finalized book content, visual assets, publication format requirements.\n    *   **Typical Outputs**: Formatted book files (e.g., HTML, PDF, Markdown).\n",
  "files": []
}

---

Artifact from 1__step_1_Lyra_result.txt (Prompt Engineer)[task_002]:
{
  "output": "The book writing workflow for the T20 Multi-Agent System is structured into the following phases and key milestones:\n\n**Phase 1: Planning and Structuring**\n*   **Milestone 1.1 (task_001):** Extract Task-Agnostic Steps (TAS) for book writing.\n    *   *Input*: High-level goal.\n    *   *Output*: A list of foundational steps for book creation.\n*   **Milestone 1.2 (task_002):** Structure the overall book writing workflow.\n    *   *Input*: TAS extracted in Milestone 1.1.\n    *   *Output*: A defined workflow with phases, tasks, roles, and dependencies.\n*   **Milestone 1.3 (task_003):** Develop a detailed book outline.\n    *   *Input*: Structured workflow (Milestone 1.2).\n    *   *Output*: A comprehensive outline including chapters, sections, and key topics.\n\n**Phase 2: Content Generation and Prompt Engineering**\n*   **Milestone 2.1 (task_004):** Generate system prompts for the Book Author agent.\n    *   *Input*: Detailed book outline (Milestone 1.3).\n    *   *Output*: Tailored system prompts for each chapter/section.\n*   **Milestone 2.2 (task_005 - task_011):** Write draft content for all book chapters.\n    *   *Input*: System prompts (Milestone 2.1) and outline (Milestone 1.3).\n    *   *Output*: Draft content for each chapter (Introduction, Architecture, Getting Started, Usage, Core Concepts, Team, Conclusion).\n\n**Phase 3: Review, Refinement, and Publication**\n*   **Milestone 3.1 (task_012):** Review and edit the entire book draft.\n    *   *Input*: Draft content from Milestone 2.2.\n    *   *Output*: Feedback and suggested revisions for clarity, consistency, and accuracy.\n*   **Milestone 3.2 (task_013):** Incorporate editor's feedback.\n    *   *Input*: Feedback from Milestone 3.1.\n    *   *Output*: Revised book content.\n*   **Milestone 3.3 (task_014):** Final review of the revised content.\n    *   *Input*: Revised content from Milestone 3.2.\n    *   *Output*: Confirmation of quality and incorporation of all feedback.\n*   **Milestone 3.4 (task_015):** Format the final book content for publication.\n    *   *Input*: Finalized book content from Milestone 3.3.\n    *   *Output*: Publication-ready book files (e.g., HTML, Markdown).",
  "files": [
    {
      "name": "book_writing_workflow.md",
      "content": "# T20 Multi-Agent System Book Writing Workflow\n\nThis document outlines the structured workflow for writing a book about the T20 Multi-Agent System. It defines the phases, key milestones, and the interdependencies between tasks, leveraging the Task-Agnostic Steps (TAS) identified.\n\n## Workflow Phases and Milestones\n\n**Phase 1: Planning and Structuring**\n\n*   **Milestone 1.1: Extract Task-Agnostic Steps (TAS)**\n    *   **Task ID:** `task_001`\n    *   **Description:** Identify and extract foundational Task-Agnostic Steps (TAS) necessary for writing a book about the T20 Multi-Agent System.\n    *   **Responsible Role:** Task-Agnostic Step (TAS) extractor\n    *   **Dependencies:** None\n\n*   **Milestone 1.2: Structure Book Writing Workflow**\n    *   **Task ID:** `task_002`\n    *   **Description:** Define the overall book writing workflow, including phases, key milestones, and task dependencies, based on the extracted TAS.\n    *   **Responsible Role:** Prompt Engineer (Lyra)\n    *   **Dependencies:** `task_001`\n\n*   **Milestone 1.3: Develop Detailed Book Outline**\n    *   **Task ID:** `task_003`\n    *   **Description:** Create a comprehensive outline for the book, detailing chapters, sections, and key topics related to the T20 Multi-Agent System.\n    *   **Responsible Role:** Book Author (GPTASe)\n    *   **Dependencies:** `task_002`\n\n**Phase 2: Content Generation and Prompt Engineering**\n\n*   **Milestone 2.1: Generate System Prompts for Book Author**\n    *   **Task ID:** `task_004`\n    *   **Description:** Develop specific system prompts for the 'Book Author' agent to generate content for each chapter/section, ensuring adherence to the outline and a consistent tone.\n    *   **Responsible Role:** Prompt Engineer (Lyra)\n    *   **Dependencies:** `task_003`\n\n*   **Milestone 2.2: Draft Book Chapters**\n    *   **Task IDs:** `task_005`, `task_006`, `task_007`, `task_008`, `task_009`, `task_010`, `task_011`\n    *   **Description:** Generate the initial draft content for all defined chapters of the book (Introduction, Architecture, Getting Started, Usage, Core Concepts, Team, Conclusion).\n    *   **Responsible Role:** Book Author (GPTASe)\n    *   **Dependencies:** `task_004`\n\n**Phase 3: Review, Refinement, and Publication**\n\n*   **Milestone 3.1: Review and Edit Book Content**\n    *   **Task ID:** `task_012`\n    *   **Description:** Conduct a thorough review and edit of the entire drafted book content for clarity, consistency, grammar, style, and technical accuracy, providing feedback for revisions.\n    *   **Responsible Role:** Editor (Lyra)\n    *   **Dependencies:** `task_005`, `task_006`, `task_007`, `task_008`, `task_009`, `task_010`, `task_011`\n\n*   **Milestone 3.2: Incorporate Editor's Feedback**\n    *   **Task ID:** `task_013`\n    *   **Description:** Integrate the feedback and suggestions from the editor into the book's content.\n    *   **Responsible Role:** Book Author (GPTASe)\n    *   **Dependencies:** `task_012`\n\n*   **Milestone 3.3: Final Review of Revised Content**\n    *   **Task ID:** `task_014`\n    *   **Description:** Perform a final review of the revised book content to ensure all edits have been incorporated and quality standards are met.\n    *   **Responsible Role:** Editor (Lyra)\n    *   **Dependencies:** `task_013`\n\n*   **Milestone 3.4: Format for Publication**\n    *   **Task ID:** `task_015`\n    *   **Description:** Format the final, approved book content into a publication-ready format, potentially including web development elements for an online version.\n    *   **Responsible Role:** Web Developer (Qwen3-WebDev)\n    *   **Dependencies:** `task_014`\n\n## Summary\n\nThis workflow provides a clear, phased approach to writing the T20 Multi-Agent System book, ensuring that each stage builds upon the previous one, with defined responsibilities and dependencies.\n"
    }
  ]
}

---

Artifact from 1__step_2_GPTASe_result.txt (Book Author)[task_003]:
{
  "output": "Based on the provided information and the overall goal of writing a book about the T20 Multi-Agent System, here is a detailed outline developed by the Book Author (GPTASe) role:\n\n## Book Title: Mastering the T20 Multi-Agent System: Architecture, Implementation, and Best Practices\n\n### **Part 1: Foundations of T20 Multi-Agent Systems**\n\n**Chapter 1: Introduction to T20 Multi-Agent System**\n*   1.1 What is a Multi-Agent System (MAS)?\n    *   Core concepts: agents, environment, interaction, goals.\n*   1.2 The T20 System: A Paradigm Shift\n    *   Overview of T20's purpose and philosophy.\n    *   Key differentiators from traditional MAS frameworks.\n*   1.3 Target Audience and Book Scope\n    *   Defining who the book is for (developers, researchers, architects).\n    *   What the book will cover and what it won't.\n*   1.4 How to Use This Book\n    *   Navigating the structure and content.\n    *   Leveraging examples and code.\n\n**Chapter 2: Core Concepts and Architecture**\n*   2.1 The Orchestrator-Delegate Model\n    *   Role of the Orchestrator (`Meta-AI`).\n    *   Function of delegate agents.\n*   2.2 Agent Definition and Capabilities\n    *   YAML-based agent configuration.\n    *   Defining roles, goals, and models.\n*   2.3 Dynamic Planning Mechanism\n    *   AI-generated, JSON-based plans.\n    *   Pydantic schema enforcement.\n*   2.4 Contextual Collaboration and Artifact Passing\n    *   How context is maintained across steps.\n    *   The role of session artifacts.\n*   2.5 Meta-Learning and Prompt Engineering (`Lyra`)\n    *   Dynamic prompt refinement during execution.\n    *   Impact on agent performance.\n*   2.6 Session Logging and Traceability\n    *   Importance of detailed logging.\n    *   Structure of session directories.\n\n**Chapter 3: Getting Started with T20**\n*   3.1 Prerequisites\n    *   Software (Python, Git).\n    *   Hardware considerations (optional).\n*   3.2 Installation Guide\n    *   Cloning the repository.\n    *   Setting up virtual environments.\n    *   Installing the T20 package (`pip install -e .`).\n*   3.3 Environment Setup\n    *   API Key configuration (`.env` file).\n    *   Verifying installation.\n*   3.4 Your First T20 Run\n    *   Running a simple example via `t20-cli`.\n    *   Understanding the initial output and session creation.\n\n### **Part 2: Deep Dive into T20 Functionality**\n\n**Chapter 4: Usage and Advanced Examples**\n*   4.1 Basic Usage Patterns\n    *   Crafting effective high-level goals.\n    *   Interpreting CLI output.\n*   4.2 Exploring Session Artifacts\n    *   Navigating session directories.\n    *   Analyzing `initial_plan.json`, agent outputs, and logs.\n*   4.3 Advanced Scenarios\n    *   Complex goal decomposition examples.\n    *   Leveraging `Lyra` for prompt optimization.\n    *   Customizing agent configurations.\n*   4.4 Debugging and Troubleshooting\n    *   Common issues and solutions.\n    *   Using session logs for debugging.\n\n**Chapter 5: The T20 Team: Agents in Detail**\n*   5.1 `Meta-AI` (Orchestrator)\n    *   Core responsibilities and decision-making.\n    *   Underlying model (`gemini-2.5-pro`).\n*   5.2 `Lyra` (Prompt Engineer)\n    *   Functionality in workflow structuring and prompt refinement.\n    *   Underlying model (`gemini-2.5-flash`).\n*   5.3 `Aurora` (Designer)\n    *   Capabilities: UI/UX design, color palettes, typography.\n    *   Underlying model.\n*   5.4 `Kodax` (Engineer)\n    *   Capabilities: Code generation (HTML, CSS, JS, etc.).\n    *   Underlying model.\n*   5.5 `TASe` (Task-Agnostic Step Extractor)\n    *   Role in defining modular actions.\n    *   Underlying model.\n*   5.6 Defining Your Own Agents\n    *   Structure of agent YAML files.\n    *   Integrating custom agents.\n\n### **Part 3: Extending and Contributing**\n\n**Chapter 6: Project Structure and Internals**\n*   6.1 Directory Layout Explained\n    *   `agents/`, `prompts/`, `runtime/`, `sessions/`.\n*   6.2 The `runtime/` Module\n    *   `executor.py`: Core execution logic.\n    *   `loader.py`: Configuration and agent loading.\n*   6.3 Customizing the Orchestration Logic\n    *   Modifying planning strategies.\n    *   Implementing new delegation patterns.\n*   6.4 Advanced Prompt Engineering Techniques\n    *   Best practices for system prompts.\n    *   Few-shot prompting within T20.\n\n**Chapter 7: Future Directions and Contributions**\n*   7.1 Potential Enhancements for T20\n    *   New agent types.\n    *   Improved planning algorithms.\n    *   Enhanced state management.\n*   7.2 Contributing to the T20 Project\n    *   Code contributions.\n    *   Documentation improvements.\n    *   Community engagement.\n*   7.3 The Future of Multi-Agent Systems\n    *   Broader implications and research trends.\n\n**Appendix**\n*   A. Glossary of Terms\n*   B. Common Error Codes and Solutions\n*   C. Full Example Session Log\n*   D. References\n",
  "files": [
    {
      "name": "book_outline.md",
      "content": "# Book Outline: Mastering the T20 Multi-Agent System\n\n## Table of Contents\n\n**Part 1: Foundations of T20 Multi-Agent Systems**\n\n**Chapter 1: Introduction to T20 Multi-Agent System**\n*   1.1 What is a Multi-Agent System (MAS)?\n*   1.2 The T20 System: A Paradigm Shift\n*   1.3 Target Audience and Book Scope\n*   1.4 How to Use This Book\n\n**Chapter 2: Core Concepts and Architecture**\n*   2.1 The Orchestrator-Delegate Model\n*   2.2 Agent Definition and Capabilities\n*   2.3 Dynamic Planning Mechanism\n*   2.4 Contextual Collaboration and Artifact Passing\n*   2.5 Meta-Learning and Prompt Engineering (`Lyra`)\n*   2.6 Session Logging and Traceability\n\n**Chapter 3: Getting Started with T20**\n*   3.1 Prerequisites\n*   3.2 Installation Guide\n*   3.3 Environment Setup\n*   3.4 Your First T20 Run\n\n**Part 2: Deep Dive into T20 Functionality**\n\n**Chapter 4: Usage and Advanced Examples**\n*   4.1 Basic Usage Patterns\n*   4.2 Exploring Session Artifacts\n*   4.3 Advanced Scenarios\n*   4.4 Debugging and Troubleshooting\n\n**Chapter 5: The T20 Team: Agents in Detail**\n*   5.1 `Meta-AI` (Orchestrator)\n*   5.2 `Lyra` (Prompt Engineer)\n*   5.3 `Aurora` (Designer)\n*   5.4 `Kodax` (Engineer)\n*   5.5 `TASe` (Task-Agnostic Step Extractor)\n*   5.6 Defining Your Own Agents\n\n**Part 3: Extending and Contributing**\n\n**Chapter 6: Project Structure and Internals**\n*   6.1 Directory Layout Explained\n*   6.2 The `runtime/` Module\n*   6.3 Customizing the Orchestration Logic\n*   6.4 Advanced Prompt Engineering Techniques\n\n**Chapter 7: Future Directions and Contributions**\n*   7.1 Potential Enhancements for T20\n*   7.2 Contributing to the T20 Project\n*   7.3 The Future of Multi-Agent Systems\n\n**Appendix**\n*   A. Glossary of Terms\n*   B. Common Error Codes and Solutions\n*   C. Full Example Session Log\n*   D. References\n"
    }
  ]
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
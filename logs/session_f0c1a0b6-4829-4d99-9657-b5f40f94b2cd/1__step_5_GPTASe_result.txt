{
  "output": "This chapter focuses on detailing the architecture and project structure of the T20 Multi-Agent System. It will explain the core components, their interrelations, and how the system is organized. This includes a breakdown of the directory layout, the purpose of key files and modules, and how agents are defined and configured. The aim is to provide a clear technical blueprint for understanding and potentially extending the T20 framework.",
  "files": [
    {
      "name": "chapter_2_architecture_project_structure.md",
      "content": "# Chapter 2: Core Concepts and Architecture\n\n## 2.1 The Orchestrator-Delegate Model\n\nThe T20 system operates on a sophisticated **Orchestrator-Delegate model**. This architecture is central to its dynamic planning and execution capabilities. The **Orchestrator** agent, primarily `Meta-AI`, serves as the brain of the operation. Its core responsibilities include:\n\n*   **Goal Analysis:** Interpreting the high-level user goal.\n*   **Plan Generation:** Dynamically creating a step-by-step plan, often in JSON format, outlining the tasks required to achieve the goal.\n*   **Task Delegation:** Assigning specific sub-tasks to the most appropriate specialized agents (delegates) based on their defined roles and capabilities.\n*   **Context Management:** Ensuring that the output and context from one step are correctly passed to the next.\n\nThe **Delegate Agents** are specialized entities, each designed to perform a specific set of tasks. Examples include `Aurora` for design, `Kodax` for engineering, and `TASe` for step extraction. They receive tasks from the Orchestrator, execute them, and return their outputs (artifacts) back to the Orchestrator or the next agent in the sequence.\n\n## 2.2 Agent Definition and Capabilities\n\nAgents within the T20 system are defined in a clear and accessible manner using **YAML files**. These configuration files specify crucial aspects of each agent, enabling the Orchestrator to understand and utilize them effectively. Key elements defined in an agent's YAML configuration include:\n\n*   **`name`**: A unique identifier for the agent (e.g., `Meta-AI`, `Aurora`).\n*   **`role`**: The primary function or expertise of the agent (e.g., `Orchestrator`, `Designer`).\n*   **`goal`**: A brief description of the agent's overarching objective within the system.\n*   **`model`**: The specific Large Language Model (LLM) powering the agent (e.g., `gemini-2.5-pro`, `gemini-2.5-flash-lite`). This dictates the agent's underlying capabilities and performance characteristics.\n\nThese declarative definitions allow the T20 system to be highly configurable and extensible, making it straightforward to add new agents with different specializations or to swap out underlying models.\n\n## 2.3 Dynamic Planning Mechanism\n\nA cornerstone of the T20 system is its **Dynamic Planning Mechanism**. Unlike rigid, pre-programmed workflows, T20 generates plans on-the-fly for each unique goal. This process typically involves:\n\n1.  **Orchestrator Interpretation:** The `Meta-AI` agent analyzes the user's high-level goal.\n2.  **LLM-Powered Planning:** The Orchestrator queries a powerful LLM (like `gemini-2.5-pro`) to break down the goal into a sequence of actionable steps.\n3.  **Structured Plan Output:** The generated plan is structured, often in JSON format, detailing the sequence of tasks, the agents responsible for each task, and any dependencies.\n*   **Schema Enforcement:** The system utilizes **Pydantic** for schema enforcement, ensuring that the plans generated by the LLM are reliable, machine-readable, and adhere to a predefined structure. This prevents errors and ensures smooth execution.\n\nThis dynamic approach allows T20 to adapt to a wide variety of tasks without requiring manual workflow configuration for each new objective.\n\n## 2.4 Contextual Collaboration and Artifact Passing\n\nEffective collaboration between agents is facilitated through **Contextual Collaboration** and **Artifact Passing**. As the Orchestrator executes the plan, the output of each agent's task is treated as an **artifact**. These artifacts represent the tangible results of an agent's work (e.g., generated code, design descriptions, extracted information).\n\n*   **Stateful Sessions:** Each run of the T20 system is contained within a dedicated **session directory**. This directory stores all artifacts, prompts, and logs generated during that specific execution.\n*   **Context Chaining:** Artifacts produced by one agent are made available as inputs for subsequent agents. This creates a chain of context, allowing agents to build upon each other's work seamlessly. For example, design specifications generated by `Aurora` can be passed to `Kodax` for implementation.\n\nThis mechanism ensures that information flows correctly through the system, maintaining a coherent state and enabling complex, multi-step task completion.\n\n## 2.5 Meta-Learning and Prompt Engineering (`Lyra`)\n\nThe T20 system includes a unique agent, `Lyra`, the **Prompt Engineer**. `Lyra`'s role is to enhance the performance and effectiveness of other agents by refining their system prompts *during* the workflow execution. This **Meta-Learning** capability allows the system to:\n\n*   **Adapt Prompts:** Adjust prompts based on the specific task, intermediate results, or desired output quality.\n*   **Optimize Performance:** Improve the accuracy, creativity, or efficiency of agent responses.\n*   **Ensure Consistency:** Maintain a consistent tone and adherence to instructions across different agents and tasks.\n\nBy dynamically optimizing prompts, `Lyra` contributes significantly to the overall robustness and adaptability of the T20 system.\n\n## 2.6 Session Logging and Traceability\n\n**Session Logging** is a fundamental feature of the T20 system, providing unparalleled **Traceability**. Every aspect of an execution run is meticulously recorded within the session directory:\n\n*   **Initial Goal:** The original user input.\n*   **Initial Plan:** The AI-generated plan (`initial_plan.json`).\n*   **Agent Prompts:** The exact prompts sent to each agent.\n*   **Agent Outputs:** The artifacts (results) generated by each agent.\n*   **Execution Logs:** Detailed logs of agent actions and system operations.\n\nThe structure of these session directories (e.g., `sessions/session_<uuid>/`) makes it easy to locate and review specific runs. This detailed logging is crucial for:\n\n*   **Debugging:** Identifying the root cause of errors or unexpected behavior.\n*   **Auditing:** Understanding the complete decision-making process.\n*   **Learning:** Analyzing how the system tackled specific problems to improve future interactions.\n\nThis commitment to transparency and traceability ensures that users can fully understand and trust the T20 system's operations."
    }
  ]
}
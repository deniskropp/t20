{
  "frontend_implementation_plan": {
    "technology_stack": {
      "framework": "React",
      "state_management": "Context API / Zustand (for simplicity and modularity)",
      "styling": "Tailwind CSS (for rapid, utility-first styling adhering to Aurora's design)",
      "ui_components": "Headless UI (for accessible and customizable components)",
      "icons": "Heroicons"
    },
    "component_breakdown": [
      {
        "component_name": "Dashboard",
        "description": "Displays a list of annotation projects, allowing users to create new ones or select existing ones. Includes search and filtering capabilities.",
        "responsibilities": [
          "Fetch and display project list.",
          "Handle project creation and navigation.",
          "Implement search and filter functionality."
        ],
        "dependencies": ["ProjectCard", "Button", "Input", "SearchFilter"]
      },
      {
        "component_name": "ProjectCard",
        "description": "Represents a single annotation project in the dashboard, showing its status and progress.",
        "responsibilities": ["Display project details (name, status, progress)."],
        "dependencies": ["Card", "ProgressBar", "Text"]
      },
      {
        "component_name": "AnnotationInterface",
        "description": "The main workspace for annotators. Displays the prompt and the editable list of TAS.",
        "responsibilities": [
          "Fetch and display prompt.",
          "Render and manage the list of TAS items.",
          "Handle TAS editing, adding, deleting, and reordering.",
          "Implement navigation between prompts.",
          "Manage save and validation states.",
          "Provide a space for feedback/comments."
        ],
        "dependencies": [
          "PromptDisplay",
          "CompletionListEditor",
          "TASItem",
          "NavigationButtons",
          "FeedbackArea",
          "PrimaryButton",
          "SecondaryButton"
        ]
      },
      {
        "component_name": "PromptDisplay",
        "description": "A read-only component to display the input prompt.",
        "responsibilities": ["Display prompt text and associated metadata."],
        "dependencies": ["Card", "Text"]
      },
      {
        "component_name": "CompletionListEditor",
        "description": "Manages the list of TAS items, enabling editing, reordering, and addition.",
        "responsibilities": [
          "Render TAS items.",
          "Handle drag-and-drop reordering.",
          "Manage state for adding new TAS.",
          "Pass edit/delete/reorder actions to parent."
        ],
        "dependencies": ["TASItem", "Button", "SortableList"]
      },
      {
        "component_name": "TASItem",
        "description": "Represents a single Task-Agnostic Step in the list.",
        "responsibilities": [
          "Display TAS text.",
          "Provide inline editing functionality.",
          "Handle delete and drag handles.",
          "Visually indicate edit state."
        ],
        "dependencies": ["Input", "Button", "DragHandle", "Text"]
      },
      {
        "component_name": "ReviewInterface",
        "description": "Interface for reviewers, displaying annotated data and reviewer controls.",
        "responsibilities": [
          "Display prompt (read-only).",
          "Render annotated TAS list (read-only).",
          "Display reviewer feedback.",
          "Provide reviewer actions (Approve, Request Changes, Reject)."
        ],
        "dependencies": [
          "PromptDisplay",
          "CompletionListReadOnly",
          "ReviewerControls",
          "FeedbackDisplay"
        ]
      },
      {
        "component_name": "ValidationInterface",
        "description": "Final validation stage, similar to review but with finalization controls.",
        "responsibilities": [
          "Display prompt (read-only).",
          "Render annotated TAS list (read-only).",
          "Display reviewer feedback (read-only).",
          "Provide final validation actions (Finalize, Send Back)."
        ],
        "dependencies": [
          "PromptDisplay",
          "CompletionListReadOnly",
          "FinalValidationControls"
        ]
      },
      {
        "component_name": "CommonUIComponents",
        "description": "Reusable UI elements like Buttons, Inputs, Modals, Cards, ProgressBars, etc., styled according to Aurora's design.",
        "responsibilities": ["Provide consistent and accessible UI elements."],
        "dependencies": ["Headless UI", "Tailwind CSS"]
      }
    ],
    "accessibility_strategy": [
      "Utilize Headless UI components for built-in accessibility.",
      "Ensure WCAG 2.1 AA compliance for color contrast and focus indicators.",
      "Implement ARIA attributes where necessary for screen reader users.",
      "Support keyboard navigation for all interactive elements.",
      "Allow for text resizing."
    ],
    "responsiveness_strategy": [
      "Employ Tailwind CSS's responsive utility classes for a mobile-first approach.",
      "Ensure layouts adapt gracefully across different screen sizes (mobile, tablet, desktop).",
      "Test thoroughly on various devices and viewport sizes."
    ],
    "development_process": [
      "Set up React project with Tailwind CSS and Headless UI.",
      "Create basic layout structure based on Aurora's UI flow.",
      "Develop and implement common UI components.",
      "Build the Dashboard component.",
      "Develop the AnnotationInterface and its sub-components.",
      "Implement the Review and Validation Interfaces.",
      "Integrate with backend API endpoints (to be defined in backend plan).",
      "Conduct thorough testing (unit, integration, accessibility, responsiveness)."
    ]
  },
  "backend_implementation_plan": {
    "technology_stack": {
      "language": "Python",
      "framework": "FastAPI (for performance and ease of use)",
      "database": "PostgreSQL (for structured data storage)",
      "ORM": "SQLAlchemy",
      "authentication": "JWT (JSON Web Tokens)"
    },
    "api_endpoints": [
      {
        "path": "/projects",
        "method": "GET",
        "description": "Retrieve a list of all annotation projects.",
        "response_schema": "List of Project objects"
      },
      {
        "path": "/projects",
        "method": "POST",
        "description": "Create a new annotation project.",
        "request_schema": "Project creation payload (e.g., name, description)",
        "response_schema": "Created Project object"
      },
      {
        "path": "/projects/{project_id}/prompts",
        "method": "GET",
        "description": "Retrieve prompts for a specific project, with optional filtering/pagination.",
        "response_schema": "List of Prompt objects"
      },
      {
        "path": "/prompts/{prompt_id}",
        "method": "GET",
        "description": "Retrieve a single prompt with its current annotations.",
        "response_schema": "Prompt object with annotations"
      },
      {
        "path": "/prompts/{prompt_id}/annotations",
        "method": "POST",
        "description": "Submit or update annotations for a given prompt.",
        "request_schema": "Annotation data (TAS list, status, comments)",
        "response_schema": "Updated Prompt object"
      },
      {
        "path": "/prompts/{prompt_id}/review",
        "method": "POST",
        "description": "Submit review decisions for a prompt.",
        "request_schema": "Review data (decision, comments)",
        "response_schema": "Updated Prompt object with review status"
      },
      {
        "path": "/prompts/{prompt_id}/validate",
        "method": "POST",
        "description": "Submit final validation decision for a prompt.",
        "request_schema": "Validation data (decision, comments)",
        "response_schema": "Updated Prompt object with validation status"
      },
      {
        "path": "/export/{project_id}",
        "method": "GET",
        "description": "Export validated data for a project in JSONL format.",
        "response_schema": "JSONL file stream"
      }
    ],
    "database_schema": {
      "tables": [
        {
          "name": "projects",
          "columns": [
            {"name": "id", "type": "UUID", "primary_key": true},
            {"name": "name", "type": "VARCHAR", "not_null": true},
            {"name": "description", "type": "TEXT"},
            {"name": "created_at", "type": "TIMESTAMP", "default": "NOW()"}
          ]
        },
        {
          "name": "prompts",
          "columns": [
            {"name": "id", "type": "UUID", "primary_key": true},
            {"name": "project_id", "type": "UUID", "foreign_key": "projects.id"},
            {"name": "text", "type": "TEXT", "not_null": true},
            {"name": "source_data_url", "type": "VARCHAR"},
            {"name": "annotation_status", "type": "VARCHAR", "default": "'PENDING'"},
            {"name": "review_status", "type": "VARCHAR", "default": "'PENDING'"},
            {"name": "validation_status", "type": "VARCHAR", "default": "'PENDING'"},
            {"name": "created_at", "type": "TIMESTAMP", "default": "NOW()"}
          ]
        },
        {
          "name": "annotations",
          "columns": [
            {"name": "id", "type": "UUID", "primary_key": true},
            {"name": "prompt_id", "type": "UUID", "foreign_key": "prompts.id"},
            {"name": "annotator_id", "type": "UUID"},
            {"name": "tas_items", "type": "JSONB", "not_null": true},
            {"name": "comments", "type": "TEXT"},
            {"name": "annotated_at", "type": "TIMESTAMP", "default": "NOW()"}
          ]
        },
        {
          "name": "reviews",
          "columns": [
            {"name": "id", "type": "UUID", "primary_key": true},
            {"name": "prompt_id", "type": "UUID", "foreign_key": "prompts.id"},
            {"name": "reviewer_id", "type": "UUID"},
            {"name": "decision", "type": "VARCHAR", "not_null": true},
            {"name": "comments", "type": "TEXT"},
            {"name": "reviewed_at", "type": "TIMESTAMP", "default": "NOW()"}
          ]
        },
        {
          "name": "validations",
          "columns": [
            {"name": "id", "type": "UUID", "primary_key": true},
            {"name": "prompt_id", "type": "UUID", "foreign_key": "prompts.id"},
            {"name": "validator_id", "type": "UUID"},
            {"name": "decision", "type": "VARCHAR", "not_null": true},
            {"name": "comments", "type": "TEXT"},
            {"name": "validated_at", "type": "TIMESTAMP", "default": "NOW()"}
          ]
        }
      ]
    },
    "development_process": [
      "Set up FastAPI project with PostgreSQL and SQLAlchemy.",
      "Define Pydantic models for request/response schemas and database entities.",
      "Implement database migrations.",
      "Develop API endpoints for project management.",
      "Implement endpoints for retrieving and submitting prompt annotations.",
      "Develop review and validation endpoints.",
      "Implement authentication and authorization.",
      "Create the export endpoint for generating JSONL files.",
      "Write unit and integration tests for API endpoints.",
      "Set up CI/CD for deployment."
    ]
  },
  "data_handling_and_integration": {
    "initial_data_loading": "Scripts will be developed to load raw data (from Lyra's sourcing plan) into the `prompts` table, initially with `annotation_status` as 'PENDING'.",
    "data_flow": "Frontend -> FastAPI Backend API -> Database. Export endpoint retrieves validated data from the database.",
    "integration_with_uTASe": "The backend will need a mechanism to receive processed prompts from uTASe, or to trigger uTASe processing on newly added raw data. This might involve a queue or a direct API call.",
    "validation_logic": "The backend will enforce state transitions for prompt statuses (e.g., PENDING -> ANNOTATED -> REVIEWED -> VALIDATED).",
    "export_format_adherence": "The export endpoint will query for prompts with `validation_status` = 'VALIDATED' and format them into JSONL according to Lyra's `dataset_schema` and `dataset_format`."
  }
}
The overall goal is: 'refactoring'

Your role's specific goal is: 'Refine prompts, structure workflows and ensure clarity in agent instructions.'
Your specific sub-task is: 'Refine the prompts for the Designer and Engineer agents to ensure clarity and focus on the refactoring goals. This includes specifying the desired aesthetic improvements and code quality standards.'

Please use the following outputs from the other agents as your input:

Artifact from step_0_TASe_result.txt:
[
  {
    "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Assess Current State",
    "description": "Evaluate the existing system, code, or process to understand its current structure, functionality, and weaknesses. This includes identifying areas of technical debt, performance bottlenecks, or maintainability issues. The assessment provides a baseline for measuring the impact of refactoring efforts.",
    "category": "Assessment",
    "purpose": "To understand the current state and identify areas for improvement.",
    "keywords": [
      "evaluation",
      "analysis",
      "assessment",
      "diagnosis"
    ],
    "applicability_notes": "Applicable in any situation where an existing system, process, or code base needs to be understood before making modifications. The scope of the assessment can vary depending on the size and complexity of the system.",
    "examples_of_usage": [
      "Evaluating the performance of a website to identify slow-loading pages.",
      "Analyzing a business process to identify bottlenecks and inefficiencies.",
      "Assessing the maintainability of a software application to identify areas of technical debt."
    ],
    "typical_inputs": [
      "Existing system or process",
      "Performance data",
      "Codebase"
    ],
    "typical_outputs": [
      "Assessment report",
      "List of issues",
      "Prioritized areas for improvement"
    ]
  },
  {
    "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef1",
    "name": "Define Objectives",
    "description": "Establish clear and measurable goals for the refactoring effort. These objectives should address the identified weaknesses and align with the overall business or project goals. Defining objectives provides a target for the refactoring process and enables tracking of progress and success.",
    "category": "Planning",
    "purpose": "To set clear and measurable goals for the refactoring effort.",
    "keywords": [
      "goals",
      "objectives",
      "targets",
      "planning"
    ],
    "applicability_notes": "Essential for any refactoring effort to ensure that the changes are aligned with the overall goals and provide measurable improvements. Objectives should be specific, measurable, achievable, relevant, and time-bound (SMART).",
    "examples_of_usage": [
      "Setting a goal to reduce the complexity of a code module by a certain percentage.",
      "Defining an objective to improve the performance of a database query by a specific factor.",
      "Establishing a target to reduce the number of bugs in a software application."
    ],
    "typical_inputs": [
      "Assessment report",
      "Business goals",
      "Project requirements"
    ],
    "typical_outputs": [
      "Refactoring objectives",
      "Success metrics",
      "Project plan"
    ]
  },
  {
    "id": "c3d4e5f6-a7b8-9012-3456-7890abcdef12",
    "name": "Prioritize Tasks",
    "description": "Rank the identified refactoring tasks based on their impact, urgency, and feasibility. Prioritization ensures that the most important and impactful tasks are addressed first, maximizing the overall benefit of the refactoring effort. This step involves considering factors such as technical debt, performance bottlenecks, and maintainability issues.",
    "category": "Planning",
    "purpose": "To rank refactoring tasks based on impact, urgency, and feasibility.",
    "keywords": [
      "prioritization",
      "ranking",
      "importance",
      "urgency"
    ],
    "applicability_notes": "Crucial for managing refactoring efforts effectively, especially when resources are limited. Prioritization helps to focus on the most important tasks and ensures that the overall impact of the refactoring is maximized.",
    "examples_of_usage": [
      "Prioritizing refactoring tasks based on their impact on system performance.",
      "Ranking tasks based on the level of technical debt they address.",
      "Prioritizing tasks based on their impact on maintainability."
    ],
    "typical_inputs": [
      "List of refactoring tasks",
      "Impact assessment",
      "Resource constraints"
    ],
    "typical_outputs": [
      "Prioritized task list",
      "Implementation roadmap"
    ]
  },
  {
    "id": "d4e5f6a7-b8c9-0123-4567-890abcdef123",
    "name": "Implement Changes",
    "description": "Execute the planned refactoring tasks, making incremental and controlled changes to the system, code, or process. This involves applying refactoring techniques, testing the changes thoroughly, and ensuring that the functionality and performance are maintained or improved. Continuous integration and testing are essential during this phase.",
    "category": "Execution",
    "purpose": "To execute refactoring tasks and make incremental improvements.",
    "keywords": [
      "implementation",
      "execution",
      "changes",
      "improvement"
    ],
    "applicability_notes": "The core of the refactoring process, where the actual changes are made. It's crucial to make incremental changes and test them thoroughly to minimize the risk of introducing new issues.",
    "examples_of_usage": [
      "Applying refactoring techniques to improve code readability and maintainability.",
      "Optimizing database queries to improve performance.",
      "Restructuring a business process to improve efficiency."
    ],
    "typical_inputs": [
      "Prioritized task list",
      "Refactoring plan",
      "Development environment"
    ],
    "typical_outputs": [
      "Refactored code",
      "Improved system",
      "Updated documentation"
    ]
  },
  {
    "id": "e5f6a7b8-c9d0-1234-5678-90abcdef1234",
    "name": "Validate Results",
    "description": "Verify that the refactoring efforts have achieved the defined objectives and that the system, code, or process is functioning as expected. This involves measuring the impact of the changes, comparing the results against the success metrics, and ensuring that no new issues have been introduced. Performance testing, regression testing, and user acceptance testing are common validation techniques.",
    "category": "Assessment",
    "purpose": "To verify that refactoring efforts have achieved the defined objectives.",
    "keywords": [
      "validation",
      "verification",
      "testing",
      "measurement"
    ],
    "applicability_notes": "Essential to ensure that the refactoring has been successful and that the system is functioning correctly. Validation provides evidence that the changes have had the desired impact and that no new issues have been introduced.",
    "examples_of_usage": [
      "Measuring the performance improvement of a database query after refactoring.",
      "Comparing the number of bugs in a software application before and after refactoring.",
      "Conducting user acceptance testing to ensure that the refactored system meets user requirements."
    ],
    "typical_inputs": [
      "Refactored system",
      "Success metrics",
      "Test cases"
    ],
    "typical_outputs": [
      "Validation report",
      "Performance data",
      "User feedback"
    ]
  }
]



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
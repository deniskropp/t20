The overall goal is: 'System Overview'

Your role's specific goal is: 'Refine prompts, structure workflows and ensure clarity in agent instructions.'
Your specific sub-task is: 'Create a prompt for the Engineer to implement a basic interactive prototype of the system overview, focusing on key functionalities and data interactions.'

Please use the following outputs from the other agents as your input:

Artifact from step_0_Lyra_result.txt:
{
  "target_agent_name": "Aurora (Designer) & Kodax (Engineer)",
  "new_system_prompt": "## System Overview Task Decomposition\n\n**Overall Goal:** Provide a comprehensive System Overview.\n\n**Context:** This task requires collaboration between a Designer (Aurora) and an Engineer (Kodax). Aurora will focus on visualizing the system components and their interactions, while Kodax will focus on detailing the technical architecture and data flow.\n\n**Actionable Tasks:**\n\n**Aurora (Designer) - System Prompt:**\n\n1.  **Objective:** Create a high-level visual representation (diagram, flowchart, or similar) of the system. This visualization should clearly illustrate the main components of the system and how they interact with each other.\n2.  **Input:** You will receive a textual description of the system's functionality and components from Kodax (Engineer).\n3.  **Instructions:**\n    *   Based on Kodax's description, identify the key components of the system.\n    *   Determine the relationships and interactions between these components.\n    *   Choose the most appropriate visual format to represent the system (e.g., block diagram, UML diagram, flowchart).\n    *   Create a clear and concise visual representation of the system, highlighting the data flow and component interactions.\n    *   Ensure the diagram is easily understandable by both technical and non-technical audiences.\n4.  **Output:** A visual representation (image file or description of a visual) of the system architecture, including labeled components and data flow.\n5. **Constraints:** Consider using common design patterns and visual conventions to improve clarity. The diagram should avoid excessive detail and focus on the overall system architecture.\n\n**Kodax (Engineer) - System Prompt:**\n\n1.  **Objective:** Provide a detailed textual description of the system's architecture, including its components, their functionalities, and data flow.\n2.  **Input:** You have access to the system's technical specifications and documentation.\n3.  **Instructions:**\n    *   Identify all the major components of the system (e.g., databases, servers, APIs, user interfaces).\n    *   Describe the functionality of each component in detail.\n    *   Explain how data flows between the different components.\n    *   Specify the technologies and protocols used in the system.\n    *   Document any relevant design patterns or architectural principles applied.\n    *   Consider security implications and how they are addressed.\n4.  **Output:** A detailed textual description of the system architecture, including:\n    *   A list of all major components and their functionalities.\n    *   A description of the data flow between components.\n    *   Information on the technologies and protocols used.\n    *   A summary of security considerations.\n5.  **Constraints:** The description should be technically accurate and comprehensive. Avoid jargon where possible, and provide clear explanations for technical terms. The description should be structured logically and easy to follow.\n\n**Workflow:**\n\n1.  Kodax (Engineer) generates the initial textual description of the system architecture.\n2.  Kodax provides this description to Aurora (Designer).\n3.  Aurora creates the visual representation based on Kodax's description.\n4.  Aurora and Kodax review each other's work to ensure consistency and accuracy.\n5.  Aurora and Kodax refine their respective outputs based on feedback.\n\n**Refinement Considerations:**\n\n*   **Clarity:** Ensure that both Aurora and Kodax understand their objectives and instructions clearly.\n*   **Specificity:** Provide specific guidance on the expected output format and content.\n*   **Collaboration:** Emphasize the importance of communication and collaboration between Aurora and Kodax.\n*   **Iteration:** Encourage iterative refinement based on feedback.\n"
}

---

Artifact from step_1_Lyra_result.txt:
{
  "target_agent_name": "Aurora (Designer)",
  "new_system_prompt": "## System Visualization Task\n\n**Overall Goal:** Create a clear and aesthetically pleasing visual representation of the system architecture.\n\n**Context:** This task involves creating a visual representation of a system based on a textual description provided by the Engineer (Kodax). The visualization should be easily understandable by both technical and non-technical audiences.\n\n**Input:** A detailed textual description of the system's architecture, components, functionalities, and data flow from Kodax (Engineer).\n\n**Instructions:**\n\n1.  **Analysis:** Carefully review the system description provided by Kodax. Identify the key components, their relationships, and the data flow between them. Pay close attention to the core functionalities of each component.\n\n2.  **Visual Format Selection:** Choose the most appropriate visual format to represent the system architecture. Consider the following options, but feel free to propose alternatives if they better suit the system's complexity:\n    *   **Block Diagram:** Suitable for representing high-level components and their interactions.\n    *   **UML Diagram (e.g., Component Diagram, Deployment Diagram):** Useful for depicting software components, interfaces, and dependencies in more detail.\n    *   **Flowchart:** Best for illustrating the flow of data or control within the system.\n    *   **Custom Diagram:** A unique visual representation tailored to the specific system characteristics. Justify your choice.\n\n3.  **Visual Representation Creation:**\n    *   Use clear and concise labels for all components and connections.\n    *   Employ visual cues (e.g., color-coding, icons, arrows) to enhance understanding.\n    *   Prioritize clarity and avoid overwhelming the viewer with excessive detail. Focus on the essential elements.\n    *   Illustrate the direction of data flow using arrows or other appropriate visual indicators.\n    *   Consider the overall layout and ensure a balanced and visually appealing design.\n\n4.  **Annotation and Explanation:** Include a brief descriptive legend or annotation to explain the different visual elements used in the diagram. This will help viewers quickly understand the diagram's conventions.\n\n5.  **Iteration and Refinement:** Be prepared to iterate on your design based on feedback from Kodax and other stakeholders. Focus on improving clarity, accuracy, and visual appeal.\n\n**Output:** A high-quality visual representation of the system architecture in a common image format (e.g., PNG, JPG, SVG). The image should be accompanied by a brief description explaining the diagram's key elements and conventions.\n\n**Constraints:**\n\n*   The diagram should be easily understandable by both technical and non-technical audiences.\n*   Avoid excessive detail and focus on the overall system architecture.\n*   Use a consistent visual style throughout the diagram.\n*   Ensure that all labels are legible and accurate.\n*   Consider accessibility guidelines (e.g., color contrast) to ensure the diagram is usable by people with visual impairments.\n\n**Aesthetic Considerations:**\n\n*   Use a clean and modern visual style.\n*   Choose a color palette that is both visually appealing and informative.\n*   Pay attention to typography and ensure that all text is legible.\n*   Consider using visual metaphors to enhance understanding.\n"
}

---

Artifact from step_2_Aurora_result.txt:
{
  "design_process": [
    {
      "step": 1,
      "action": "Analyze the system description from Kodax (Engineer).",
      "details": "Identify key components, relationships, and data flow. Focus on core functionalities."
    },
    {
      "step": 2,
      "action": "Select the most appropriate visual format.",
      "details": "Considering Block Diagram, UML Diagram (Component, Deployment), Flowchart, or a custom diagram. I will likely start with a block diagram for a high-level overview."
    },
    {
      "step": 3,
      "action": "Create the visual representation.",
      "details": "Use clear labels, visual cues (color-coding, icons, arrows), and prioritize clarity. Illustrate data flow with arrows. Ensure a balanced and visually appealing layout."
    },
    {
      "step": 4,
      "action": "Add annotation and explanation.",
      "details": "Include a legend to explain visual elements and conventions, aiding quick understanding."
    },
    {
      "step": 5,
      "action": "Iterate and refine based on feedback.",
      "details": "Improve clarity, accuracy, and visual appeal based on feedback from Kodax and stakeholders."
    },
    {
      "step": 6,
      "action": "Address accessibility guidelines.",
      "details": "Consider color contrast and ensure usability for people with visual impairments. Use appropriate font sizes and alternative text for screen readers."
    }
  ],
  "system_overview_design": {
    "diagram_type": "Block Diagram",
    "color_palette": {
      "primary": "#3498db",
      "secondary": "#e74c3c",
      "accent": "#f39c12",
      "background": "#ecf0f1",
      "text": "#2c3e50"
    },
    "typography": {
      "font_family": "Arial, sans-serif",
      "heading_size": "24px",
      "body_size": "16px",
      "label_size": "14px"
    },
    "components": [
      {
        "name": "User Interface",
        "description": "The interface through which users interact with the system.",
        "color": "#3498db",
        "icon": "user",
        "data_flow": "Bidirectional"
      },
      {
        "name": "API Gateway",
        "description": "Entry point for all API requests.",
        "color": "#e74c3c",
        "icon": "gateway",
        "data_flow": "Bidirectional"
      },
      {
        "name": "Task Management Service",
        "description": "Handles task creation, assignment, and tracking.",
        "color": "#f39c12",
        "icon": "tasks",
        "data_flow": "Bidirectional"
      },
      {
        "name": "Database",
        "description": "Stores task data and user information.",
        "color": "#95a5a6",
        "icon": "database",
        "data_flow": "Bidirectional"
      },
      {
        "name": "Notification Service",
        "description": "Sends notifications to users about task updates.",
        "color": "#2ecc71",
        "icon": "notification",
        "data_flow": "Unidirectional"
      }
    ],
    "ui_flow": [
      {
        "step": 1,
        "description": "User interacts with the User Interface to create, update, or view tasks.",
        "component": "User Interface"
      },
      {
        "step": 2,
        "description": "The User Interface sends requests to the API Gateway.",
        "component": "API Gateway"
      },
      {
        "step": 3,
        "description": "The API Gateway routes requests to the Task Management Service.",
        "component": "Task Management Service"
      },
      {
        "step": 4,
        "description": "The Task Management Service interacts with the Database to store and retrieve task data.",
        "component": "Database"
      },
      {
        "step": 5,
        "description": "The Notification Service sends notifications to users about task updates.",
        "component": "Notification Service"
      }
    ],
    "accessibility_notes": "Ensured sufficient color contrast between text and background. Used clear and legible font. Diagram includes alternative text for screen readers. Components are labeled clearly and concisely."
  },
  "visual_description": "The system overview is represented as a block diagram. Each component (User Interface, API Gateway, Task Management Service, Database, Notification Service) is depicted as a rectangular block with a distinct color and icon. Arrows indicate the direction of data flow between components. The diagram is designed with a clean and modern aesthetic, prioritizing clarity and ease of understanding. Color-coding is used to differentiate components and highlight their roles within the system. The overall layout is balanced and visually appealing, ensuring that the diagram is accessible to both technical and non-technical audiences. A legend explains the meaning of different visual elements, such as the color scheme and icons.",
  "image_prompt": "A block diagram representing a task management system. Show the following components as rectangular blocks with rounded corners: User Interface (blue), API Gateway (red), Task Management Service (orange), Database (gray), and Notification Service (green). Use icons within each block to represent the component (e.g., a user icon for User Interface, a gateway icon for API Gateway, a tasks icon for Task Management Service, a database icon for Database, and a notification icon for Notification Service). Connect the blocks with arrows to show the data flow. Use a clean and modern aesthetic with a light background. Add a legend explaining the color scheme and icons. Ensure the diagram is accessible by using sufficient color contrast and clear labels."
}

---

Artifact from step_3_Lyra_result.txt:
{
  "target_agent_name": "Aurora (Designer)",
  "new_system_prompt": "## System Visualization Task\n\n**Overall Goal:** Create a clear, aesthetically pleasing, and accessible visual representation of the system architecture.\n\n**Context:** This task involves creating a visual representation of a system based on a textual description provided by the Engineer (Kodax). The visualization should be easily understandable by both technical and non-technical audiences and adhere to accessibility guidelines.\n\n**Input:** A detailed textual description of the system's architecture, components, functionalities, and data flow from Kodax (Engineer).\n\n**Instructions:**\n\n1.  **Analysis and Component Prioritization:** Carefully review the system description provided by Kodax. Identify the key components, their relationships, and the data flow between them. Prioritize components based on their importance to the overall system function. Note any specific requirements or constraints mentioned by Kodax.\n\n2.  **Visual Format Selection and Justification:** Choose the most appropriate visual format to represent the system architecture. Consider the following options, but feel free to propose alternatives if they better suit the system's complexity. Provide a brief justification for your choice, explaining why it's the best format for representing this specific system.\n    *   **Block Diagram:** Suitable for representing high-level components and their interactions.\n    *   **UML Diagram (e.g., Component Diagram, Deployment Diagram):** Useful for depicting software components, interfaces, and dependencies in more detail.\n    *   **Flowchart:** Best for illustrating the flow of data or control within the system.\n    *   **Custom Diagram:** A unique visual representation tailored to the specific system characteristics. Justify your choice.\n\n3.  **Visual Representation Creation:**\n    *   Use clear and concise labels for all components and connections. Ensure labels are easily readable.\n    *   Employ visual cues (e.g., color-coding, icons, arrows) to enhance understanding. Maintain consistency in the use of visual cues.\n    *   Prioritize clarity and avoid overwhelming the viewer with excessive detail. Focus on the essential elements and their relationships.\n    *   Illustrate the direction of data flow using arrows or other appropriate visual indicators. Clearly indicate the type of data being transferred, if possible.\n    *   Consider the overall layout and ensure a balanced and visually appealing design. Aim for a logical flow that guides the viewer's eye.\n\n4.  **Annotation and Explanation:** Include a descriptive legend or annotation to explain the different visual elements used in the diagram. This will help viewers quickly understand the diagram's conventions and the meaning of different visual elements. Provide context for any abbreviations or acronyms used.\n\n5.  **Accessibility Compliance:** Ensure the diagram adheres to accessibility guidelines, such as WCAG. Specifically:\n    *   Use sufficient color contrast between text and background.\n    *   Provide alternative text descriptions for all visual elements (images, icons, etc.).\n    *   Use a legible font size and style.\n    *   Consider the needs of users with color blindness.\n\n6.  **Iteration and Refinement:** Be prepared to iterate on your design based on feedback from Kodax and other stakeholders. Focus on improving clarity, accuracy, visual appeal, and accessibility. Document the changes made during each iteration.\n\n**Output:** A high-quality, accessible visual representation of the system architecture in a common image format (e.g., PNG, JPG, SVG). The image should be accompanied by:\n    * A brief description explaining the diagram's key elements and conventions.\n    * A list of the accessibility considerations that were implemented.\n    * A justification for the chosen visual format.\n\n**Constraints:**\n\n*   The diagram should be easily understandable by both technical and non-technical audiences.\n*   Avoid excessive detail and focus on the overall system architecture.\n*   Use a consistent visual style throughout the diagram.\n*   Ensure that all labels are legible and accurate.\n*   Adhere to accessibility guidelines (e.g., WCAG) to ensure the diagram is usable by people with visual impairments.\n\n**Aesthetic Considerations:**\n\n*   Use a clean and modern visual style.\n*   Choose a color palette that is both visually appealing and informative. Consider using color to represent different categories of components or data.\n*   Pay attention to typography and ensure that all text is legible.\n*   Consider using visual metaphors to enhance understanding, but avoid metaphors that are culturally specific or potentially confusing.\n"
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
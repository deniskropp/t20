{
  "api_contract": {
    "title": "AI Frontend API Contract",
    "description": "Defines the JSON schemas for requests and responses between the frontend and the AI backend, supporting core AI interactions and history management. Authentication for all endpoints requiring user context is expected via a Bearer Token (API Key or Session Token) in the Authorization header.",
    "version": "1.0.0",
    "base_url": "/api/v1",
    "endpoints": [
      {
        "name": "Generate AI Output",
        "path": "/generate",
        "method": "POST",
        "description": "Submits user input and parameters to the AI backend to generate new content.",
        "request_schema": {
          "type": "object",
          "properties": {
            "prompt": {
              "type": "string",
              "description": "The main user input or query for the AI model.",
              "minLength": 1
            },
            "model_id": {
              "type": "string",
              "description": "Identifier for the specific AI model to be used (e.g., 'text-generation-v3', 'image-gen-v2', 'chatbot-v1').",
              "pattern": "^[a-zA-Z0-9_-]+$"
            },
            "input_type": {
              "type": "string",
              "description": "Specifies the type of input provided. If 'image_url', 'audio_url', or 'document_url', the 'prompt' field should contain the respective URL/reference.",
              "enum": ["text", "image_url", "audio_url", "document_url"],
              "default": "text"
            },
            "parameters": {
              "type": "object",
              "description": "Optional parameters to fine-tune the AI's behavior, specific to the chosen model. This object allows for any additional properties (e.g., 'temperature', 'max_tokens', 'image_size').",
              "properties": {
                "temperature": {
                  "type": "number",
                  "description": "Controls randomness; higher values mean more random outputs (typically for text models).",
                  "minimum": 0,
                  "maximum": 2
                },
                "max_tokens": {
                  "type": "integer",
                  "description": "Maximum number of tokens/words to generate (typically for text models).",
                  "minimum": 1
                },
                "image_size": {
                  "type": "string",
                  "description": "Desired output image resolution (e.g., '512x512', '1024x1024') (typically for image models).",
                  "enum": ["256x256", "512x512", "1024x1024"]
                },
                "num_outputs": {
                  "type": "integer",
                  "description": "Number of distinct outputs to generate (e.g., multiple text variations, multiple images).",
                  "minimum": 1,
                  "maximum": 5,
                  "default": 1
                }
              },
              "additionalProperties": true
            },
            "user_context": {
              "type": "object",
              "description": "Contextual information about the user or session for personalization and history. The 'user_id' is typically derived from the authentication token.",
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "Unique identifier for the authenticated user."
                },
                "session_id": {
                  "type": "string",
                  "description": "Unique identifier for the current session, useful for conversational AI context.",
                  "nullable": true
                }
              },
              "required": ["user_id"]
            }
          },
          "required": ["prompt", "model_id", "user_context"],
          "additionalProperties": false
        },
        "response_schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the API call.",
              "enum": ["success", "error"]
            },
            "data": {
              "type": "object",
              "description": "Contains the generated AI output and associated metadata, if successful.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for this specific AI generation, for history tracking."
                },
                "output_type": {
                  "type": "string",
                  "description": "The format/type of the generated content.",
                  "enum": ["text", "image_url", "json_data", "audio_url"]
                },
                "content": {
                  "type": "string",
                  "description": "The AI-generated content. Can be plain text, a URL to a generated image/audio, or a JSON string for structured data."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional information about the generation.",
                  "properties": {
                    "model_used": {
                      "type": "string",
                      "description": "The exact AI model version used for this generation."
                    },
                    "tokens_processed": {
                      "type": "integer",
                      "description": "Number of tokens processed by the AI (input + output)."
                    },
                    "processing_time_ms": {
                      "type": "integer",
                      "description": "Time taken by the AI backend to process the request in milliseconds."
                    },
                    "cost_estimate": {
                      "type": "number",
                      "description": "Estimated cost of the generation, if applicable.",
                      "minimum": 0
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "ISO 8601 timestamp of when the generation was completed."
                    }
                  },
                  "required": ["model_used", "timestamp"],
                  "additionalProperties": true
                }
              },
              "required": ["id", "output_type", "content", "metadata"]
            },
            "error": {
              "type": "object",
              "description": "Error details, if the status is 'error'.",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "A specific error code (e.g., 'INVALID_PROMPT', 'MODEL_UNAVAILABLE', 'RATE_LIMIT_EXCEEDED', 'AUTHENTICATION_FAILED')."
                },
                "message": {
                  "type": "string",
                  "description": "A human-readable error message."
                },
                "details": {
                  "type": "string",
                  "description": "Optional, more detailed error information for debugging.",
                  "nullable": true
                }
              },
              "required": ["code", "message"]
            }
          },
          "required": ["status"],
          "oneOf": [
            {
              "required": ["data"],
              "properties": {
                "status": {
                  "const": "success"
                }
              }
            },
            {
              "required": ["error"],
              "properties": {
                "status": {
                  "const": "error"
                }
              }
            }
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "Get Interaction History",
        "path": "/history",
        "method": "GET",
        "description": "Retrieves a paginated list of past AI interactions for a given user. Filters are applied as query parameters.",
        "request_schema": {
          "type": "object",
          "description": "Query parameters for filtering and pagination. 'user_id' is implicitly derived from the authentication token.",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The unique identifier of the user whose history is requested (derived from auth token).",
              "readOnly": true
            },
            "limit": {
              "type": "integer",
              "description": "Maximum number of history items to return per page.",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "offset": {
              "type": "integer",
              "description": "Number of history items to skip (for pagination).",
              "minimum": 0,
              "default": 0
            },
            "model_id": {
              "type": "string",
              "description": "Optional: Filter history by a specific AI model ID.",
              "nullable": true
            },
            "output_type": {
              "type": "string",
              "description": "Optional: Filter history by a specific output type.",
              "enum": ["text", "image_url", "json_data", "audio_url", "all"],
              "default": "all"
            }
          },
          "required": ["user_id"],
          "additionalProperties": false
        },
        "response_schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": ["success", "error"]
            },
            "data": {
              "type": "array",
              "description": "List of historical AI interactions.",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "Unique identifier for the interaction."
                  },
                  "prompt_snippet": {
                    "type": "string",
                    "description": "A truncated version of the original prompt for display."
                  },
                  "output_snippet": {
                    "type": "string",
                    "description": "A truncated version or thumbnail URL of the output."
                  },
                  "timestamp": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp of the interaction."
                  },
                  "model_used": {
                    "type": "string",
                    "description": "The AI model used for this interaction."
                  },
                  "output_type": {
                    "type": "string",
                    "description": "The type of output generated.",
                    "enum": ["text", "image_url", "json_data", "audio_url"]
                  }
                },
                "required": ["id", "prompt_snippet", "output_snippet", "timestamp", "model_used", "output_type"]
              }
            },
            "total_count": {
              "type": "integer",
              "description": "Total number of history items matching the criteria (across all pages)."
            },
            "limit": {
              "type": "integer",
              "description": "The limit applied to this request."
            },
            "offset": {
              "type": "integer",
              "description": "The offset applied to this request."
            },
            "error": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": ["code", "message"]
            }
          },
          "required": ["status"],
          "oneOf": [
            {
              "required": ["data", "total_count", "limit", "offset"],
              "properties": {
                "status": {
                  "const": "success"
                }
              }
            },
            {
              "required": ["error"],
              "properties": {
                "status": {
                  "const": "error"
                }
              }
            }
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "Get Single Interaction Detail",
        "path": "/history/{id}",
        "method": "GET",
        "description": "Retrieves the full details of a specific past AI interaction. The 'id' is a path parameter.",
        "path_parameters": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the specific interaction to retrieve."
          }
        },
        "request_schema": {
          "type": "object",
          "description": "No body for GET request. 'user_id' for ownership verification is derived from the authentication token.",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The unique identifier of the user (derived from authentication token) to verify ownership.",
              "readOnly": true
            }
          },
          "required": ["user_id"]
        },
        "response_schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": ["success", "error"]
            },
            "data": {
              "type": "object",
              "description": "Full details of the requested AI interaction.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the interaction."
                },
                "original_prompt": {
                  "type": "string",
                  "description": "The full original prompt submitted by the user."
                },
                "input_type": {
                  "type": "string",
                  "description": "Type of input provided for this interaction.",
                  "enum": ["text", "image_url", "audio_url", "document_url"]
                },
                "parameters_used": {
                  "type": "object",
                  "description": "The full set of parameters used for this generation."
                },
                "output_type": {
                  "type": "string",
                  "description": "The format/type of the generated content.",
                  "enum": ["text", "image_url", "json_data", "audio_url"]
                },
                "generated_content": {
                  "type": "string",
                  "description": "The full AI-generated content."
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "ISO 8601 timestamp of the interaction."
                },
                "model_used": {
                  "type": "string",
                  "description": "The exact AI model version used."
                },
                "metadata": {
                  "type": "object",
                  "description": "Additional metadata from the generation."
                }
              },
              "required": ["id", "original_prompt", "input_type", "parameters_used", "output_type", "generated_content", "timestamp", "model_used"]
            },
            "error": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": ["code", "message"]
            }
          },
          "required": ["status"],
          "oneOf": [
            {
              "required": ["data"],
              "properties": {
                "status": {
                  "const": "success"
                }
              }
            },
            {
              "required": ["error"],
              "properties": {
                "status": {
                  "const": "error"
                }
              }
            }
          ],
          "additionalProperties": false
        }
      },
      {
        "name": "Delete Interaction History Item",
        "path": "/history/{id}",
        "method": "DELETE",
        "description": "Deletes a specific past AI interaction from the user's history. The 'id' is a path parameter.",
        "path_parameters": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the specific interaction to delete."
          }
        },
        "request_schema": {
          "type": "object",
          "description": "No body for DELETE request. 'user_id' for ownership verification is derived from the authentication token.",
          "properties": {
            "user_id": {
              "type": "string",
              "description": "The unique identifier of the user (derived from authentication token) to verify ownership.",
              "readOnly": true
            }
          },
          "required": ["user_id"]
        },
        "response_schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": ["success", "error"]
            },
            "message": {
              "type": "string",
              "description": "Confirmation message upon successful deletion."
            },
            "error": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": ["code", "message"]
            }
          },
          "required": ["status"],
          "oneOf": [
            {
              "required": ["message"],
              "properties": {
                "status": {
                  "const": "success"
                }
              }
            },
            {
              "required": ["error"],
              "properties": {
                "status": {
                  "const": "error"
                }
              }
            }
          ],
          "additionalProperties": false
        }
      }
    ]
  }
}
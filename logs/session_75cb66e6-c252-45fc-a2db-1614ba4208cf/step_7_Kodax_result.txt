{
  "task": "Integrate the frontend components with the AI backend using the API contract defined by Lyra. Implement the logic for sending user input and displaying AI responses.",
  "engineer_plan": [
    {
      "step": 1,
      "description": "Set up API service and configuration.",
      "details": "Create/update `src/services/apiService.ts` to include functions for interacting with the AI backend endpoints defined in Lyra's API contract. Configure `axios` for base URL, common headers (e.g., content type), and potentially interceptors for authentication or error handling.",
      "files_to_modify": [
        "src/services/apiService.ts"
      ],
      "dependencies": [
        "axios"
      ]
    },
    {
      "step": 2,
      "description": "Implement state management for AI interaction.",
      "details": "In `MainAIWorkspacePage.tsx`, manage component state for user input (prompt), selected parameters, AI response content, and loading/error states. Use React's `useState` hook for this.",
      "files_to_modify": [
        "src/pages/MainAIWorkspacePage.tsx"
      ]
    },
    {
      "step": 3,
      "description": "Connect user input to AI request.",
      "details": "Wire up the `TextArea` and any parameter controls (e.g., sliders, dropdowns) to update the component's state. Implement the `onClick` handler for the 'Generate' button to trigger the API call.",
      "files_to_modify": [
        "src/pages/MainAIWorkspacePage.tsx",
        "src/components/common/TextArea.tsx",
        "src/components/ui/ParameterSlider.tsx",
        "src/components/ui/ParameterDropdown.tsx"
      ]
    },
    {
      "step": 4,
      "description": "Implement AI API call logic.",
      "details": "In the 'Generate' button's `onClick` handler, construct the request payload according to Lyra's `/generate` endpoint schema. Use the `apiService` to send the POST request. Update component state with loading status, then handle the response (success or error).",
      "files_to_modify": [
        "src/pages/MainAIWorkspacePage.tsx",
        "src/services/apiService.ts"
      ],
      "hooks_to_use": [
        "useState",
        "useCallback"
      ]
    },
    {
      "step": 5,
      "description": "Display AI responses and handle loading/error states.",
      "details": "Conditionally render the AI output (`content`) in the output display area based on the response data. Show the `LoadingSpinner` when the `isLoading` state is true. Display error messages using the `notification_error` color from the design system when an error occurs.",
      "files_to_modify": [
        "src/pages/MainAIWorkspacePage.tsx",
        "src/components/common/LoadingSpinner.tsx"
      ]
    },
    {
      "step": 6,
      "description": "Implement 'Save' and 'Copy' functionality for AI output.",
      "details": "Add `onClick` handlers to 'Save' and 'Copy' buttons within the output display. 'Save' should trigger a call to the history endpoint (or a local save mechanism if backend history is not yet implemented). 'Copy' should copy the generated content to the clipboard.",
      "files_to_modify": [
        "src/pages/MainAIWorkspacePage.tsx"
      ],
      "components_to_update": [
        "src/components/common/Button.tsx",
        "src/components/common/Icon.tsx"
      ]
    },
    {
      "step": 7,
      "description": "Integrate History page with API.",
      "details": "In `HistoryPage.tsx`, use the `apiService` to fetch the user's interaction history via the `/history` GET endpoint. Implement pagination if necessary. Map the fetched data to `HistoryItem` components.",
      "files_to_modify": [
        "src/pages/HistoryPage.tsx",
        "src/services/apiService.ts"
      ],
      "hooks_to_use": [
        "useEffect",
        "useState"
      ]
    },
    {
      "step": 8,
      "description": "Implement navigation to view/re-run history items.",
      "details": "Add functionality to `HistoryItem.tsx` and `HistoryPage.tsx` so that clicking a history item can either navigate back to the `MainAIWorkspacePage` with the prompt and parameters pre-filled, or trigger a re-generation directly.",
      "files_to_modify": [
        "src/pages/HistoryPage.tsx",
        "src/components/ui/HistoryItem.tsx",
        "src/pages/MainAIWorkspacePage.tsx"
      ],
      "navigation_library": "react-router-dom"
    },
    {
      "step": 9,
      "description": "Add placeholder for 'model_id' selection and parameter mapping.",
      "details": "If multiple AI models are supported, add a mechanism (e.g., a dropdown) in `MainAIWorkspacePage.tsx` to select `model_id`. Ensure that the `parameters` object sent in the API request correctly maps to the selected model's expected parameters.",
      "files_to_modify": [
        "src/pages/MainAIWorkspacePage.tsx",
        "src/components/ui/ParameterDropdown.tsx"
      ],
      "api_contract_reference": "Lyra's API Contract (Generate endpoint)"
    },
    {
      "step": 10,
      "description": "Commit integration changes.",
      "details": "Commit the integrated code, ensuring that user input can be sent to the AI backend and responses are displayed.",
      "command": "git add . && git commit -m 'feat: Integrate frontend with AI backend API, implement response display and history fetching'"
    }
  ]
}
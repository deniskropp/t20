"""Type definitions for the runtime."""

from dataclasses import dataclass, field
from typing import Any, Dict, List, Optional, TypedDict
from pydantic import BaseModel, Field

# This file will contain common type definitions used across the runtime.
# This helps in avoiding circular dependencies and provides a single source of truth for complex types.

# Example of a type that might be moved here from core.py or orchestrator.py
# if it becomes a common dependency for multiple modules.

# For now, this file is a placeholder for future type definitions.
# As the project grows, complex types that are used in multiple places
# should be defined here to improve modularity and prevent circular imports.

class Role(BaseModel):
    title: str = Field(..., description="The official title of the role")
    description: str = Field(..., description="The description of the role")

class Task(BaseModel):
    task_id: str = Field(..., description="A unique identifier for the task")
    task: str = Field(..., description="The description of the specific task to be performed")
    role: str = Field(..., description="The official title of the role responsible for the task")
    name: str = Field(..., description="The team member name responsible for the task")
    requires: List[str] = Field(..., description="List of tasks (ids) this task requires (artifacts)")
    #deps: List[str] = Field(..., description="List of tasks this task depends on (artifacts)")

class Plan(BaseModel):
    reasoning: str = Field(..., description="The reasoning behind the plan's structure and task ordering")
    roles: List[Role] = Field(..., description="List of roles involved in the plan")
    tasks: List[Task] = Field(..., description="List of tasks to be performed in order")

class Artifact(BaseModel):
    name: str = Field(..., description="The name of the artifact")
    content: str = Field(..., description="The content of the artifact")

class AgentOutput(BaseModel):
    """Represents the structured output expected from an agent's execution."""
    output: str = Field(..., description="The primary output or result of the agent's task.")
    files: List[Artifact] = Field(..., description="A list of files/artifacts generated by the agent.")
    # You can add more fields here as needed for structured agent outputs, e.g.:
    # thoughts: Optional[str] = Field(None, description="The agent's thoughts during execution.")
    # next_steps: Optional[List[str]] = Field(None, description="Suggested next steps based on the output.")
    # artifacts_created: Optional[List[str]] = Field(None, description="Names of artifacts created by this agent.")

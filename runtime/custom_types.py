"""This module defines custom data types and Pydantic models for the runtime.

It ensures data consistency and validation across different modules by providing
centralized, well-defined data structures for plans, tasks, and agent outputs.
"""

from typing import List, Optional
from pydantic import BaseModel, Field

import logging
logger = logging.getLogger(__name__)


class Task(BaseModel):
    """Represents a single, actionable task in a plan."""
    task_id: str = Field(..., description="A unique identifier for the task.")
    desc: str = Field(..., description="A detailed description of the task to be performed.")
    role: str = Field(..., description="The title of the role responsible for this task.")
    name: str = Field(..., description="The name of the team member assigned to this task.")
    requires: List[str] = Field(
        ...,
        description="A list of task IDs that must be completed before this task can start."
    )


class File(BaseModel):
    name: str = Field(..., description="The name of the file (e.g., path/to/file.txt).")
    content: str = Field(..., description="The content of the file.")


class Artifact(BaseModel):
    task_id: str = Field(..., description="The task associated with the files.")
    files: Optional[List[File]] = Field(..., description="A list of all files associated with the task.")

#    def __init__(self, task_id: str, files: List[str]):
#        self.task_id = task_id
#        self.files = self.load_files_into_context(files, [])

def load_files_into_context(files: List[str]) -> List[File]:
    logger.info("Files provided:")
    for file_path in files:
        try:
            with open(file_path, 'r') as file_handle:
                content = file_handle.read()
                file_contents.append(tuple(f"///context/file:{file_path}", content))
                logger.info(f"  - {file_path}")
        except Exception as e:
            logger.error(f"Error reading file {file_path}: {e}")


class Role(BaseModel):
    """Defines a role within the team, including its title and description."""
    title: str = Field(..., description="The official title of the role.")
    description: str = Field(..., description="A clear and concise description of the role's responsibilities.")

class Plan(BaseModel):
    """Outlines the overall strategy, including roles, tasks, and reasoning."""
    reasoning: str = Field(..., description="The rationale behind the plan's structure and task sequence.")
    roles: List[Role] = Field(..., description="A list of roles involved in executing the plan.")
    tasks: List[Task] = Field(..., description="An ordered list of tasks to be performed.")

class Prompt(BaseModel):
    """Represents a prompt to be sent to an agent."""
    name: str = Field(..., description="The name of the agent the prompt is intended for.")
    role: str = Field(..., description="The role of the agent this prompt is for.")
    content: str = Field(..., description="The full content of the prompt.")

class Team(BaseModel):
    prompts: List[Prompt] = Field(..., description="The system prompt for each agent.")
    notes: Optional[str] = Field(..., description="Notes associated with the team.")

class AgentOutput(BaseModel):
    """Represents the structured output expected from an agent's execution."""
    output: str = Field(..., description="The primary output or result of the agent's task.")
    artifact: Artifact = Field(..., description="A list of files or artifacts generated by the agent.")
    team: Team = Field(..., description="The team being informed by an agent.")
    reasoning: Optional[str] = Field(..., description="The reasoning behind the agent's task.")

    # Optional fields for more detailed structured output:
    # thoughts: Optional[str] = Field(None, description="The agent's inner monologue or detailed thoughts during execution.")
    # next_steps: Optional[List[str]] = Field(None, description="A list of suggested next steps based on the output.")

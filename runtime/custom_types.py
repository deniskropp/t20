"""This module defines custom data types and Pydantic models for the runtime.

It ensures data consistency and validation across different modules by providing
centralized, well-defined data structures for plans, tasks, and agent outputs.
"""

from typing import List, Optional
from pydantic import BaseModel, Field

class Task(BaseModel):
    """A single actionable step in a plan."""
    id: str = Field(..., description="Unique ID for the task (e.g., 'T1', 'T2').")
    description: str = Field(..., description="Detailed description of what to do for this task.")
    role: str = Field(..., description="The role responsible for this task.")
    agent: str = Field(..., description="The agent assigned to this task.")
    requires: List[str] = Field(..., description="List of requirements (IDs, e.g. ['T1', 'T2']), one-level. Explicitly mention any further dependencies.")


class File(BaseModel):
    """Represents a generated file."""
    path: str = Field(..., description="File path or name (e.g., 'src/main.py').")
    content: str = Field(..., description="Full content of the file.")


class Artifact(BaseModel):
    """Output artifact generated by a task."""
    task: str = Field(..., description="ID of the task that produced this artifact (e.g., 'T1').")
    files: List[File] = Field(..., description="List of files created or modified by the task.")


class Role(BaseModel):
    """Definition of a role in the team."""
    title: str = Field(..., description="Title of the role (e.g., 'Engineer', 'Reviewer').")
    purpose: str = Field(..., description="The main purpose and goal of this role.")


class Prompt(BaseModel):
    """System prompt assigned to an agent."""
    agent: str = Field(..., description="Name of the agent this prompt is for. Must match exactly an existing agent.")
    role: str = Field(..., description="Role context of the agent.")
    system_prompt: str = Field(..., description="Full text of the system prompt for this agent.")


class Team(BaseModel):
    """Metadata and coordination for the team."""
    notes: str = Field(..., description="General notes or feedback about the team's performance or the plan.")
    prompts: List[Prompt] = Field(default_factory=list, description="A list of new or updated system prompts for any agent in the team.")


class Plan(BaseModel):
    """Overall strategy with reasoning, roles, and tasks."""
    high_level_goal: str = Field(..., description="The main goal this plan is designed to achieve.")
    reasoning: str = Field(..., description="A brief explanation of the plan's structure and strategy.")
    roles: List[Role] = Field(..., description="List of all roles required to execute the plan.")
    tasks: List[Task] = Field(..., description="A step-by-step sequence of tasks to be executed in order.")
    team: Optional[Team] = Field(default=None, description="Updates to team configuration or system prompts.")


class AgentOutput(BaseModel):
    """Structured output returned by an agent after executing a task."""
    output: str = Field(..., description="A summary of the work done. Do not include file contents here; use the 'artifact' field instead.")
    artifact: Optional[Artifact] = Field(default=None, description="Any files created or modified by the agent during the task.")
    team: Optional[Team] = Field(default=None, description="Updates to team configuration or system prompts.")
    reasoning: Optional[str] = Field(default=None, description="Explanation of how the agent arrived at this output.")



if __name__ == "__main__":
    import json
    print(json.dumps(AgentOutput.model_json_schema(), indent=4))

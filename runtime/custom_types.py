"""This module defines custom data types and Pydantic models for the runtime.

It ensures data consistency and validation across different modules by providing
centralized, well-defined data structures for plans, tasks, and agent outputs.
"""

from typing import List, Optional
from pydantic import BaseModel, Field

class Task(BaseModel):
    """A single actionable step in a plan."""
    id: str = Field(..., description="Unique identifier for the task (e.g., 'task_1').")
    description: str = Field(..., description="What the task is and how to execute it.")
    role: str = Field(..., description="Role responsible for performing this task.")
    agent: str = Field(..., description="Specific agent assigned to this task.")
    requires: List[str] = Field(default_factory=list, description="List of prerequisite task IDs.")


class File(BaseModel):
    """Represents a generated file."""
    path: str = Field(..., description="File path or name (e.g., 'src/main.py').")
    content: str = Field(..., description="Full content of the file.")


class Artifact(BaseModel):
    """Output artifact generated by a task."""
    task: str = Field(..., description="ID of the task that produced this artifact.")
    files: List[File] = Field(default_factory=list, description="Files included in the artifact.")


class Role(BaseModel):
    """Definition of a role in the team."""
    title: str = Field(..., description="Role title (e.g., 'Engineer', 'Reviewer').")
    purpose: str = Field(..., description="High-level responsibilities and objectives of this role.")


class Plan(BaseModel):
    """Overall strategy with reasoning, roles, and tasks."""
    high_level_goal: str = Field(..., description="The overarching objective this plan aims to accomplish.")
    reasoning: str = Field(..., description="Why this plan is structured this way.")
    roles: List[Role] = Field(default_factory=list, description="All roles needed for execution.")
    tasks: List[Task] = Field(default_factory=list, description="Step-by-step ordered tasks.")


class Prompt(BaseModel):
    """System prompt assigned to an agent."""
    agent: str = Field(..., description="Name of the agent this prompt is for. Must match exactly an existing agent.")
    role: str = Field(..., description="Role context of the agent.")
    system_prompt: str = Field(..., description="Full text of the system prompt for this agent.")


class Team(BaseModel):
    """Metadata and coordination for the team."""
    notes: str = Field(..., description="General notes, reflections, or feedback about the team or process.")
    prompts: List[Prompt] = Field(default_factory=list, description="Updated system prompts for agents.")


class AgentOutput(BaseModel):
    """Structured output returned by an agent after executing a task."""
    output: str = Field(..., description="Message from the agent, accompanied by artifact (or files).")
    artifact: Optional[Artifact] = Field(default=None, description="Generated artifact, if applicable.")
    team: Optional[Team] = Field(default=None, description="Updates to team configuration or system prompts.")
    reasoning: Optional[str] = Field(default=None, description="Explanation of how the agent arrived at this output.")



if __name__ == "__main__":
    import json
    print(json.dumps(AgentOutput.model_json_schema(), indent=4))

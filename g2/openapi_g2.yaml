openapi: 3.0.0
info:
  title: Multi-Agent Workflow API (G2)
  version: 2.0.0
  description: API for orchestrating multi-agent workflows with real-time streaming, control, and webhook support.
servers:
  - url: /api/v2
paths:
  /start:
    post:
      summary: Initialize the system and create a workflow plan
      operationId: startWorkflowG2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartRequest'
      responses:
        '202':
          description: Plan generated. Returns plan and stream URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartResponseG2'
        '400':
          description: Invalid input for plan generation.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error during plan generation.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /runs/{jobId}:
    post:
      summary: Initiate the execution of a workflow plan
      operationId: initiateRunG2
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
          description: The unique identifier for the workflow run.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunRequest'
      responses:
        '202':
          description: Workflow execution initiated. Returns job ID, status stream URL, and control URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunInitiatedResponseG2'
        '400':
          description: Invalid plan or system state.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '409':
          description: System not initialized. A plan must be created first.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error during workflow initiation.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    get:
      summary: Retrieve the current status and summary results of a workflow execution
      operationId: getRunStatusG2
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
          description: The unique identifier for the workflow run.
      responses:
        '200':
          description: Workflow status and summary results retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStatusResponseG2'
        '404':
          description: Job ID not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error retrieving job status.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /runs/{jobId}/stream:
    get:
      summary: Stream real-time events and detailed step results for a workflow execution
      operationId: streamWorkflowEvents
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
          description: The unique identifier for the workflow run.
      responses:
        '200':
          description: Real-time stream of workflow events.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/WorkflowEvent'
        '404':
          description: Job ID not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error retrieving stream.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /runs/{jobId}/control:
    post:
      summary: Send control commands to a running workflow
      operationId: controlWorkflow
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
          description: The unique identifier for the workflow run.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlCommand'
      responses:
        '204':
          description: Command accepted.
        '400':
          description: Invalid command or workflow state.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '404':
          description: Job ID not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '409':
          description: Cannot perform action (e.g., pausing a completed workflow).
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error processing command.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /webhooks:
    post:
      summary: Register a new webhook subscription
      operationId: registerWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookSubscription'
      responses:
        '201':
          description: Webhook registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  webhookId: { type: string }
        '400':
          description: Invalid webhook subscription data.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error registering webhook.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
    get:
      summary: List registered webhook subscriptions
      operationId: listWebhooks
      responses:
        '200':
          description: List of webhook subscriptions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookSubscription'
        '500':
          description: Internal server error listing webhooks.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /webhooks/{webhookId}:
    delete:
      summary: Unregister a webhook subscription
      operationId: unregisterWebhook
      parameters:
        - name: webhookId
          in: path
          required: true
          schema: { type: string }
          description: The unique identifier for the webhook subscription.
      responses:
        '204':
          description: Webhook unregistered successfully.
        '404':
          description: Webhook ID not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error unregistering webhook.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /history/runs:
    get:
      summary: List historical workflow runs
      operationId: listHistoryRuns
      parameters:
        - name: limit
          in: query
          schema: { type: integer, default: 20 }
        - name: offset
          in: query
          schema: { type: integer, default: 0 }
        - name: status
          in: query
          schema: { type: string, enum: ["pending", "running", "completed", "failed", "paused"] }
        - name: sortBy
          in: query
          schema: { type: string, default: "startTime" }
        - name: sortOrder
          in: query
          schema: { type: string, enum: ["asc", "desc"], default: "desc" }
      responses:
        '200':
          description: Paginated list of historical workflow runs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RunSummary'
        '500':
          description: Internal server error listing history.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /history/runs/{jobId}/state:
    get:
      summary: Retrieve the detailed state of a specific historical workflow run
      operationId: getHistoryRunState
      parameters:
        - name: jobId
          in: path
          required: true
          schema: { type: string }
          description: The unique identifier for the workflow run.
      responses:
        '200':
          description: Detailed state of the historical workflow run.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStateDetail'
        '404':
          description: Job ID not found.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error retrieving run state.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
components:
  schemas:
    StartRequest:
      type: object
      properties:
        high_level_goal:
          type: string
          description: The main goal to achieve.
        files:
          type: array
          description: Input files for the workflow.
          items:
            $ref: '#/components/schemas/File'
        plan_from:
          type: string
          nullable: true
          description: File path to read a pre-existing plan from.
        orchestrator:
          type: string
          default: "Meta-AI"
          description: The orchestrator agent to use.
        model:
          type: string
          default: "gemini-2.5-flash-lite"
          description: The LLM model to use.
      required:
        - high_level_goal
    StartResponseG2:
      type: object
      properties:
        jobId:
          type: string
          description: The unique identifier for this workflow run.
        plan:
          $ref: '#/components/schemas/Plan'
        statusStreamUrl:
          type: string
          format: url
          description: URL for the real-time status stream.
      required:
        - jobId
        - plan
        - statusStreamUrl
    RunRequest:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/Plan'
        rounds:
          type: integer
          default: 1
          description: Number of execution rounds.
        files:
          type: array
          description: Additional files relevant to this specific run.
          items:
            $ref: '#/components/schemas/File'
      required:
        - plan
    RunInitiatedResponseG2:
      type: object
      properties:
        jobId:
          type: string
          description: The unique identifier for the initiated workflow run.
        status:
          type: string
          description: The initial status of the workflow run.
        statusStreamUrl:
          type: string
          format: url
          description: URL for the real-time status stream.
        controlUrl:
          type: string
          format: url
          description: URL to send control commands (pause, resume, cancel).
      required:
        - jobId
        - status
        - statusStreamUrl
        - controlUrl
    RunStatusResponseG2:
      type: object
      properties:
        jobId:
          type: string
        status:
          type: string
          enum: ["pending", "running", "completed", "failed", "paused", "cancelling", "cancelled"]
          description: The current status of the workflow run.
        results:
          type: array
          description: Summary of step results if completed.
          items:
            $ref: '#/components/schemas/StepResultSummary'
        error:
          $ref: '#/components/schemas/ErrorResponse'
          description: Error details if the status is 'failed'.
    StepResultSummary:
      type: object
      properties:
        stepId:
          type: string
        agent:
          type: string
        status:
          type: string
          enum: ["completed", "failed", "skipped"]
        output:
          type: string
          description: A brief summary or the first line of the output.
    WorkflowEvent:
      oneOf:
        - $ref: '#/components/schemas/StepStartedEvent'
        - $ref: '#/components/schemas/AgentOutputReceivedEvent'
        - $ref: '#/components/schemas/StepCompletedEvent'
        - $ref: '#/components/schemas/WorkflowCompletedEvent'
        - $ref: '#/components/schemas/WorkflowFailedEvent'
        - $ref: '#/components/schemas/WorkflowPausedEvent'
        - $ref: '#/components/schemas/WorkflowResumedEvent'
    StepStartedEvent:
      type: object
      properties:
        type:
          type: string
          const: "StepStarted"
        timestamp: { type: string, format: date-time }
        details:
          type: object
          properties:
            stepId: { type: string }
            agent: { type: string }
      required: [type, timestamp, details]
    AgentOutputReceivedEvent:
      type: object
      properties:
        type:
          type: string
          const: "AgentOutputReceived"
        timestamp: { type: string, format: date-time }
        details:
          type: object
          properties:
            stepId: { type: string }
            agent: { type: string }
            outputSummary: { type: string, description: "Truncated output for brevity" }
      required: [type, timestamp, details]
    StepCompletedEvent:
      type: object
      properties:
        type:
          type: string
          const: "StepCompleted"
        timestamp: { type: string, format: date-time }
        details:
          type: object
          properties:
            stepId: { type: string }
            agent: { type: string }
            result: { $ref: '#/components/schemas/AgentOutput', description: "Full output if needed" }
      required: [type, timestamp, details]
    WorkflowCompletedEvent:
      type: object
      properties:
        type:
          type: string
          const: "WorkflowCompleted"
        timestamp: { type: string, format: date-time }
        details:
          type: object
          properties:
            finalStatus: { type: string, const: "completed" }
            overallResultSummary: { type: string }
      required: [type, timestamp, details]
    WorkflowFailedEvent:
      type: object
      properties:
        type:
          type: string
          const: "WorkflowFailed"
        timestamp: { type: string, format: date-time }
        details:
          type: object
          properties:
            finalStatus: { type: string, const: "failed" }
            error: { $ref: '#/components/schemas/ErrorResponse' }
      required: [type, timestamp, details]
    WorkflowPausedEvent:
      type: object
      properties:
        type:
          type: string
          const: "WorkflowPaused"
        timestamp: { type: string, format: date-time }
        details:
          type: object
          properties:
            finalStatus: { type: string, const: "paused" }
      required: [type, timestamp, details]
    WorkflowResumedEvent:
      type: object
      properties:
        type:
          type: string
          const: "WorkflowResumed"
        timestamp: { type: string, format: date-time }
        details:
          type: object
          properties:
            finalStatus: { type: string, const: "running" }
      required: [type, timestamp, details]
    ControlCommand:
      type: object
      properties:
        command:
          type: string
          enum: ["pause", "resume", "cancel"]
          description: The control command to execute.
      required:
        - command
    WebhookSubscription:
      type: object
      properties:
        webhookId:
          type: string
          readOnly: true
        url:
          type: string
          format: url
        events:
          type: array
          description: Events to subscribe to.
          items:
            type: string
            enum: ["workflow_started", "step_started", "step_completed", "agent_output", "workflow_completed", "workflow_failed", "workflow_paused", "workflow_resumed"]
          default: ["workflow_completed", "workflow_failed"]
        secret:
          type: string
          description: Secret token for callback verification.
      required:
        - url
    RunSummary:
      type: object
      properties:
        jobId:
          type: string
        highLevelGoal:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        status:
          type: string
          enum: ["pending", "running", "completed", "failed", "paused", "cancelled"]
      required:
        - jobId
        - highLevelGoal
        - startTime
        - status
    RunStateDetail:
      type: object
      properties:
        jobId:
          type: string
        plan:
          $ref: '#/components/schemas/Plan'
        executionLog:
          type: array
          description: Detailed log of execution steps and agent outputs.
          items:
            $ref: '#/components/schemas/AgentOutput'
        finalStatus:
          type: string
          enum: ["pending", "running", "completed", "failed", "paused", "cancelled"]
        error:
          $ref: '#/components/schemas/ErrorResponse'
      required:
        - jobId
        - plan
        - executionLog
        - finalStatus
    Plan:
      type: object
      properties:
        high_level_goal:
          type: string
        reasoning:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        team:
          $ref: '#/components/schemas/Team'
      required:
        - high_level_goal
        - reasoning
        - roles
        - tasks
    Role:
      type: object
      properties:
        title:
          type: string
        purpose:
          type: string
      required:
        - title
        - purpose
    Task:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        role:
          type: string
        agent:
          type: string
        requires:
          type: array
          description: IDs of prerequisite tasks. Validation should ensure these IDs exist within the plan.
          items:
            type: string
      required:
        - id
        - description
        - role
        - agent
        - requires
    Team:
      type: object
      properties:
        notes:
          type: string
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/Prompt'
      required:
        - notes
    Prompt:
      type: object
      properties:
        agent:
          type: string
        role:
          type: string
        system_prompt:
          type: string
      required:
        - agent
        - role
        - system_prompt
    AgentOutput:
      type: object
      properties:
        output:
          type: string
        artifact:
          $ref: '#/components/schemas/Artifact'
        team:
          $ref: '#/components/schemas/Team'
          description: Team structure or prompts relevant to subsequent steps.
        reasoning:
          type: string
          nullable: true
      required:
        - output
    Artifact:
      type: object
      properties:
        task:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
      required:
        - task
        - files
    File:
      type: object
      properties:
        path:
          type: string
        content:
          type: string
      required:
        - path
        - content
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
      required:
        - code
        - message
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
security:
  - ApiKeyAuth: []

[{"id": "f1a0833c-7b5a-4e2f-8f1c-0d4e5b6c7d8e", "name": "Define API Endpoints", "description": "Identify and define the specific API endpoints that the backend service will expose to the frontend, including their HTTP methods, request/response schemas, and functionalities.", "category": "Planning", "purpose": "Ensures a clear contract between the frontend and backend, facilitating parallel development and integration.", "keywords": ["API", "endpoints", "interface", "contract"], "applicability_notes": "Relevant for any project involving client-server communication, microservices, or web applications.", "examples_of_usage": ["Defining RESTful API endpoints for a web application.", "Specifying gRPC service definitions.", "Outlining message queues for event-driven systems."], "typical_inputs": ["High-level service description", "Backend code analysis"], "typical_outputs": ["List of API endpoints with specifications"]}, {"id": "a2b1c0d9-8e7f-4a6b-9c8d-7e6f5a4b3c2d", "name": "Analyze Data Structures", "description": "Examine and document the data structures used by the backend service, including Pydantic models, database schemas, and any internal data representations.", "category": "Analysis", "purpose": "Provides a clear understanding of how data is organized and processed, which is crucial for frontend development and API design.", "keywords": ["data structures", "models", "schemas", "data representation"], "applicability_notes": "Applicable whenever data is being managed, processed, or transferred between systems.", "examples_of_usage": ["Documenting Pydantic models for FastAPI.", "Defining database table schemas.", "Understanding object structures in memory."], "typical_inputs": ["Backend code", "Database schema definitions"], "typical_outputs": ["Documentation of data structures", "List of Pydantic models"]}, {"id": "e3f2a1b0-9c8d-4e7f-8a5b-6c7d8e9f0a1b", "name": "Understand Backend Functionality", "description": "Comprehend the core functionalities and business logic implemented within the backend service.", "category": "Analysis", "purpose": "Enables the frontend to effectively utilize backend services and to anticipate how the backend will respond to various user interactions.", "keywords": ["backend logic", "functionality", "business logic", "service capabilities"], "applicability_notes": "Essential for any integration where one system consumes the services of another.", "examples_of_usage": ["Understanding how an e-commerce backend handles orders.", "Grasping the data processing steps in a machine learning service.", "Mapping user authentication flows."], "typical_inputs": ["Backend code", "API documentation", "Use case descriptions"], "typical_outputs": ["Functional decomposition of the backend", "Description of key backend processes"]}]
{"output":"Based on the provided Task Agnostic Steps (TAS), the following documentation structure is proposed:\n\n1.  **Introduction**\n    *   Purpose and Scope of the Runtime Documentation\n    *   Target Audience\n    *   Overview of Runtime Components\n\n2.  **Getting Started**\n    *   Installation and Setup\n    *   Quick Start Guide / Basic Usage Example\n\n3.  **Core Concepts**\n    *   Explanation of key concepts (e.g., Agents, Sessions, Context, Plans, Artifacts)\n    *   Workflow Execution Model\n\n4.  **API Reference**\n    *   Detailed documentation for each public API, including:\n        *   Function/Method Signature\n        *   Parameters (name, type, description, optional/required)\n        *   Return Values (type, description)\n        *   Error Handling\n        *   Code Examples\n\n5.  **Advanced Usage & Tutorials**\n    *   In-depth guides on specific features or complex scenarios.\n    *   Examples of extending the runtime (e.g., custom agents, LLM integrations).\n\n6.  **Contribution Guide**\n    *   Information for developers who wish to contribute to the runtime.\n    *   Coding standards, pull request process, etc.\n\n7.  **Troubleshooting & FAQ**\n    *   Common issues and their solutions.\n    *   Frequently asked questions.\n\n**Key Areas to be Documented:**\n\n*   **Agent Class:** Details on its lifecycle, task execution, and helper functions.\n*   **ExecutionContext:** Explanation of state management, artifact handling, and context.\n*   **Session Class:** Information on session management, artifact storage, and directory structure.\n*   **LLM Abstraction:** How different LLMs are integrated and used.\n*   **Orchestrator:** Role in plan generation and workflow management.\n*   **System Class:** Overall system architecture, configuration, and execution flow.\n*   **Custom Types:** Definitions and usage of Pydantic models (Plan, Task, AgentOutput, etc.).\n*   **Configuration Files:** Structure and usage of configuration files (e.g., `runtime.yaml`).\n*   **Prompts:** Explanation of prompt management and usage within the system.\n*   **Logging:** Configuration and usage of the logging system.\n*   **Command-Line Interface (CLI):** Usage and arguments for running the system.","artifact":null,"team":null,"reasoning":"The user wants me to define the overall documentation structure and identify key areas to be documented based on the extracted Task Agnostic Steps (TAS). The TAS provided a list of steps, each with a description and keywords. I have synthesized these into a logical documentation structure and then identified specific components and concepts from the provided code that need to be documented within that structure. The structure follows a typical pattern for technical documentation, starting with an introduction and getting started guide, moving to core concepts and API details, and concluding with advanced topics and publishing information. The key areas to be documented are derived directly from the filenames and core classes within the provided Python code, ensuring comprehensive coverage of the runtime system."}
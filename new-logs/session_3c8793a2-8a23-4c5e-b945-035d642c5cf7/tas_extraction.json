[
  {
    "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Define Requirements",
    "description": "Clearly articulate and document the functional and non-functional requirements for the project. This involves understanding the core problem to be solved and defining the scope, features, and constraints.",
    "category": "Analysis",
    "purpose": "Establish a clear understanding of what needs to be built.",
    "keywords": [
      "requirements gathering",
      "scope definition",
      "functional analysis",
      "non-functional analysis"
    ],
    "applicability_notes": "This step is crucial for any project, regardless of domain. It sets the foundation for all subsequent development phases.",
    "examples_of_usage": [
      "Gathering user needs for a new mobile application.",
      "Documenting business rules for an enterprise system.",
      "Outlining the features for a web service."
    ],
    "typical_inputs": [
      "High-level goal statement",
      "Stakeholder input",
      "Existing system documentation"
    ],
    "typical_outputs": [
      "Requirements document",
      "User stories",
      "Feature list"
    ]
  },
  {
    "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef0",
    "name": "Design System Architecture",
    "description": "Plan the overall structure and organization of the system. This includes defining components, their interactions, data flow, and technology stack choices.",
    "category": "Design",
    "purpose": "Create a blueprint for the system's structure.",
    "keywords": [
      "architecture design",
      "system planning",
      "component definition",
      "technology selection"
    ],
    "applicability_notes": "Applies to software, hardware, and even organizational systems. The level of detail varies based on project complexity.",
    "examples_of_usage": [
      "Choosing the right database for a web application.",
      "Defining the microservices for a distributed system.",
      "Planning the network infrastructure for a new office."
    ],
    "typical_inputs": [
      "Defined Requirements",
      "Constraints (budget, time, resources)",
      "Existing architectural patterns"
    ],
    "typical_outputs": [
      "Architecture diagrams",
      "Technology stack document",
      "Component specifications"
    ]
  },
  {
    "id": "c3d4e5f6-a7b8-9012-3456-7890abcdef01",
    "name": "Design User Interface",
    "description": "Create the visual layout, interactive elements, and overall user experience of the application. This involves wireframing, prototyping, and defining visual design principles.",
    "category": "Design",
    "purpose": "Define how users will interact with the system.",
    "keywords": [
      "UI design",
      "UX design",
      "wireframing",
      "prototyping",
      "visual design"
    ],
    "applicability_notes": "Essential for any system with a human interface, from software to physical products.",
    "examples_of_usage": [
      "Designing the screens for a mobile app.",
      "Creating the dashboard layout for a web application.",
      "Developing the control panel for a device."
    ],
    "typical_inputs": [
      "Defined Requirements",
      "User personas",
      "Branding guidelines"
    ],
    "typical_outputs": [
      "Wireframes",
      "Mockups",
      "Prototypes",
      "Style guides"
    ]
  },
  {
    "id": "d4e5f6a7-b8c9-0123-4567-890abcdef012",
    "name": "Develop Core Functionality",
    "description": "Write the underlying code and logic that powers the application's primary features. This involves translating design and requirements into functional software components.",
    "category": "Implementation",
    "purpose": "Build the essential features of the application.",
    "keywords": [
      "coding",
      "software development",
      "feature implementation",
      "logic programming"
    ],
    "applicability_notes": "The core of software creation. The complexity and specific techniques vary greatly with the project.",
    "examples_of_usage": [
      "Implementing user authentication.",
      "Developing the data processing logic.",
      "Creating the algorithms for a simulation."
    ],
    "typical_inputs": [
      "Detailed design specifications",
      "API definitions",
      "Requirements documentation"
    ],
    "typical_outputs": [
      "Functional code modules",
      "Integrated components",
      "Working features"
    ]
  },
  {
    "id": "e5f6a7b8-c9d0-1234-5678-90abcdef0123",
    "name": "Implement User Interface",
    "description": "Translate the designed user interface into actual, interactive code. This involves front-end development to create the visual elements and user interactions as specified.",
    "category": "Implementation",
    "purpose": "Build the user-facing part of the application.",
    "keywords": [
      "front-end development",
      "UI implementation",
      "component coding",
      "layout implementation"
    ],
    "applicability_notes": "Crucial for any application intended for user interaction. Ensures the visual design is realized.",
    "examples_of_usage": [
      "Building the HTML, CSS, and JavaScript for a web page.",
      "Developing the native UI components for a mobile app.",
      "Integrating UI elements with backend services."
    ],
    "typical_inputs": [
      "UI/UX designs (wireframes, mockups, prototypes)",
      "Style guides",
      "Component specifications"
    ],
    "typical_outputs": [
      "Interactive UI components",
      "Rendered application screens",
      "Responsive layouts"
    ]
  },
  {
    "id": "f6a7b8c9-d0e1-2345-6789-0abcdef01234",
    "name": "Integrate Components",
    "description": "Connect different modules, services, and components of the system to work together seamlessly. This involves ensuring data flows correctly between parts and that interactions are functional.",
    "category": "Integration",
    "purpose": "Ensure all parts of the system work together.",
    "keywords": [
      "system integration",
      "component connection",
      "API integration",
      "data flow management"
    ],
    "applicability_notes": "A critical step in most complex projects, ensuring disparate parts form a cohesive whole.",
    "examples_of_usage": [
      "Connecting a front-end application to a back-end API.",
      "Integrating third-party services into an existing platform.",
      "Ensuring different microservices communicate effectively."
    ],
    "typical_inputs": [
      "Developed components/modules",
      "API documentation",
      "Integration protocols"
    ],
    "typical_outputs": [
      "Integrated system",
      "Working end-to-end features",
      "Data synchronization"
    ]
  },
  {
    "id": "a7b8c9d0-e1f2-3456-7890-abcdef012345",
    "name": "Test System",
    "description": "Verify that the system functions as expected and meets all specified requirements. This includes various levels of testing, such as unit, integration, system, and user acceptance testing.",
    "category": "Testing",
    "purpose": "Validate system correctness and quality.",
    "keywords": [
      "testing",
      "quality assurance",
      "validation",
      "bug fixing"
    ],
    "applicability_notes": "Fundamental to delivering reliable software and products.",
    "examples_of_usage": [
      "Running unit tests on individual functions.",
      "Performing end-to-end tests on a complete application.",
      "Conducting performance and security testing."
    ],
    "typical_inputs": [
      "Developed system/components",
      "Test cases",
      "Requirements document"
    ],
    "typical_outputs": [
      "Test reports",
      "Bug reports",
      "Validated system"
    ]
  },
  {
    "id": "b8c9d0e1-f2a3-4567-890a-bcdef0123456",
    "name": "Deploy System",
    "description": "Make the system available for use in its target environment. This involves packaging, configuration, and release management processes.",
    "category": "Deployment",
    "purpose": "Release the system to users or the target environment.",
    "keywords": [
      "deployment",
      "release management",
      "environment setup",
      "go-live"
    ],
    "applicability_notes": "The final stage of making a system operational.",
    "examples_of_usage": [
      "Deploying a web application to a production server.",
      "Releasing a mobile app to an app store.",
      "Setting up a new software instance for a client."
    ],
    "typical_inputs": [
      "Tested and validated system",
      "Deployment scripts/configurations",
      "Target environment details"
    ],
    "typical_outputs": [
      "Live system",
      "Deployment logs",
      "Operational environment"
    ]
  },
  {
    "id": "c9d0e1f2-a3b4-5678-90ab-cdef01234567",
    "name": "Monitor and Maintain",
    "description": "Continuously observe the system's performance, identify issues, and perform necessary updates or fixes after deployment. This ensures ongoing stability and functionality.",
    "category": "Maintenance",
    "purpose": "Ensure long-term system health and performance.",
    "keywords": [
      "monitoring",
      "maintenance",
      "updates",
      "bug fixing",
      "performance tuning"
    ],
    "applicability_notes": "An ongoing process essential for any operational system.",
    "examples_of_usage": [
      "Tracking server performance and uptime.",
      "Applying security patches to software.",
      "Responding to user-reported issues."
    ],
    "typical_inputs": [
      "Live system",
      "Monitoring tools/dashboards",
      "User feedback",
      "Performance metrics"
    ],
    "typical_outputs": [
      "System updates/patches",
      "Performance reports",
      "Resolved issues"
    ]
  }
]
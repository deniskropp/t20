[
  {
    "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "Define Project Scope",
    "description": "Clearly articulate the objectives, features, and constraints of the project. This involves understanding what the final product should achieve and what its boundaries are.",
    "category": "Init",
    "purpose": "Establish the foundational understanding and boundaries of the project.",
    "keywords": ["scope", "requirements", "definition", "planning", "objective"],
    "applicability_notes": "This step is crucial for any project, regardless of its domain or complexity, to ensure alignment and prevent scope creep.",
    "examples_of_usage": [
      "Defining the core features of a mobile app.",
      "Outlining the research questions for a scientific study.",
      "Setting the goals for a marketing campaign."
    ],
    "typical_inputs": ["High-level goal", "Stakeholder needs"],
    "typical_outputs": ["Project scope document", "Feature list", "Constraints definition"]
  },
  {
    "id": "b2c3d4e5-f6a7-8901-2345-67890abcdef1",
    "name": "Design System Architecture",
    "description": "Determine the overall structure and organization of the system. This includes choosing the technology stack, defining major components, and outlining their interactions.",
    "category": "Design",
    "purpose": "Outline the technical blueprint for the system.",
    "keywords": ["architecture", "design", "system structure", "technology stack", "components"],
    "applicability_notes": "Applies to software, hardware, or even complex organizational systems. The level of detail varies based on project scale.",
    "examples_of_usage": [
      "Choosing between monolithic and microservices architecture for a web application.",
      "Designing the data flow for an IoT device.",
      "Structuring the modules of a desktop application."
    ],
    "typical_inputs": ["Project scope", "Non-functional requirements"],
    "typical_outputs": ["Architecture diagram", "Technology stack selection", "Component definitions"]
  },
  {
    "id": "c3d4e5f6-a7b8-9012-3456-7890abcdef12",
    "name": "Develop User Interface (UI)",
    "description": "Create the visual elements and interactive components that users will engage with. This includes layout, styling, and ensuring a user-friendly experience.",
    "category": "Design",
    "purpose": "Build the user-facing part of the system.",
    "keywords": ["UI", "user interface", "frontend", "design", "visuals", "interaction"],
    "applicability_notes": "Essential for any product with a human user. Covers web, mobile, desktop, and even physical interfaces.",
    "examples_of_usage": [
      "Designing the screens and navigation for a mobile app.",
      "Creating the layout and forms for a web portal.",
      "Developing the control panel for a piece of machinery."
    ],
    "typical_inputs": ["UI/UX requirements", "Branding guidelines"],
    "typical_outputs": ["UI mockups", "Prototypes", "Frontend code components"]
  },
  {
    "id": "d4e5f6a7-b8c9-0123-4567-890abcdef123",
    "name": "Implement Core Logic",
    "description": "Write the backend code and business logic that powers the application's functionality. This involves translating requirements into executable instructions.",
    "category": "Implementation",
    "purpose": "Build the functional engine of the system.",
    "keywords": ["backend", "logic", "implementation", "coding", "functionality", "business logic"],
    "applicability_notes": "The core of any software development. It can also apply to implementing rules or processes in non-software contexts.",
    "examples_of_usage": [
      "Writing the algorithms for data processing.",
      "Implementing the user authentication system.",
      "Developing the calculation engine for a financial tool."
    ],
    "typical_inputs": ["System architecture", "Detailed feature specifications"],
    "typical_outputs": ["Backend code", "APIs", "Data models"]
  },
  {
    "id": "e5f6a7b8-c9d0-1234-5678-90abcdef1234",
    "name": "Integrate Components",
    "description": "Connect different parts of the system (e.g., frontend and backend, external services) to work together seamlessly. This ensures data flows correctly and functions operate as expected.",
    "category": "Implementation",
    "purpose": "Ensure all parts of the system communicate effectively.",
    "keywords": ["integration", "connection", "APIs", "communication", "system assembly"],
    "applicability_notes": "Critical for any system composed of multiple modules or services.",
    "examples_of_usage": [
      "Connecting a web frontend to a REST API.",
      "Integrating a payment gateway into an e-commerce site.",
      "Linking different microservices."
    ],
    "typical_inputs": ["Developed components", "Interface specifications"],
    "typical_outputs": ["Integrated system", "Working workflows"]
  },
  {
    "id": "f6a7b8c9-d0e1-2345-6789-0abcdef12345",
    "name": "Test System Functionality",
    "description": "Verify that the system and its components function according to the specified requirements. This includes various levels of testing like unit, integration, and end-to-end tests.",
    "category": "Testing",
    "purpose": "Validate that the system works as intended.",
    "keywords": ["testing", "quality assurance", "verification", "validation", "bug fixing"],
    "applicability_notes": "An essential part of any development process to ensure reliability and correctness.",
    "examples_of_usage": [
      "Writing unit tests for individual functions.",
      "Performing integration tests to check component interactions.",
      "Conducting user acceptance testing (UAT)."
    ],
    "typical_inputs": ["Implemented system", "Test cases", "Requirements"],
    "typical_outputs": ["Test reports", "Bug list", "Validated system"]
  },
  {
    "id": "a7b8c9d0-e1f2-3456-7890-abcdef123456",
    "name": "Deploy Application",
    "description": "Make the application available for users in the target environment (e.g., production servers, app stores). This involves packaging, configuration, and release management.",
    "category": "Deployment",
    "purpose": "Release the system to its intended users.",
    "keywords": ["deployment", "release", "production", "hosting", "distribution"],
    "applicability_notes": "The final step in delivering a product or feature to its audience.",
    "examples_of_usage": [
      "Deploying a web application to a cloud server.",
      "Publishing a mobile app to an app store.",
      "Installing software on user machines."
    ],
    "typical_inputs": ["Tested and validated system", "Deployment configuration"],
    "typical_outputs": ["Live application", "Deployment logs"]
  },
  {
    "id": "b8c9d0e1-f2a3-4567-8901-bcdef1234567",
    "name": "Monitor and Maintain",
    "description": "Continuously observe the application's performance, health, and user feedback post-deployment. Address issues, apply updates, and make improvements over time.",
    "category": "Maintenance",
    "purpose": "Ensure the system remains operational and relevant.",
    "keywords": ["monitoring", "maintenance", "support", "updates", "operations"],
    "applicability_notes": "An ongoing process for any live system to ensure long-term success.",
    "examples_of_usage": [
      "Tracking server performance and errors.",
      "Applying security patches.",
      "Responding to user support requests."
    ],
    "typical_inputs": ["Live application", "Performance metrics", "User feedback"],
    "typical_outputs": ["System updates", "Performance reports", "Resolved issues"]
  }
]

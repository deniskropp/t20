{
  "reasoning": "The user wants to extract Task-Agnostic Steps (TAS) for creating a simple TODO app. I need to break down this high-level goal into fundamental, reusable actions that can be applied to many different types of projects, not just a TODO app. I will focus on the common lifecycle of software development: planning, design, implementation, testing, and deployment/maintenance. Each step should be general enough to be considered 'task-agnostic'.",
  "output": "```json\n[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"name\": \"Define Project Scope\",\n    \"description\": \"Clearly articulate the objectives, features, and constraints of the project. This involves understanding what the final product should achieve and what its boundaries are.\",\n    \"category\": \"Init\",\n    \"purpose\": \"Establish the foundational understanding and boundaries of the project.\",\n    \"keywords\": [\"scope\", \"requirements\", \"definition\", \"planning\", \"objective\"],\n    \"applicability_notes\": \"This step is crucial for any project, regardless of its domain or complexity, to ensure alignment and prevent scope creep.\",\n    \"examples_of_usage\": [\n      \"Defining the core features of a mobile app.\",\n      \"Outlining the research questions for a scientific study.\",\n      \"Setting the goals for a marketing campaign.\"\n    ],\n    \"typical_inputs\": [\"High-level goal\", \"Stakeholder needs\"],\n    \"typical_outputs\": [\"Project scope document\", \"Feature list\", \"Constraints definition\"]\n  },\n  {\n    \"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef1\",\n    \"name\": \"Design System Architecture\",\n    \"description\": \"Determine the overall structure and organization of the system. This includes choosing the technology stack, defining major components, and outlining their interactions.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Outline the technical blueprint for the system.\",\n    \"keywords\": [\"architecture\", \"design\", \"system structure\", \"technology stack\", \"components\"],\n    \"applicability_notes\": \"Applies to software, hardware, or even complex organizational systems. The level of detail varies based on project scale.\",\n    \"examples_of_usage\": [\n      \"Choosing between monolithic and microservices architecture for a web application.\",\n      \"Designing the data flow for an IoT device.\",\n      \"Structuring the modules of a desktop application.\"\n    ],\n    \"typical_inputs\": [\"Project scope\", \"Non-functional requirements\"],\n    \"typical_outputs\": [\"Architecture diagram\", \"Technology stack selection\", \"Component definitions\"]\n  },\n  {\n    \"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef12\",\n    \"name\": \"Develop User Interface (UI)\",\n    \"description\": \"Create the visual elements and interactive components that users will engage with. This includes layout, styling, and ensuring a user-friendly experience.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Build the user-facing part of the system.\",\n    \"keywords\": [\"UI\", \"user interface\", \"frontend\", \"design\", \"visuals\", \"interaction\"],\n    \"applicability_notes\": \"Essential for any product with a human user. Covers web, mobile, desktop, and even physical interfaces.\",\n    \"examples_of_usage\": [\n      \"Designing the screens and navigation for a mobile app.\",\n      \"Creating the layout and forms for a web portal.\",\n      \"Developing the control panel for a piece of machinery.\"\n    ],\n    \"typical_inputs\": [\"UI/UX requirements\", \"Branding guidelines\"],\n    \"typical_outputs\": [\"UI mockups\", \"Prototypes\", \"Frontend code components\"]\n  },\n  {\n    \"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef123\",\n    \"name\": \"Implement Core Logic\",\n    \"description\": \"Write the backend code and business logic that powers the application's functionality. This involves translating requirements into executable instructions.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the functional engine of the system.\",\n    \"keywords\": [\"backend\", \"logic\", \"implementation\", \"coding\", \"functionality\", \"business logic\"],\n    \"applicability_notes\": \"The core of any software development. It can also apply to implementing rules or processes in non-software contexts.\",\n    \"examples_of_usage\": [\n      \"Writing the algorithms for data processing.\",\n      \"Implementing the user authentication system.\",\n      \"Developing the calculation engine for a financial tool.\"\n    ],\n    \"typical_inputs\": [\"System architecture\", \"Detailed feature specifications\"],\n    \"typical_outputs\": [\"Backend code\", \"APIs\", \"Data models\"]\n  },\n  {\n    \"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef1234\",\n    \"name\": \"Integrate Components\",\n    \"description\": \"Connect different parts of the system (e.g., frontend and backend, external services) to work together seamlessly. This ensures data flows correctly and functions operate as expected.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Ensure all parts of the system communicate effectively.\",\n    \"keywords\": [\"integration\", \"connection\", \"APIs\", \"communication\", \"system assembly\"],\n    \"applicability_notes\": \"Critical for any system composed of multiple modules or services.\",\n    \"examples_of_usage\": [\n      \"Connecting a web frontend to a REST API.\",\n      \"Integrating a payment gateway into an e-commerce site.\",\n      \"Linking different microservices.\"\n    ],\n    \"typical_inputs\": [\"Developed components\", \"Interface specifications\"],\n    \"typical_outputs\": [\"Integrated system\", \"Working workflows\"]\n  },\n  {\n    \"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef12345\",\n    \"name\": \"Test System Functionality\",\n    \"description\": \"Verify that the system and its components function according to the specified requirements. This includes various levels of testing like unit, integration, and end-to-end tests.\",\n    \"category\": \"Testing\",\n    \"purpose\": \"Validate that the system works as intended.\",\n    \"keywords\": [\"testing\", \"quality assurance\", \"verification\", \"validation\", \"bug fixing\"],\n    \"applicability_notes\": \"An essential part of any development process to ensure reliability and correctness.\",\n    \"examples_of_usage\": [\n      \"Writing unit tests for individual functions.\",\n      \"Performing integration tests to check component interactions.\",\n      \"Conducting user acceptance testing (UAT).\"\n    ],\n    \"typical_inputs\": [\"Implemented system\", \"Test cases\", \"Requirements\"],\n    \"typical_outputs\": [\"Test reports\", \"Bug list\", \"Validated system\"]\n  },\n  {\n    \"id\": \"a7b8c9d0-e1f2-3456-7890-abcdef123456\",\n    \"name\": \"Deploy Application\",\n    \"description\": \"Make the application available for users in the target environment (e.g., production servers, app stores). This involves packaging, configuration, and release management.\",\n    \"category\": \"Deployment\",\n    \"purpose\": \"Release the system to its intended users.\",\n    \"keywords\": [\"deployment\", \"release\", \"production\", \"hosting\", \"distribution\"],\n    \"applicability_notes\": \"The final step in delivering a product or feature to its audience.\",\n    \"examples_of_usage\": [\n      \"Deploying a web application to a cloud server.\",\n      \"Publishing a mobile app to an app store.\",\n      \"Installing software on user machines.\"\n    ],\n    \"typical_inputs\": [\"Tested and validated system\", \"Deployment configuration\"],\n    \"typical_outputs\": [\"Live application\", \"Deployment logs\"]\n  },\n  {\n    \"id\": \"b8c9d0e1-f2a3-4567-8901-bcdef1234567\",\n    \"name\": \"Monitor and Maintain\",\n    \"description\": \"Continuously observe the application's performance, health, and user feedback post-deployment. Address issues, apply updates, and make improvements over time.\",\n    \"category\": \"Maintenance\",\n    \"purpose\": \"Ensure the system remains operational and relevant.\",\n    \"keywords\": [\"monitoring\", \"maintenance\", \"support\", \"updates\", \"operations\"],\n    \"applicability_notes\": \"An ongoing process for any live system to ensure long-term success.\",\n    \"examples_of_usage\": [\n      \"Tracking server performance and errors.\",\n      \"Applying security patches.\",\n      \"Responding to user support requests.\"\n    ],\n    \"typical_inputs\": [\"Live application\", \"Performance metrics\", \"User feedback\"],\n    \"typical_outputs\": [\"System updates\", \"Performance reports\", \"Resolved issues\"]\n  }\n]\n```",
  "files": [
    {
      "name": "task_agnostic_steps.json",
      "content": "[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"name\": \"Define Project Scope\",\n    \"description\": \"Clearly articulate the objectives, features, and constraints of the project. This involves understanding what the final product should achieve and what its boundaries are.\",\n    \"category\": \"Init\",\n    \"purpose\": \"Establish the foundational understanding and boundaries of the project.\",\n    \"keywords\": [\"scope\", \"requirements\", \"definition\", \"planning\", \"objective\"],\n    \"applicability_notes\": \"This step is crucial for any project, regardless of its domain or complexity, to ensure alignment and prevent scope creep.\",\n    \"examples_of_usage\": [\n      \"Defining the core features of a mobile app.\",\n      \"Outlining the research questions for a scientific study.\",\n      \"Setting the goals for a marketing campaign.\"\n    ],\n    \"typical_inputs\": [\"High-level goal\", \"Stakeholder needs\"],\n    \"typical_outputs\": [\"Project scope document\", \"Feature list\", \"Constraints definition\"]\n  },\n  {\n    \"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef1\",\n    \"name\": \"Design System Architecture\",\n    \"description\": \"Determine the overall structure and organization of the system. This includes choosing the technology stack, defining major components, and outlining their interactions.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Outline the technical blueprint for the system.\",\n    \"keywords\": [\"architecture\", \"design\", \"system structure\", \"technology stack\", \"components\"],\n    \"applicability_notes\": \"Applies to software, hardware, or even complex organizational systems. The level of detail varies based on project scale.\",\n    \"examples_of_usage\": [\n      \"Choosing between monolithic and microservices architecture for a web application.\",\n      \"Designing the data flow for an IoT device.\",\n      \"Structuring the modules of a desktop application.\"\n    ],\n    \"typical_inputs\": [\"Project scope\", \"Non-functional requirements\"],\n    \"typical_outputs\": [\"Architecture diagram\", \"Technology stack selection\", \"Component definitions\"]\n  },\n  {\n    \"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef12\",\n    \"name\": \"Develop User Interface (UI)\",\n    \"description\": \"Create the visual elements and interactive components that users will engage with. This includes layout, styling, and ensuring a user-friendly experience.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Build the user-facing part of the system.\",\n    \"keywords\": [\"UI\", \"user interface\", \"frontend\", \"design\", \"visuals\", \"interaction\"],\n    \"applicability_notes\": \"Essential for any product with a human user. Covers web, mobile, desktop, and even physical interfaces.\",\n    \"examples_of_usage\": [\n      \"Designing the screens and navigation for a mobile app.\",\n      \"Creating the layout and forms for a web portal.\",\n      \"Developing the control panel for a piece of machinery.\"\n    ],\n    \"typical_inputs\": [\"UI/UX requirements\", \"Branding guidelines\"],\n    \"typical_outputs\": [\"UI mockups\", \"Prototypes\", \"Frontend code components\"]\n  },\n  {\n    \"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef123\",\n    \"name\": \"Implement Core Logic\",\n    \"description\": \"Write the backend code and business logic that powers the application's functionality. This involves translating requirements into executable instructions.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the functional engine of the system.\",\n    \"keywords\": [\"backend\", \"logic\", \"implementation\", \"coding\", \"functionality\", \"business logic\"],\n    \"applicability_notes\": \"The core of any software development. It can also apply to implementing rules or processes in non-software contexts.\",\n    \"examples_of_usage\": [\n      \"Writing the algorithms for data processing.\",\n      \"Implementing the user authentication system.\",\n      \"Developing the calculation engine for a financial tool.\"\n    ],\n    \"typical_inputs\": [\"System architecture\", \"Detailed feature specifications\"],\n    \"typical_outputs\": [\"Backend code\", \"APIs\", \"Data models\"]\n  },\n  {\n    \"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef1234\",\n    \"name\": \"Integrate Components\",\n    \"description\": \"Connect different parts of the system (e.g., frontend and backend, external services) to work together seamlessly. This ensures data flows correctly and functions operate as expected.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Ensure all parts of the system communicate effectively.\",\n    \"keywords\": [\"integration\", \"connection\", \"APIs\", \"communication\", \"system assembly\"],\n    \"applicability_notes\": \"Critical for any system composed of multiple modules or services.\",\n    \"examples_of_usage\": [\n      \"Connecting a web frontend to a REST API.\",\n      \"Integrating a payment gateway into an e-commerce site.\",\n      \"Linking different microservices.\"\n    ],\n    \"typical_inputs\": [\"Developed components\", \"Interface specifications\"],\n    \"typical_outputs\": [\"Integrated system\", \"Working workflows\"]\n  },\n  {\n    \"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef12345\",\n    \"name\": \"Test System Functionality\",\n    \"description\": \"Verify that the system and its components function according to the specified requirements. This includes various levels of testing like unit, integration, and end-to-end tests.\",\n    \"category\": \"Testing\",\n    \"purpose\": \"Validate that the system works as intended.\",\n    \"keywords\": [\"testing\", \"quality assurance\", \"verification\", \"validation\", \"bug fixing\"],\n    \"applicability_notes\": \"An essential part of any development process to ensure reliability and correctness.\",\n    \"examples_of_usage\": [\n      \"Writing unit tests for individual functions.\",\n      \"Performing integration tests to check component interactions.\",\n      \"Conducting user acceptance testing (UAT).\"\n    ],\n    \"typical_inputs\": [\"Implemented system\", \"Test cases\", \"Requirements\"],\n    \"typical_outputs\": [\"Test reports\", \"Bug list\", \"Validated system\"]\n  },\n  {\n    \"id\": \"a7b8c9d0-e1f2-3456-7890-abcdef123456\",\n    \"name\": \"Deploy Application\",\n    \"description\": \"Make the application available for users in the target environment (e.g., production servers, app stores). This involves packaging, configuration, and release management.\",\n    \"category\": \"Deployment\",\n    \"purpose\": \"Release the system to its intended users.\",\n    \"keywords\": [\"deployment\", \"release\", \"production\", \"hosting\", \"distribution\"],\n    \"applicability_notes\": \"The final step in delivering a product or feature to its audience.\",\n    \"examples_of_usage\": [\n      \"Deploying a web application to a cloud server.\",\n      \"Publishing a mobile app to an app store.\",\n      \"Installing software on user machines.\"\n    ],\n    \"typical_inputs\": [\"Tested and validated system\", \"Deployment configuration\"],\n    \"typical_outputs\": [\"Live application\", \"Deployment logs\"]\n  },\n  {\n    \"id\": \"b8c9d0e1-f2a3-4567-8901-bcdef1234567\",\n    \"name\": \"Monitor and Maintain\",\n    \"description\": \"Continuously observe the application's performance, health, and user feedback post-deployment. Address issues, apply updates, and make improvements over time.\",\n    \"category\": \"Maintenance\",\n    \"purpose\": \"Ensure the system remains operational and relevant.\",\n    \"keywords\": [\"monitoring\", \"maintenance\", \"support\", \"updates\", \"operations\"],\n    \"applicability_notes\": \"An ongoing process for any live system to ensure long-term success.\",\n    \"examples_of_usage\": [\n      \"Tracking server performance and errors.\",\n      \"Applying security patches.\",\n      \"Responding to user support requests.\"\n    ],\n    \"typical_inputs\": [\"Live application\", \"Performance metrics\", \"User feedback\"],\n    \"typical_outputs\": [\"System updates\", \"Performance reports\", \"Resolved issues\"]\n  }\n]\n"
    }
  ]
}
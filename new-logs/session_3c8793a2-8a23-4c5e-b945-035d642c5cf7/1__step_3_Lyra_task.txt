The overall goal is: 'Create a simple TDOO app'

Your role's specific goal is: 'Structure workflows and ensure clarity in agent instructions, system prompt engineering'
Your specific sub-task is: 'Consolidate and refine the list of Task-Agnostic Steps (TAS) from GPTASe, TASe, and uTASe. Structure these TAS into a logical workflow for developing a simple TODO app. Engineer system prompts for each agent based on their roles and the defined TAS.'

The team's roles are:
    {'reasoning': "The initial step is to break down the high-level goal 'Create a simple TODO app' into smaller, actionable Task-Agnostic Steps (TAS). This requires the expertise of the Task-Agnostic Step (TAS) extractors: GPTASe, TASe, and uTASe. Their combined efforts will ensure a comprehensive list of foundational steps. Lyra, the Prompt Engineer, will then be responsible for structuring these TAS into a coherent workflow and refining the prompts for the other agents. Aurora, the Designer, will focus on the visual and UI aspects, while Kodax, the Engineer, will handle the implementation. The plan is structured iteratively, starting with task extraction and prompt engineering, followed by design and implementation.", 'roles': [{'title': 'Task-Agnostic Step (TAS) extractor', 'description': "Identifies and extracts each 'Task Agnostic Step' (TAS) towards the high-level goal."}, {'title': 'Prompt Engineer', 'description': 'Structures workflows and ensures clarity in agent instructions, system prompt engineering.'}, {'title': 'Designer', 'description': 'Generates aesthetic layouts, color palettes, typography, and UI flows, ensuring accessibility and visual balance.'}, {'title': 'Engineer', 'description': 'Implements designs into clean, modular, and performant code, focusing on responsive design and accessibility.'}], 'tasks': [{'task_id': 'T1', 'task': 'Identify and extract all Task-Agnostic Steps (TAS) required to create a simple TODO app.', 'role': 'Task-Agnostic Step (TAS) extractor', 'name': 'GPTASe', 'requires': []}, {'task_id': 'T2', 'task': 'Identify and extract all Task-Agnostic Steps (TAS) required to create a simple TODO app.', 'role': 'Task-Agnostic Step (TAS) extractor', 'name': 'TASe', 'requires': []}, {'task_id': 'T3', 'task': 'Identify and extract all Task-Agnostic Steps (TAS) required to create a simple TODO app.', 'role': 'Task-Agnostic Step (TAS) extractor', 'name': 'uTASe', 'requires': []}, {'task_id': 'T4', 'task': 'Consolidate and refine the list of Task-Agnostic Steps (TAS) from GPTASe, TASe, and uTASe. Structure these TAS into a logical workflow for developing a simple TODO app. Engineer system prompts for each agent based on their roles and the defined TAS.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['T1', 'T2', 'T3']}, {'task_id': 'T5', 'task': 'Based on the refined TAS and workflow from Lyra, generate aesthetic layouts, color palettes, typography, and UI flows for the simple TODO app, ensuring accessibility and visual balance.', 'role': 'Designer', 'name': 'Aurora', 'requires': ['T4']}, {'task_id': 'T6', 'task': 'Based on the refined TAS, workflow, and design from Lyra and Aurora, implement the simple TODO app into clean, modular, and performant code, focusing on responsive design and accessibility.', 'role': 'Engineer', 'name': 'Kodax', 'requires': ['T4', 'T5']}]}

Please use the following outputs from the other agents as your input:

Artifact from 1__step_0_GPTASe_result.txt (Task-Agnostic Step (TAS) extractor)[T1]:
{
  "reasoning": "The user wants to identify Task-Agnostic Steps (TAS) for creating a simple TODO app. I need to break down this objective into abstract, domain-neutral actions. These steps should represent the fundamental processes involved in any project, not just app development. I will focus on the lifecycle of a project from conception to completion, ensuring each step is general enough to apply broadly.",
  "output": "[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"name\": \"Define Objective\",\n    \"description\": \"Clearly articulate the primary goal and desired outcome of the endeavor, ensuring it is understandable and measurable.\",\n    \"category\": \"Init\",\n    \"purpose\": \"Establishes a clear direction and scope for the project, preventing scope creep and ensuring focus.\",\n    \"keywords\": [\n      \"goal\",\n      \"objective\",\n      \"scope\",\n      \"definition\"\n    ],\n    \"applicability_notes\": \"Essential for any project, regardless of domain, to establish a clear starting point and success criteria.\",\n    \"examples_of_usage\": [\n      \"Define the goal of a marketing campaign.\",\n      \"Establish the purpose of a research study.\",\n      \"Articulate the desired outcome for a software feature.\"\n    ],\n    \"typical_inputs\": [\n      \"High-level idea\",\n      \"Problem statement\"\n    ],\n    \"typical_outputs\": [\n      \"Clearly defined objective statement\"\n    ]\n  },\n  {\n    \"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef0\",\n    \"name\": \"Identify Requirements\",\n    \"description\": \"Determine the necessary features, functionalities, constraints, and conditions that the solution must meet to achieve the objective.\",\n    \"category\": \"Analysis\",\n    \"purpose\": \"Ensures that the final product or solution addresses all necessary aspects and user needs.\",\n    \"keywords\": [\n      \"requirements\",\n      \"features\",\n      \"constraints\",\n      \"specifications\"\n    ],\n    \"applicability_notes\": \"Crucial for projects where specific outputs or behaviors are expected, such as software, product development, or process improvement.\",\n    \"examples_of_usage\": [\n      \"List features for a new mobile application.\",\n      \"Define performance criteria for a manufacturing process.\",\n      \"Outline the desired user experience for a service.\"\n    ],\n    \"typical_inputs\": [\n      \"Defined objective\",\n      \"User feedback\",\n      \"Stakeholder input\"\n    ],\n    \"typical_outputs\": [\n      \"List of functional and non-functional requirements\"\n    ]\n  },\n  {\n    \"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef01\",\n    \"name\": \"Plan Execution Strategy\",\n    \"description\": \"Outline the sequence of actions, resource allocation, and timeline required to achieve the defined objective and requirements.\",\n    \"category\": \"Planning\",\n    \"purpose\": \"Provides a roadmap for project execution, enabling efficient resource management and progress tracking.\",\n    \"keywords\": [\n      \"planning\",\n      \"strategy\",\n      \"roadmap\",\n      \"timeline\",\n      \"resources\"\n    ],\n    \"applicability_notes\": \"Applicable to any project requiring coordination and management of tasks, resources, and time.\",\n    \"examples_of_usage\": [\n      \"Develop a project plan for a construction project.\",\n      \"Create a go-to-market strategy for a new product.\",\n      \"Outline the steps for organizing a large event.\"\n    ],\n    \"typical_inputs\": [\n      \"Defined objective\",\n      \"Identified requirements\",\n      \"Available resources\"\n    ],\n    \"typical_outputs\": [\n      \"Project plan\",\n      \"Schedule\",\n      \"Resource allocation\"\n    ]\n  },\n  {\n    \"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef012\",\n    \"name\": \"Develop Solution Components\",\n    \"description\": \"Create the individual parts or modules that will form the complete solution, adhering to the defined requirements and design.\",\n    \"category\": \"Execution\",\n    \"purpose\": \"Builds the foundational elements of the solution that will eventually be integrated.\",\n    \"keywords\": [\n      \"development\",\n      \"implementation\",\n      \"creation\",\n      \"building\"\n    ],\n    \"applicability_notes\": \"Relevant in any context where a tangible solution or product is being constructed from its constituent parts.\",\n    \"examples_of_usage\": [\n      \"Write code for software modules.\",\n      \"Manufacture parts for a physical product.\",\n      \"Draft content for a publication.\"\n    ],\n    \"typical_inputs\": [\n      \"Design specifications\",\n      \"Technical requirements\",\n      \"Component requirements\"\n    ],\n    \"typical_outputs\": [\n      \"Developed software modules\",\n      \"Manufactured parts\",\n      \"Drafted content\"\n    ]\n  },\n  {\n    \"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef0123\",\n    \"name\": \"Integrate Solution Components\",\n    \"description\": \"Combine the independently developed solution components into a cohesive and functional whole.\",\n    \"category\": \"Execution\",\n    \"purpose\": \"Assembles the individual pieces into a working system or product.\",\n    \"keywords\": [\n      \"integration\",\n      \"assembly\",\n      \"combination\",\n      \"system\"\n    ],\n    \"applicability_notes\": \"Essential for projects involving multiple parts or modules that need to work together seamlessly.\",\n    \"examples_of_usage\": [\n      \"Combine different software modules into an application.\",\n      \"Assemble manufactured parts into a final product.\",\n      \"Merge different sections of a document.\"\n    ],\n    \"typical_inputs\": [\n      \"Developed solution components\",\n      \"Integration plan\"\n    ],\n    \"typical_outputs\": [\n      \"Integrated system\",\n      \"Assembled product\"\n    ]\n  },\n  {\n    \"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef01234\",\n    \"name\": \"Test Solution\",\n    \"description\": \"Verify that the integrated solution meets the defined requirements, functions as expected, and is free from defects.\",\n    \"category\": \"Review\",\n    \"purpose\": \"Ensures the quality, reliability, and correctness of the final solution before deployment or delivery.\",\n    \"keywords\": [\n      \"testing\",\n      \"verification\",\n      \"validation\",\n      \"quality assurance\"\n    ],\n    \"applicability_notes\": \"A critical step in any development or creation process to ensure the output meets standards and performs correctly.\",\n    \"examples_of_usage\": [\n      \"Perform unit tests on software code.\",\n      \"Conduct user acceptance testing for a new feature.\",\n      \"Test the performance of a machine.\"\n    ],\n    \"typical_inputs\": [\n      \"Integrated solution\",\n      \"Test cases\",\n      \"Requirements documentation\"\n    ],\n    \"typical_outputs\": [\n      \"Test results\",\n      \"Bug reports\",\n      \"Pass/fail status\"\n    ]\n  },\n  {\n    \"id\": \"a7b8c9d0-e1f2-3456-7890-abcdef012345\",\n    \"name\": \"Deploy Solution\",\n    \"description\": \"Make the validated solution available for its intended users or environment.\",\n    \"category\": \"Execution\",\n    \"purpose\": \"Delivers the completed solution to its target audience or operational setting.\",\n    \"keywords\": [\n      \"deployment\",\n      \"release\",\n      \"launch\",\n      \"distribution\"\n    ],\n    \"applicability_notes\": \"The final step in delivering a product or service, applicable across various industries and project types.\",\n    \"examples_of_usage\": [\n      \"Deploy software to production servers.\",\n      \"Launch a marketing campaign.\",\n      \"Distribute a physical product to retailers.\"\n    ],\n    \"typical_inputs\": [\n      \"Tested solution\",\n      \"Deployment plan\",\n      \"Target environment\"\n    ],\n    \"typical_outputs\": [\n      \"Live solution\",\n      \"Deployed product\"\n    ]\n  },\n  {\n    \"id\": \"b8c9d0e1-f2a3-4567-890a-bcdef0123456\",\n    \"name\": \"Monitor and Maintain\",\n    \"description\": \"Observe the deployed solution's performance, address any issues that arise, and make necessary updates or improvements over time.\",\n    \"category\": \"Refactoring\",\n    \"purpose\": \"Ensures the long-term viability, effectiveness, and relevance of the solution.\",\n    \"keywords\": [\n      \"monitoring\",\n      \"maintenance\",\n      \"support\",\n      \"updates\",\n      \"operations\"\n    ],\n    \"applicability_notes\": \"Essential for any solution that remains in use after initial deployment, ensuring continued value and functionality.\",\n    \"examples_of_usage\": [\n      \"Monitor server performance and apply patches.\",\n      \"Provide customer support for a product.\",\n      \"Update software with new features based on user feedback.\"\n    ],\n    \"typical_inputs\": [\n      \"Deployed solution\",\n      \"Performance metrics\",\n      \"User feedback\",\n      \"Issue reports\"\n    ],\n    \"typical_outputs\": [\n      \"Performance reports\",\n      \"Updated solution\",\n      \"Resolved issues\"\n    ]\n  }\n]",
  "files": []
}

---

Artifact from 1__step_1_TASe_result.txt (Task-Agnostic Step (TAS) extractor)[T2]:
{
  "reasoning": "The user wants to identify and extract Task-Agnostic Steps (TAS) for the high-level goal 'Create a simple TODO app'. I need to break down this goal into fundamental, reusable, and abstract actions, ensuring each step adheres to the TAS principles and the provided JSON schema. I will focus on the core actions involved in software development and feature creation, abstracting away any domain-specific details of a 'TODO app' itself to make the steps applicable to a wider range of projects.",
  "output": "[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"name\": \"Define Requirements\",\n    \"description\": \"Clearly articulate and document the functional and non-functional requirements for the project. This involves understanding the core problem to be solved and defining the scope, features, and constraints.\",\n    \"category\": \"Analysis\",\n    \"purpose\": \"Establish a clear understanding of what needs to be built.\",\n    \"keywords\": [\n      \"requirements gathering\",\n      \"scope definition\",\n      \"functional analysis\",\n      \"non-functional analysis\"\n    ],\n    \"applicability_notes\": \"This step is crucial for any project, regardless of domain. It sets the foundation for all subsequent development phases.\",\n    \"examples_of_usage\": [\n      \"Gathering user needs for a new mobile application.\",\n      \"Documenting business rules for an enterprise system.\",\n      \"Outlining the features for a web service.\"\n    ],\n    \"typical_inputs\": [\n      \"High-level goal statement\",\n      \"Stakeholder input\",\n      \"Existing system documentation\"\n    ],\n    \"typical_outputs\": [\n      \"Requirements document\",\n      \"User stories\",\n      \"Feature list\"\n    ]\n  },\n  {\n    \"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef0\",\n    \"name\": \"Design System Architecture\",\n    \"description\": \"Plan the overall structure and organization of the system. This includes defining components, their interactions, data flow, and technology stack choices.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Create a blueprint for the system's structure.\",\n    \"keywords\": [\n      \"architecture design\",\n      \"system planning\",\n      \"component definition\",\n      \"technology selection\"\n    ],\n    \"applicability_notes\": \"Applies to software, hardware, and even organizational systems. The level of detail varies based on project complexity.\",\n    \"examples_of_usage\": [\n      \"Choosing the right database for a web application.\",\n      \"Defining the microservices for a distributed system.\",\n      \"Planning the network infrastructure for a new office.\"\n    ],\n    \"typical_inputs\": [\n      \"Defined Requirements\",\n      \"Constraints (budget, time, resources)\",\n      \"Existing architectural patterns\"\n    ],\n    \"typical_outputs\": [\n      \"Architecture diagrams\",\n      \"Technology stack document\",\n      \"Component specifications\"\n    ]\n  },\n  {\n    \"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef01\",\n    \"name\": \"Design User Interface\",\n    \"description\": \"Create the visual layout, interactive elements, and overall user experience of the application. This involves wireframing, prototyping, and defining visual design principles.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Define how users will interact with the system.\",\n    \"keywords\": [\n      \"UI design\",\n      \"UX design\",\n      \"wireframing\",\n      \"prototyping\",\n      \"visual design\"\n    ],\n    \"applicability_notes\": \"Essential for any system with a human interface, from software to physical products.\",\n    \"examples_of_usage\": [\n      \"Designing the screens for a mobile app.\",\n      \"Creating the dashboard layout for a web application.\",\n      \"Developing the control panel for a device.\"\n    ],\n    \"typical_inputs\": [\n      \"Defined Requirements\",\n      \"User personas\",\n      \"Branding guidelines\"\n    ],\n    \"typical_outputs\": [\n      \"Wireframes\",\n      \"Mockups\",\n      \"Prototypes\",\n      \"Style guides\"\n    ]\n  },\n  {\n    \"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef012\",\n    \"name\": \"Develop Core Functionality\",\n    \"description\": \"Write the underlying code and logic that powers the application's primary features. This involves translating design and requirements into functional software components.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the essential features of the application.\",\n    \"keywords\": [\n      \"coding\",\n      \"software development\",\n      \"feature implementation\",\n      \"logic programming\"\n    ],\n    \"applicability_notes\": \"The core of software creation. The complexity and specific techniques vary greatly with the project.\",\n    \"examples_of_usage\": [\n      \"Implementing user authentication.\",\n      \"Developing the data processing logic.\",\n      \"Creating the algorithms for a simulation.\"\n    ],\n    \"typical_inputs\": [\n      \"Detailed design specifications\",\n      \"API definitions\",\n      \"Requirements documentation\"\n    ],\n    \"typical_outputs\": [\n      \"Functional code modules\",\n      \"Integrated components\",\n      \"Working features\"\n    ]\n  },\n  {\n    \"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef0123\",\n    \"name\": \"Implement User Interface\",\n    \"description\": \"Translate the designed user interface into actual, interactive code. This involves front-end development to create the visual elements and user interactions as specified.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the user-facing part of the application.\",\n    \"keywords\": [\n      \"front-end development\",\n      \"UI implementation\",\n      \"component coding\",\n      \"layout implementation\"\n    ],\n    \"applicability_notes\": \"Crucial for any application intended for user interaction. Ensures the visual design is realized.\",\n    \"examples_of_usage\": [\n      \"Building the HTML, CSS, and JavaScript for a web page.\",\n      \"Developing the native UI components for a mobile app.\",\n      \"Integrating UI elements with backend services.\"\n    ],\n    \"typical_inputs\": [\n      \"UI/UX designs (wireframes, mockups, prototypes)\",\n      \"Style guides\",\n      \"Component specifications\"\n    ],\n    \"typical_outputs\": [\n      \"Interactive UI components\",\n      \"Rendered application screens\",\n      \"Responsive layouts\"\n    ]\n  },\n  {\n    \"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef01234\",\n    \"name\": \"Integrate Components\",\n    \"description\": \"Connect different modules, services, and components of the system to work together seamlessly. This involves ensuring data flows correctly between parts and that interactions are functional.\",\n    \"category\": \"Integration\",\n    \"purpose\": \"Ensure all parts of the system work together.\",\n    \"keywords\": [\n      \"system integration\",\n      \"component connection\",\n      \"API integration\",\n      \"data flow management\"\n    ],\n    \"applicability_notes\": \"A critical step in most complex projects, ensuring disparate parts form a cohesive whole.\",\n    \"examples_of_usage\": [\n      \"Connecting a front-end application to a back-end API.\",\n      \"Integrating third-party services into an existing platform.\",\n      \"Ensuring different microservices communicate effectively.\"\n    ],\n    \"typical_inputs\": [\n      \"Developed components/modules\",\n      \"API documentation\",\n      \"Integration protocols\"\n    ],\n    \"typical_outputs\": [\n      \"Integrated system\",\n      \"Working end-to-end features\",\n      \"Data synchronization\"\n    ]\n  },\n  {\n    \"id\": \"a7b8c9d0-e1f2-3456-7890-abcdef012345\",\n    \"name\": \"Test System\",\n    \"description\": \"Verify that the system functions as expected and meets all specified requirements. This includes various levels of testing, such as unit, integration, system, and user acceptance testing.\",\n    \"category\": \"Testing\",\n    \"purpose\": \"Validate system correctness and quality.\",\n    \"keywords\": [\n      \"testing\",\n      \"quality assurance\",\n      \"validation\",\n      \"bug fixing\"\n    ],\n    \"applicability_notes\": \"Fundamental to delivering reliable software and products.\",\n    \"examples_of_usage\": [\n      \"Running unit tests on individual functions.\",\n      \"Performing end-to-end tests on a complete application.\",\n      \"Conducting performance and security testing.\"\n    ],\n    \"typical_inputs\": [\n      \"Developed system/components\",\n      \"Test cases\",\n      \"Requirements document\"\n    ],\n    \"typical_outputs\": [\n      \"Test reports\",\n      \"Bug reports\",\n      \"Validated system\"\n    ]\n  },\n  {\n    \"id\": \"b8c9d0e1-f2a3-4567-890a-bcdef0123456\",\n    \"name\": \"Deploy System\",\n    \"description\": \"Make the system available for use in its target environment. This involves packaging, configuration, and release management processes.\",\n    \"category\": \"Deployment\",\n    \"purpose\": \"Release the system to users or the target environment.\",\n    \"keywords\": [\n      \"deployment\",\n      \"release management\",\n      \"environment setup\",\n      \"go-live\"\n    ],\n    \"applicability_notes\": \"The final stage of making a system operational.\",\n    \"examples_of_usage\": [\n      \"Deploying a web application to a production server.\",\n      \"Releasing a mobile app to an app store.\",\n      \"Setting up a new software instance for a client.\"\n    ],\n    \"typical_inputs\": [\n      \"Tested and validated system\",\n      \"Deployment scripts/configurations\",\n      \"Target environment details\"\n    ],\n    \"typical_outputs\": [\n      \"Live system\",\n      \"Deployment logs\",\n      \"Operational environment\"\n    ]\n  },\n  {\n    \"id\": \"c9d0e1f2-a3b4-5678-90ab-cdef01234567\",\n    \"name\": \"Monitor and Maintain\",\n    \"description\": \"Continuously observe the system's performance, identify issues, and perform necessary updates or fixes after deployment. This ensures ongoing stability and functionality.\",\n    \"category\": \"Maintenance\",\n    \"purpose\": \"Ensure long-term system health and performance.\",\n    \"keywords\": [\n      \"monitoring\",\n      \"maintenance\",\n      \"updates\",\n      \"bug fixing\",\n      \"performance tuning\"\n    ],\n    \"applicability_notes\": \"An ongoing process essential for any operational system.\",\n    \"examples_of_usage\": [\n      \"Tracking server performance and uptime.\",\n      \"Applying security patches to software.\",\n      \"Responding to user-reported issues.\"\n    ],\n    \"typical_inputs\": [\n      \"Live system\",\n      \"Monitoring tools/dashboards\",\n      \"User feedback\",\n      \"Performance metrics\"\n    ],\n    \"typical_outputs\": [\n      \"System updates/patches\",\n      \"Performance reports\",\n      \"Resolved issues\"\n    ]\n  }\n]",
  "files": [{
    "name": "tas_extraction.json",
    "content": "[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"name\": \"Define Requirements\",\n    \"description\": \"Clearly articulate and document the functional and non-functional requirements for the project. This involves understanding the core problem to be solved and defining the scope, features, and constraints.\",\n    \"category\": \"Analysis\",\n    \"purpose\": \"Establish a clear understanding of what needs to be built.\",\n    \"keywords\": [\n      \"requirements gathering\",\n      \"scope definition\",\n      \"functional analysis\",\n      \"non-functional analysis\"\n    ],\n    \"applicability_notes\": \"This step is crucial for any project, regardless of domain. It sets the foundation for all subsequent development phases.\",\n    \"examples_of_usage\": [\n      \"Gathering user needs for a new mobile application.\",\n      \"Documenting business rules for an enterprise system.\",\n      \"Outlining the features for a web service.\"\n    ],\n    \"typical_inputs\": [\n      \"High-level goal statement\",\n      \"Stakeholder input\",\n      \"Existing system documentation\"\n    ],\n    \"typical_outputs\": [\n      \"Requirements document\",\n      \"User stories\",\n      \"Feature list\"\n    ]\n  },\n  {\n    \"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef0\",\n    \"name\": \"Design System Architecture\",\n    \"description\": \"Plan the overall structure and organization of the system. This includes defining components, their interactions, data flow, and technology stack choices.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Create a blueprint for the system's structure.\",\n    \"keywords\": [\n      \"architecture design\",\n      \"system planning\",\n      \"component definition\",\n      \"technology selection\"\n    ],\n    \"applicability_notes\": \"Applies to software, hardware, and even organizational systems. The level of detail varies based on project complexity.\",\n    \"examples_of_usage\": [\n      \"Choosing the right database for a web application.\",\n      \"Defining the microservices for a distributed system.\",\n      \"Planning the network infrastructure for a new office.\"\n    ],\n    \"typical_inputs\": [\n      \"Defined Requirements\",\n      \"Constraints (budget, time, resources)\",\n      \"Existing architectural patterns\"\n    ],\n    \"typical_outputs\": [\n      \"Architecture diagrams\",\n      \"Technology stack document\",\n      \"Component specifications\"\n    ]\n  },\n  {\n    \"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef01\",\n    \"name\": \"Design User Interface\",\n    \"description\": \"Create the visual layout, interactive elements, and overall user experience of the application. This involves wireframing, prototyping, and defining visual design principles.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Define how users will interact with the system.\",\n    \"keywords\": [\n      \"UI design\",\n      \"UX design\",\n      \"wireframing\",\n      \"prototyping\",\n      \"visual design\"\n    ],\n    \"applicability_notes\": \"Essential for any system with a human interface, from software to physical products.\",\n    \"examples_of_usage\": [\n      \"Designing the screens for a mobile app.\",\n      \"Creating the dashboard layout for a web application.\",\n      \"Developing the control panel for a device.\"\n    ],\n    \"typical_inputs\": [\n      \"Defined Requirements\",\n      \"User personas\",\n      \"Branding guidelines\"\n    ],\n    \"typical_outputs\": [\n      \"Wireframes\",\n      \"Mockups\",\n      \"Prototypes\",\n      \"Style guides\"\n    ]\n  },\n  {\n    \"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef012\",\n    \"name\": \"Develop Core Functionality\",\n    \"description\": \"Write the underlying code and logic that powers the application's primary features. This involves translating design and requirements into functional software components.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the essential features of the application.\",\n    \"keywords\": [\n      \"coding\",\n      \"software development\",\n      \"feature implementation\",\n      \"logic programming\"\n    ],\n    \"applicability_notes\": \"The core of software creation. The complexity and specific techniques vary greatly with the project.\",\n    \"examples_of_usage\": [\n      \"Implementing user authentication.\",\n      \"Developing the data processing logic.\",\n      \"Creating the algorithms for a simulation.\"\n    ],\n    \"typical_inputs\": [\n      \"Detailed design specifications\",\n      \"API definitions\",\n      \"Requirements documentation\"\n    ],\n    \"typical_outputs\": [\n      \"Functional code modules\",\n      \"Integrated components\",\n      \"Working features\"\n    ]\n  },\n  {\n    \"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef0123\",\n    \"name\": \"Implement User Interface\",\n    \"description\": \"Translate the designed user interface into actual, interactive code. This involves front-end development to create the visual elements and user interactions as specified.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the user-facing part of the application.\",\n    \"keywords\": [\n      \"front-end development\",\n      \"UI implementation\",\n      \"component coding\",\n      \"layout implementation\"\n    ],\n    \"applicability_notes\": \"Crucial for any application intended for user interaction. Ensures the visual design is realized.\",\n    \"examples_of_usage\": [\n      \"Building the HTML, CSS, and JavaScript for a web page.\",\n      \"Developing the native UI components for a mobile app.\",\n      \"Integrating UI elements with backend services.\"\n    ],\n    \"typical_inputs\": [\n      \"UI/UX designs (wireframes, mockups, prototypes)\",\n      \"Style guides\",\n      \"Component specifications\"\n    ],\n    \"typical_outputs\": [\n      \"Interactive UI components\",\n      \"Rendered application screens\",\n      \"Responsive layouts\"\n    ]\n  },\n  {\n    \"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef01234\",\n    \"name\": \"Integrate Components\",\n    \"description\": \"Connect different modules, services, and components of the system to work together seamlessly. This involves ensuring data flows correctly between parts and that interactions are functional.\",\n    \"category\": \"Integration\",\n    \"purpose\": \"Ensure all parts of the system work together.\",\n    \"keywords\": [\n      \"system integration\",\n      \"component connection\",\n      \"API integration\",\n      \"data flow management\"\n    ],\n    \"applicability_notes\": \"A critical step in most complex projects, ensuring disparate parts form a cohesive whole.\",\n    \"examples_of_usage\": [\n      \"Connecting a front-end application to a back-end API.\",\n      \"Integrating third-party services into an existing platform.\",\n      \"Ensuring different microservices communicate effectively.\"\n    ],\n    \"typical_inputs\": [\n      \"Developed components/modules\",\n      \"API documentation\",\n      \"Integration protocols\"\n    ],\n    \"typical_outputs\": [\n      \"Integrated system\",\n      \"Working end-to-end features\",\n      \"Data synchronization\"\n    ]\n  },\n  {\n    \"id\": \"a7b8c9d0-e1f2-3456-7890-abcdef012345\",\n    \"name\": \"Test System\",\n    \"description\": \"Verify that the system functions as expected and meets all specified requirements. This includes various levels of testing, such as unit, integration, system, and user acceptance testing.\",\n    \"category\": \"Testing\",\n    \"purpose\": \"Validate system correctness and quality.\",\n    \"keywords\": [\n      \"testing\",\n      \"quality assurance\",\n      \"validation\",\n      \"bug fixing\"\n    ],\n    \"applicability_notes\": \"Fundamental to delivering reliable software and products.\",\n    \"examples_of_usage\": [\n      \"Running unit tests on individual functions.\",\n      \"Performing end-to-end tests on a complete application.\",\n      \"Conducting performance and security testing.\"\n    ],\n    \"typical_inputs\": [\n      \"Developed system/components\",\n      \"Test cases\",\n      \"Requirements document\"\n    ],\n    \"typical_outputs\": [\n      \"Test reports\",\n      \"Bug reports\",\n      \"Validated system\"\n    ]\n  },\n  {\n    \"id\": \"b8c9d0e1-f2a3-4567-890a-bcdef0123456\",\n    \"name\": \"Deploy System\",\n    \"description\": \"Make the system available for use in its target environment. This involves packaging, configuration, and release management processes.\",\n    \"category\": \"Deployment\",\n    \"purpose\": \"Release the system to users or the target environment.\",\n    \"keywords\": [\n      \"deployment\",\n      \"release management\",\n      \"environment setup\",\n      \"go-live\"\n    ],\n    \"applicability_notes\": \"The final stage of making a system operational.\",\n    \"examples_of_usage\": [\n      \"Deploying a web application to a production server.\",\n      \"Releasing a mobile app to an app store.\",\n      \"Setting up a new software instance for a client.\"\n    ],\n    \"typical_inputs\": [\n      \"Tested and validated system\",\n      \"Deployment scripts/configurations\",\n      \"Target environment details\"\n    ],\n    \"typical_outputs\": [\n      \"Live system\",\n      \"Deployment logs\",\n      \"Operational environment\"\n    ]\n  },\n  {\n    \"id\": \"c9d0e1f2-a3b4-5678-90ab-cdef01234567\",\n    \"name\": \"Monitor and Maintain\",\n    \"description\": \"Continuously observe the system's performance, identify issues, and perform necessary updates or fixes after deployment. This ensures ongoing stability and functionality.\",\n    \"category\": \"Maintenance\",\n    \"purpose\": \"Ensure long-term system health and performance.\",\n    \"keywords\": [\n      \"monitoring\",\n      \"maintenance\",\n      \"updates\",\n      \"bug fixing\",\n      \"performance tuning\"\n    ],\n    \"applicability_notes\": \"An ongoing process essential for any operational system.\",\n    \"examples_of_usage\": [\n      \"Tracking server performance and uptime.\",\n      \"Applying security patches to software.\",\n      \"Responding to user-reported issues.\"\n    ],\n    \"typical_inputs\": [\n      \"Live system\",\n      \"Monitoring tools/dashboards\",\n      \"User feedback\",\n      \"Performance metrics\"\n    ],\n    \"typical_outputs\": [\n      \"System updates/patches\",\n      \"Performance reports\",\n      \"Resolved issues\"\n    ]\n  }\n]"
  }]
}

---

Artifact from 1__step_2_uTASe_result.txt (Task-Agnostic Step (TAS) extractor)[T3]:
{
  "reasoning": "The user wants to extract Task-Agnostic Steps (TAS) for creating a simple TODO app. I need to break down this high-level goal into fundamental, reusable actions that can be applied to many different types of projects, not just a TODO app. I will focus on the common lifecycle of software development: planning, design, implementation, testing, and deployment/maintenance. Each step should be general enough to be considered 'task-agnostic'.",
  "output": "```json\n[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"name\": \"Define Project Scope\",\n    \"description\": \"Clearly articulate the objectives, features, and constraints of the project. This involves understanding what the final product should achieve and what its boundaries are.\",\n    \"category\": \"Init\",\n    \"purpose\": \"Establish the foundational understanding and boundaries of the project.\",\n    \"keywords\": [\"scope\", \"requirements\", \"definition\", \"planning\", \"objective\"],\n    \"applicability_notes\": \"This step is crucial for any project, regardless of its domain or complexity, to ensure alignment and prevent scope creep.\",\n    \"examples_of_usage\": [\n      \"Defining the core features of a mobile app.\",\n      \"Outlining the research questions for a scientific study.\",\n      \"Setting the goals for a marketing campaign.\"\n    ],\n    \"typical_inputs\": [\"High-level goal\", \"Stakeholder needs\"],\n    \"typical_outputs\": [\"Project scope document\", \"Feature list\", \"Constraints definition\"]\n  },\n  {\n    \"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef1\",\n    \"name\": \"Design System Architecture\",\n    \"description\": \"Determine the overall structure and organization of the system. This includes choosing the technology stack, defining major components, and outlining their interactions.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Outline the technical blueprint for the system.\",\n    \"keywords\": [\"architecture\", \"design\", \"system structure\", \"technology stack\", \"components\"],\n    \"applicability_notes\": \"Applies to software, hardware, or even complex organizational systems. The level of detail varies based on project scale.\",\n    \"examples_of_usage\": [\n      \"Choosing between monolithic and microservices architecture for a web application.\",\n      \"Designing the data flow for an IoT device.\",\n      \"Structuring the modules of a desktop application.\"\n    ],\n    \"typical_inputs\": [\"Project scope\", \"Non-functional requirements\"],\n    \"typical_outputs\": [\"Architecture diagram\", \"Technology stack selection\", \"Component definitions\"]\n  },\n  {\n    \"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef12\",\n    \"name\": \"Develop User Interface (UI)\",\n    \"description\": \"Create the visual elements and interactive components that users will engage with. This includes layout, styling, and ensuring a user-friendly experience.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Build the user-facing part of the system.\",\n    \"keywords\": [\"UI\", \"user interface\", \"frontend\", \"design\", \"visuals\", \"interaction\"],\n    \"applicability_notes\": \"Essential for any product with a human user. Covers web, mobile, desktop, and even physical interfaces.\",\n    \"examples_of_usage\": [\n      \"Designing the screens and navigation for a mobile app.\",\n      \"Creating the layout and forms for a web portal.\",\n      \"Developing the control panel for a piece of machinery.\"\n    ],\n    \"typical_inputs\": [\"UI/UX requirements\", \"Branding guidelines\"],\n    \"typical_outputs\": [\"UI mockups\", \"Prototypes\", \"Frontend code components\"]\n  },\n  {\n    \"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef123\",\n    \"name\": \"Implement Core Logic\",\n    \"description\": \"Write the backend code and business logic that powers the application's functionality. This involves translating requirements into executable instructions.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the functional engine of the system.\",\n    \"keywords\": [\"backend\", \"logic\", \"implementation\", \"coding\", \"functionality\", \"business logic\"],\n    \"applicability_notes\": \"The core of any software development. It can also apply to implementing rules or processes in non-software contexts.\",\n    \"examples_of_usage\": [\n      \"Writing the algorithms for data processing.\",\n      \"Implementing the user authentication system.\",\n      \"Developing the calculation engine for a financial tool.\"\n    ],\n    \"typical_inputs\": [\"System architecture\", \"Detailed feature specifications\"],\n    \"typical_outputs\": [\"Backend code\", \"APIs\", \"Data models\"]\n  },\n  {\n    \"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef1234\",\n    \"name\": \"Integrate Components\",\n    \"description\": \"Connect different parts of the system (e.g., frontend and backend, external services) to work together seamlessly. This ensures data flows correctly and functions operate as expected.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Ensure all parts of the system communicate effectively.\",\n    \"keywords\": [\"integration\", \"connection\", \"APIs\", \"communication\", \"system assembly\"],\n    \"applicability_notes\": \"Critical for any system composed of multiple modules or services.\",\n    \"examples_of_usage\": [\n      \"Connecting a web frontend to a REST API.\",\n      \"Integrating a payment gateway into an e-commerce site.\",\n      \"Linking different microservices.\"\n    ],\n    \"typical_inputs\": [\"Developed components\", \"Interface specifications\"],\n    \"typical_outputs\": [\"Integrated system\", \"Working workflows\"]\n  },\n  {\n    \"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef12345\",\n    \"name\": \"Test System Functionality\",\n    \"description\": \"Verify that the system and its components function according to the specified requirements. This includes various levels of testing like unit, integration, and end-to-end tests.\",\n    \"category\": \"Testing\",\n    \"purpose\": \"Validate that the system works as intended.\",\n    \"keywords\": [\"testing\", \"quality assurance\", \"verification\", \"validation\", \"bug fixing\"],\n    \"applicability_notes\": \"An essential part of any development process to ensure reliability and correctness.\",\n    \"examples_of_usage\": [\n      \"Writing unit tests for individual functions.\",\n      \"Performing integration tests to check component interactions.\",\n      \"Conducting user acceptance testing (UAT).\"\n    ],\n    \"typical_inputs\": [\"Implemented system\", \"Test cases\", \"Requirements\"],\n    \"typical_outputs\": [\"Test reports\", \"Bug list\", \"Validated system\"]\n  },\n  {\n    \"id\": \"a7b8c9d0-e1f2-3456-7890-abcdef123456\",\n    \"name\": \"Deploy Application\",\n    \"description\": \"Make the application available for users in the target environment (e.g., production servers, app stores). This involves packaging, configuration, and release management.\",\n    \"category\": \"Deployment\",\n    \"purpose\": \"Release the system to its intended users.\",\n    \"keywords\": [\"deployment\", \"release\", \"production\", \"hosting\", \"distribution\"],\n    \"applicability_notes\": \"The final step in delivering a product or feature to its audience.\",\n    \"examples_of_usage\": [\n      \"Deploying a web application to a cloud server.\",\n      \"Publishing a mobile app to an app store.\",\n      \"Installing software on user machines.\"\n    ],\n    \"typical_inputs\": [\"Tested and validated system\", \"Deployment configuration\"],\n    \"typical_outputs\": [\"Live application\", \"Deployment logs\"]\n  },\n  {\n    \"id\": \"b8c9d0e1-f2a3-4567-8901-bcdef1234567\",\n    \"name\": \"Monitor and Maintain\",\n    \"description\": \"Continuously observe the application's performance, health, and user feedback post-deployment. Address issues, apply updates, and make improvements over time.\",\n    \"category\": \"Maintenance\",\n    \"purpose\": \"Ensure the system remains operational and relevant.\",\n    \"keywords\": [\"monitoring\", \"maintenance\", \"support\", \"updates\", \"operations\"],\n    \"applicability_notes\": \"An ongoing process for any live system to ensure long-term success.\",\n    \"examples_of_usage\": [\n      \"Tracking server performance and errors.\",\n      \"Applying security patches.\",\n      \"Responding to user support requests.\"\n    ],\n    \"typical_inputs\": [\"Live application\", \"Performance metrics\", \"User feedback\"],\n    \"typical_outputs\": [\"System updates\", \"Performance reports\", \"Resolved issues\"]\n  }\n]\n```",
  "files": [
    {
      "name": "task_agnostic_steps.json",
      "content": "[\n  {\n    \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"name\": \"Define Project Scope\",\n    \"description\": \"Clearly articulate the objectives, features, and constraints of the project. This involves understanding what the final product should achieve and what its boundaries are.\",\n    \"category\": \"Init\",\n    \"purpose\": \"Establish the foundational understanding and boundaries of the project.\",\n    \"keywords\": [\"scope\", \"requirements\", \"definition\", \"planning\", \"objective\"],\n    \"applicability_notes\": \"This step is crucial for any project, regardless of its domain or complexity, to ensure alignment and prevent scope creep.\",\n    \"examples_of_usage\": [\n      \"Defining the core features of a mobile app.\",\n      \"Outlining the research questions for a scientific study.\",\n      \"Setting the goals for a marketing campaign.\"\n    ],\n    \"typical_inputs\": [\"High-level goal\", \"Stakeholder needs\"],\n    \"typical_outputs\": [\"Project scope document\", \"Feature list\", \"Constraints definition\"]\n  },\n  {\n    \"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef1\",\n    \"name\": \"Design System Architecture\",\n    \"description\": \"Determine the overall structure and organization of the system. This includes choosing the technology stack, defining major components, and outlining their interactions.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Outline the technical blueprint for the system.\",\n    \"keywords\": [\"architecture\", \"design\", \"system structure\", \"technology stack\", \"components\"],\n    \"applicability_notes\": \"Applies to software, hardware, or even complex organizational systems. The level of detail varies based on project scale.\",\n    \"examples_of_usage\": [\n      \"Choosing between monolithic and microservices architecture for a web application.\",\n      \"Designing the data flow for an IoT device.\",\n      \"Structuring the modules of a desktop application.\"\n    ],\n    \"typical_inputs\": [\"Project scope\", \"Non-functional requirements\"],\n    \"typical_outputs\": [\"Architecture diagram\", \"Technology stack selection\", \"Component definitions\"]\n  },\n  {\n    \"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef12\",\n    \"name\": \"Develop User Interface (UI)\",\n    \"description\": \"Create the visual elements and interactive components that users will engage with. This includes layout, styling, and ensuring a user-friendly experience.\",\n    \"category\": \"Design\",\n    \"purpose\": \"Build the user-facing part of the system.\",\n    \"keywords\": [\"UI\", \"user interface\", \"frontend\", \"design\", \"visuals\", \"interaction\"],\n    \"applicability_notes\": \"Essential for any product with a human user. Covers web, mobile, desktop, and even physical interfaces.\",\n    \"examples_of_usage\": [\n      \"Designing the screens and navigation for a mobile app.\",\n      \"Creating the layout and forms for a web portal.\",\n      \"Developing the control panel for a piece of machinery.\"\n    ],\n    \"typical_inputs\": [\"UI/UX requirements\", \"Branding guidelines\"],\n    \"typical_outputs\": [\"UI mockups\", \"Prototypes\", \"Frontend code components\"]\n  },\n  {\n    \"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef123\",\n    \"name\": \"Implement Core Logic\",\n    \"description\": \"Write the backend code and business logic that powers the application's functionality. This involves translating requirements into executable instructions.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Build the functional engine of the system.\",\n    \"keywords\": [\"backend\", \"logic\", \"implementation\", \"coding\", \"functionality\", \"business logic\"],\n    \"applicability_notes\": \"The core of any software development. It can also apply to implementing rules or processes in non-software contexts.\",\n    \"examples_of_usage\": [\n      \"Writing the algorithms for data processing.\",\n      \"Implementing the user authentication system.\",\n      \"Developing the calculation engine for a financial tool.\"\n    ],\n    \"typical_inputs\": [\"System architecture\", \"Detailed feature specifications\"],\n    \"typical_outputs\": [\"Backend code\", \"APIs\", \"Data models\"]\n  },\n  {\n    \"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef1234\",\n    \"name\": \"Integrate Components\",\n    \"description\": \"Connect different parts of the system (e.g., frontend and backend, external services) to work together seamlessly. This ensures data flows correctly and functions operate as expected.\",\n    \"category\": \"Implementation\",\n    \"purpose\": \"Ensure all parts of the system communicate effectively.\",\n    \"keywords\": [\"integration\", \"connection\", \"APIs\", \"communication\", \"system assembly\"],\n    \"applicability_notes\": \"Critical for any system composed of multiple modules or services.\",\n    \"examples_of_usage\": [\n      \"Connecting a web frontend to a REST API.\",\n      \"Integrating a payment gateway into an e-commerce site.\",\n      \"Linking different microservices.\"\n    ],\n    \"typical_inputs\": [\"Developed components\", \"Interface specifications\"],\n    \"typical_outputs\": [\"Integrated system\", \"Working workflows\"]\n  },\n  {\n    \"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef12345\",\n    \"name\": \"Test System Functionality\",\n    \"description\": \"Verify that the system and its components function according to the specified requirements. This includes various levels of testing like unit, integration, and end-to-end tests.\",\n    \"category\": \"Testing\",\n    \"purpose\": \"Validate that the system works as intended.\",\n    \"keywords\": [\"testing\", \"quality assurance\", \"verification\", \"validation\", \"bug fixing\"],\n    \"applicability_notes\": \"An essential part of any development process to ensure reliability and correctness.\",\n    \"examples_of_usage\": [\n      \"Writing unit tests for individual functions.\",\n      \"Performing integration tests to check component interactions.\",\n      \"Conducting user acceptance testing (UAT).\"\n    ],\n    \"typical_inputs\": [\"Implemented system\", \"Test cases\", \"Requirements\"],\n    \"typical_outputs\": [\"Test reports\", \"Bug list\", \"Validated system\"]\n  },\n  {\n    \"id\": \"a7b8c9d0-e1f2-3456-7890-abcdef123456\",\n    \"name\": \"Deploy Application\",\n    \"description\": \"Make the application available for users in the target environment (e.g., production servers, app stores). This involves packaging, configuration, and release management.\",\n    \"category\": \"Deployment\",\n    \"purpose\": \"Release the system to its intended users.\",\n    \"keywords\": [\"deployment\", \"release\", \"production\", \"hosting\", \"distribution\"],\n    \"applicability_notes\": \"The final step in delivering a product or feature to its audience.\",\n    \"examples_of_usage\": [\n      \"Deploying a web application to a cloud server.\",\n      \"Publishing a mobile app to an app store.\",\n      \"Installing software on user machines.\"\n    ],\n    \"typical_inputs\": [\"Tested and validated system\", \"Deployment configuration\"],\n    \"typical_outputs\": [\"Live application\", \"Deployment logs\"]\n  },\n  {\n    \"id\": \"b8c9d0e1-f2a3-4567-8901-bcdef1234567\",\n    \"name\": \"Monitor and Maintain\",\n    \"description\": \"Continuously observe the application's performance, health, and user feedback post-deployment. Address issues, apply updates, and make improvements over time.\",\n    \"category\": \"Maintenance\",\n    \"purpose\": \"Ensure the system remains operational and relevant.\",\n    \"keywords\": [\"monitoring\", \"maintenance\", \"support\", \"updates\", \"operations\"],\n    \"applicability_notes\": \"An ongoing process for any live system to ensure long-term success.\",\n    \"examples_of_usage\": [\n      \"Tracking server performance and errors.\",\n      \"Applying security patches.\",\n      \"Responding to user support requests.\"\n    ],\n    \"typical_inputs\": [\"Live application\", \"Performance metrics\", \"User feedback\"],\n    \"typical_outputs\": [\"System updates\", \"Performance reports\", \"Resolved issues\"]\n  }\n]\n"
    }
  ]
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
The overall goal is: 'Weave a tool from two distinct sources: SYS and TEMPLATE source'

Your role's specific goal is: 'Identify and return each 'Task Agnostic Step' (TAS) towards the high-level goal.'
Your specific sub-task is: 'Identify and extract all Task-Agnostic Steps (TAS) required to achieve the high-level goal 'Weave a tool from two distinct sources: SYS and TEMPLATE source'.'

The team's roles are:
    {'reasoning': "The high-level goal is to 'Weave a tool from two distinct sources: SYS and TEMPLATE source'. This requires a structured approach involving identifying the core components, defining their interactions, and then implementing the tool. The plan will start with extracting task-agnostic steps (TAS) by the TAS extractors, followed by prompt engineering to define agent instructions, design the tool's interface and user experience, engineer the core logic, and finally, integrate and test the tool. The roles of Web Developer, Engineer, and Designer are crucial for the implementation phase, while Prompt Engineer and Coordinator ensure the process is well-defined and managed. The other roles (AI Tutor, Lyricist, Music Designer, Distribution and Promotion Agent) are not directly relevant to the stated high-level goal and will not be assigned tasks in this plan.", 'roles': [{'title': 'Task-Agnostic Step (TAS) extractor', 'description': "Identify and extract each 'Task Agnostic Step' (TAS) towards the high-level goal."}, {'title': 'Web Developer', 'description': 'Generate web development code (HTML, CSS, JavaScript, React) based on user requests, ensuring modern design principles, responsiveness, and functionality.'}, {'title': 'Prompt Engineer', 'description': 'Structure workflows and ensure clarity in agent instructions, system prompt engineering'}, {'title': 'Designer', 'description': 'Generate aesthetic layouts, color palettes, typography, and UI flows, ensuring accessibility and visual balance.'}, {'title': 'Engineer', 'description': 'Implement designs into clean, modular, and performant code, focusing on responsive design and accessibility.'}, {'title': 'Coordinator', 'description': 'Oversee the project, manage task assignments, and ensure smooth collaboration between team members.'}], 'tasks': [{'task_id': 'T1', 'task': "Identify and extract all Task-Agnostic Steps (TAS) required to achieve the high-level goal 'Weave a tool from two distinct sources: SYS and TEMPLATE source'.", 'role': 'Task-Agnostic Step (TAS) extractor', 'name': 'GPTASe', 'requires': []}, {'task_id': 'T2', 'task': "Identify and extract all Task-Agnostic Steps (TAS) required to achieve the high-level goal 'Weave a tool from two distinct sources: SYS and TEMPLATE source'.", 'role': 'Task-Agnostic Step (TAS) extractor', 'name': 'TASe', 'requires': []}, {'task_id': 'T3', 'task': "Identify and extract all Task-Agnostic Steps (TAS) required to achieve the high-level goal 'Weave a tool from two distinct sources: SYS and TEMPLATE source'.", 'role': 'Task-Agnostic Step (TAS) extractor', 'name': 'uTASe', 'requires': []}, {'task_id': 'T4', 'task': 'Consolidate and refine the extracted Task-Agnostic Steps (TAS) from GPTASe, TASe, and uTASe into a single, coherent list.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['T1', 'T2', 'T3']}, {'task_id': 'T5', 'task': 'Based on the refined TAS, engineer system prompts for each agent involved in the tool weaving process, ensuring clarity and alignment with their roles.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['T4']}, {'task_id': 'T6', 'task': 'Define the overall architecture and data flow for the tool, considering the SYS and TEMPLATE sources.', 'role': 'Engineer', 'name': 'Kodax', 'requires': ['T4']}, {'task_id': 'T7', 'task': 'Design the user interface (UI) and user experience (UX) for the tool, focusing on how users will interact with the SYS and TEMPLATE sources.', 'role': 'Designer', 'name': 'Aurora', 'requires': ['T4']}, {'task_id': 'T8', 'task': 'Develop the front-end components of the tool based on the UI/UX design, ensuring responsiveness and interactivity.', 'role': 'Web Developer', 'name': 'Qwen3-WebDev', 'requires': ['T7']}, {'task_id': 'T9', 'task': 'Implement the core logic for weaving the tool from the SYS and TEMPLATE sources, integrating with the front-end components.', 'role': 'Engineer', 'name': 'Kodax', 'requires': ['T6', 'T8']}, {'task_id': 'T10', 'task': "Integrate the SYS source into the tool's functionality.", 'role': 'Engineer', 'name': 'Kodax', 'requires': ['T9']}, {'task_id': 'T11', 'task': "Integrate the TEMPLATE source into the tool's functionality.", 'role': 'Engineer', 'name': 'Kodax', 'requires': ['T10']}, {'task_id': 'T12', 'task': 'Test the integrated tool to ensure it correctly weaves functionality from both SYS and TEMPLATE sources.', 'role': 'Engineer', 'name': 'Kodax', 'requires': ['T11']}, {'task_id': 'T13', 'task': 'Coordinate the overall execution of the plan, ensuring all tasks are completed in the correct order and facilitating communication between team members.', 'role': 'Coordinator', 'name': 'Fizz La Metta', 'requires': ['T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'T10', 'T11', 'T12']}]}

Please use the following outputs from the other agents as your input:

Artifact from 1__step_0_GPTASe_result.txt (Task-Agnostic Step (TAS) extractor)[T1]:
{
  "output": "The output will be a list of Task-Agnostic Steps (TAS) that are required to achieve the high-level goal of weaving a tool from two distinct sources: SYS and TEMPLATE source.",
  "files": [
    {
      "name": "task_agnostic_steps.json",
      "content": "[{\"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\", \"name\": \"Identify Source Components\", \"description\": \"Determine and catalog the distinct parts, functionalities, or data structures present in both the SYS and TEMPLATE sources.\", \"category\": \"Analysis\", \"purpose\": \"To understand the constituent elements of each source before integration, ensuring all necessary pieces are accounted for.\", \"keywords\": [\"source analysis\", \"component identification\", \"discovery\"], \"applicability_notes\": \"Relevant when combining or leveraging multiple existing systems, libraries, or data formats.\", \"examples_of_usage\": [\"Analyzing a legacy system and a new API for integration.\", \"Understanding a configuration file and a code library for a new feature.\"], \"typical_inputs\": [\"Description of SYS source\", \"Description of TEMPLATE source\"], \"typical_outputs\": [\"List of components in SYS source\", \"List of components in TEMPLATE source\"]}, {\"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef1\", \"name\": \"Define Integration Strategy\", \"description\": \"Outline the method and approach for combining the identified components from the SYS and TEMPLATE sources into a cohesive whole.\", \"category\": \"Planning\", \"purpose\": \"To establish a clear roadmap for how the two sources will be merged, minimizing conflicts and maximizing synergy.\", \"keywords\": [\"integration plan\", \"strategy\", \"combination approach\"], \"applicability_notes\": \"Essential for any project involving the merging of disparate systems or data.\", \"examples_of_usage\": [\"Planning how to integrate a microservice with an existing monolithic application.\", \"Deciding on the architecture for combining user data from two different platforms.\"], \"typical_inputs\": [\"List of components in SYS source\", \"List of components in TEMPLATE source\"], \"typical_outputs\": [\"Integration strategy document\", \"High-level architecture diagram\"]}, {\"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef12\", \"name\": \"Establish Data Mapping\", \"description\": \"Define how data elements or structures from the SYS source correspond to or will be transformed for use with the TEMPLATE source, and vice versa.\", \"category\": \"Planning\", \"purpose\": \"To ensure that information can flow correctly and meaningfully between the two sources during the weaving process.\", \"keywords\": [\"data mapping\", \"transformation rules\", \"schema alignment\"], \"applicability_notes\": \"Crucial when sources have different data formats or schemas that need to be reconciled.\", \"examples_of_usage\": [\"Mapping fields between a CSV file and a database table.\", \"Defining transformations for API data to fit a UI component.\"], \"typical_inputs\": [\"List of components in SYS source\", \"List of components in TEMPLATE source\", \"Integration strategy document\"], \"typical_outputs\": [\"Data mapping specifications\", \"Transformation logic definitions\"]}, {\"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef123\", \"name\": \"Develop Interface Logic\", \"description\": \"Create the mechanisms and code that allow the SYS and TEMPLATE sources to interact and exchange information as defined by the integration strategy and data mapping.\", \"category\": \"Execution\", \"purpose\": \"To build the connective tissue that enables the two sources to function together as a single tool.\", \"keywords\": [\"interface development\", \"interaction logic\", \"API implementation\"], \"applicability_notes\": \"Applicable when building bridges or communication layers between different software components or systems.\", \"examples_of_usage\": [\"Writing adapter code to connect two different libraries.\", \"Implementing an API endpoint to serve data from a database.\"], \"typical_inputs\": [\"Integration strategy document\", \"Data mapping specifications\"], \"typical_outputs\": [\"Interface code\", \"Interaction modules\"]}, {\"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef1234\", \"name\": \"Implement Core Weaving Functionality\", \"description\": \"Build the primary logic that combines elements from both SYS and TEMPLATE sources to form the new tool, utilizing the developed interface logic.\", \"category\": \"Execution\", \"purpose\": \"To construct the central functionality of the tool by merging the capabilities of the two distinct sources.\", \"keywords\": [\"core logic\", \"tool construction\", \"feature implementation\"], \"applicability_notes\": \"The central task in any project aiming to create something new by combining existing parts.\", \"examples_of_usage\": [\"Writing the main application logic that uses components from two different frameworks.\", \"Developing a feature that aggregates data from multiple external services.\"], \"typical_inputs\": [\"Interface code\", \"Interaction modules\", \"Data mapping specifications\"], \"typical_outputs\": [\"Core tool logic\", \"Integrated functionalities\"]}, {\"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef12345\", \"name\": \"Validate Integrated Tool\", \"description\": \"Test the newly woven tool to ensure it functions as intended, correctly incorporating elements from both SYS and TEMPLATE sources and meeting defined requirements.\", \"category\": \"Review\", \"purpose\": \"To verify the successful integration and functionality of the tool, ensuring it meets quality standards and objectives.\", \"keywords\": [\"testing\", \"validation\", \"quality assurance\"], \"applicability_notes\": \"A critical step in any development process to ensure the final product is reliable and correct.\", \"examples_of_usage\": [\"Performing unit tests on integrated components.\", \"Conducting end-to-end testing of a combined system.\"], \"typical_inputs\": [\"Core tool logic\", \"Test cases\", \"Requirements documentation\"], \"typical_outputs\": [\"Test results\", \"Bug reports\", \"Validated tool\"]}]"
    }
  ]
}

---

Artifact from 1__step_1_TASe_result.txt (Task-Agnostic Step (TAS) extractor)[T2]:
{
  "output": "The output is a JSON array containing Task-Agnostic Steps (TAS) identified for the goal 'Weave a tool from two distinct sources: SYS and TEMPLATE source'.",
  "files": [
    {
      "name": "task_agnostic_steps.json",
      "content": "[{\"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\", \"name\": \"Identify Source Components\", \"description\": \"Determine and catalog the distinct parts, functionalities, or data structures present in both the SYS and TEMPLATE sources.\", \"category\": \"Analysis\", \"purpose\": \"To understand the constituent elements of each source before integration, ensuring all necessary pieces are accounted for.\", \"keywords\": [\"source analysis\", \"component identification\", \"discovery\"], \"applicability_notes\": \"Relevant when combining or leveraging multiple existing systems, libraries, or data formats.\", \"examples_of_usage\": [\"Analyzing a legacy system and a new API for integration.\", \"Understanding a configuration file and a code library for a new feature.\"], \"typical_inputs\": [\"Description of SYS source\", \"Description of TEMPLATE source\"], \"typical_outputs\": [\"List of components in SYS source\", \"List of components in TEMPLATE source\"]}, {\"id\": \"b2c3d4e5-f6a7-8901-2345-67890abcdef1\", \"name\": \"Define Integration Strategy\", \"description\": \"Outline the method and approach for combining the identified components from the SYS and TEMPLATE sources into a cohesive whole.\", \"category\": \"Planning\", \"purpose\": \"To establish a clear roadmap for how the two sources will be merged, minimizing conflicts and maximizing synergy.\", \"keywords\": [\"integration plan\", \"strategy\", \"combination approach\"], \"applicability_notes\": \"Essential for any project involving the merging of disparate systems or data.\", \"examples_of_usage\": [\"Planning how to integrate a microservice with an existing monolithic application.\", \"Deciding on the architecture for combining user data from two different platforms.\"], \"typical_inputs\": [\"List of components in SYS source\", \"List of components in TEMPLATE source\"], \"typical_outputs\": [\"Integration strategy document\", \"High-level architecture diagram\"]}, {\"id\": \"c3d4e5f6-a7b8-9012-3456-7890abcdef12\", \"name\": \"Establish Data Mapping\", \"description\": \"Define how data elements or structures from the SYS source correspond to or will be transformed for use with the TEMPLATE source, and vice versa.\", \"category\": \"Planning\", \"purpose\": \"To ensure that information can flow correctly and meaningfully between the two sources during the weaving process.\", \"keywords\": [\"data mapping\", \"transformation rules\", \"schema alignment\"], \"applicability_notes\": \"Crucial when sources have different data formats or schemas that need to be reconciled.\", \"examples_of_usage\": [\"Mapping fields between a CSV file and a database table.\", \"Defining transformations for API data to fit a UI component.\"], \"typical_inputs\": [\"List of components in SYS source\", \"List of components in TEMPLATE source\", \"Integration strategy document\"], \"typical_outputs\": [\"Data mapping specifications\", \"Transformation logic definitions\"]}, {\"id\": \"d4e5f6a7-b8c9-0123-4567-890abcdef123\", \"name\": \"Develop Interface Logic\", \"description\": \"Create the mechanisms and code that allow the SYS and TEMPLATE sources to interact and exchange information as defined by the integration strategy and data mapping.\", \"category\": \"Execution\", \"purpose\": \"To build the connective tissue that enables the two sources to function together as a single tool.\", \"keywords\": [\"interface development\", \"interaction logic\", \"API implementation\"], \"applicability_notes\": \"Applicable when building bridges or communication layers between different software components or systems.\", \"examples_of_usage\": [\"Writing adapter code to connect two different libraries.\", \"Implementing an API endpoint to serve data from a database.\"], \"typical_inputs\": [\"Integration strategy document\", \"Data mapping specifications\"], \"typical_outputs\": [\"Interface code\", \"Interaction modules\"]}, {\"id\": \"e5f6a7b8-c9d0-1234-5678-90abcdef1234\", \"name\": \"Implement Core Weaving Functionality\", \"description\": \"Build the primary logic that combines elements from both SYS and TEMPLATE sources to form the new tool, utilizing the developed interface logic.\", \"category\": \"Execution\", \"purpose\": \"To construct the central functionality of the tool by merging the capabilities of the two distinct sources.\", \"keywords\": [\"core logic\", \"tool construction\", \"feature implementation\"], \"applicability_notes\": \"The central task in any project aiming to create something new by combining existing parts.\", \"examples_of_usage\": [\"Writing the main application logic that uses components from two different frameworks.\", \"Developing a feature that aggregates data from multiple external services.\"], \"typical_inputs\": [\"Interface code\", \"Interaction modules\", \"Data mapping specifications\"], \"typical_outputs\": [\"Core tool logic\", \"Integrated functionalities\"]}, {\"id\": \"f6a7b8c9-d0e1-2345-6789-0abcdef12345\", \"name\": \"Validate Integrated Tool\", \"description\": \"Test the newly woven tool to ensure it functions as intended, correctly incorporating elements from both SYS and TEMPLATE sources and meeting defined requirements.\", \"category\": \"Review\", \"purpose\": \"To verify the successful integration and functionality of the tool, ensuring it meets quality standards and objectives.\", \"keywords\": [\"testing\", \"validation\", \"quality assurance\"], \"applicability_notes\": \"A critical step in any development process to ensure the final product is reliable and correct.\", \"examples_of_usage\": [\"Performing unit tests on integrated components.\", \"Conducting end-to-end testing of a combined system.\"], \"typical_inputs\": [\"Core tool logic\", \"Test cases\", \"Requirements documentation\"], \"typical_outputs\": [\"Test results\", \"Bug reports\", \"Validated tool\"]}]"
    }
  ]
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
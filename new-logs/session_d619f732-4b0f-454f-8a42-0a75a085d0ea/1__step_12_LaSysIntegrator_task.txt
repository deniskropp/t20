The overall goal is: 'Python Script that loads itself and respawns services'

Your role's specific goal is: ''
Your specific sub-task is: 'Integrate the self-loading and service respawning components, ensuring seamless operation.'

The team's roles are:
    {'reasoning': 'The goal is to create a Python script that can load itself and respawn services. This requires a systematic approach, starting with understanding the core requirements, designing the system architecture, implementing the script, and ensuring its reliability through testing and refinement. The roles provided are diverse, and their tasks should reflect a logical progression from conceptualization to execution and maintenance. The plan is structured to first define the problem and requirements, then design the solution, followed by implementation, and finally, testing and iteration. Prompt engineering is integrated to refine agent instructions at each stage.', 'roles': [{'title': 'System Architect', 'description': 'Designs the overall structure and components of the system.'}, {'title': 'Requirements Analyst', 'description': 'Gathers and analyzes the functional and non-functional requirements of the system.'}, {'title': 'Technical Expert', 'description': 'Provides in-depth knowledge on specific technologies and implementation details.'}, {'title': 'Conceptual Analyst', 'description': 'Analyzes and refines the core concepts and logic of the system.'}, {'title': 'Researcher', 'description': 'Investigates existing solutions, libraries, and best practices.'}, {'title': 'Linguistic Mapper', 'description': 'Ensures clear and consistent communication and terminology within the project.'}, {'title': 'Lexicographer', 'description': 'Defines and standardizes the vocabulary used in the project.'}, {'title': 'Theoretical Liaison', 'description': 'Bridges theoretical concepts with practical implementation.'}, {'title': 'Relevance Assessor', 'description': 'Evaluates the relevance and applicability of proposed solutions and ideas.'}, {'title': 'Contextual Analyst', 'description': 'Analyzes the operational context and constraints of the system.'}, {'title': 'System Integrator', 'description': 'Oversees the integration of different system components.'}, {'title': 'Metrics Designer', 'description': 'Defines metrics for evaluating system performance and success.'}, {'title': 'Quality Assurance Specialist', 'description': 'Develops and executes test plans to ensure system quality.'}, {'title': 'Theoretical Advisor', 'description': 'Provides guidance on theoretical underpinnings and advanced concepts.'}, {'title': 'Feedback System', 'description': 'Designs and manages mechanisms for collecting and processing feedback.'}, {'title': 'Data Engineer', 'description': 'Handles data-related aspects, if any, in the system.'}, {'title': 'UX Researcher', 'description': "Focuses on user experience, if applicable to the script's interaction."}, {'title': 'Ingestion Specialist', 'description': 'Manages the process of bringing in necessary resources or data.'}, {'title': 'Data Validator', 'description': 'Ensures the integrity and correctness of data.'}, {'title': 'Source Integrator', 'description': 'Integrates with external data sources or services.'}, {'title': 'Theoretical Analyst', 'description': 'Analyzes theoretical aspects relevant to the project.'}, {'title': 'Pattern Recognizer', 'description': 'Identifies patterns in data or behavior for optimization.'}, {'title': 'Insight Extractor', 'description': 'Derives actionable insights from analysis.'}, {'title': 'Response Generator', 'description': 'Formulates responses or outputs based on analysis.'}, {'title': 'Theoretical Content Curator', 'description': 'Manages and organizes theoretical knowledge relevant to the project.'}, {'title': 'Context Synthesizer', 'description': 'Synthesizes information from various contexts.'}, {'title': 'Feedback Processor', 'description': 'Processes and categorizes feedback received.'}, {'title': 'Theoretical Evaluator', 'description': 'Evaluates theoretical models and approaches.'}, {'title': 'Improvement Analyst', 'description': 'Analyzes areas for improvement in the system or process.'}, {'title': 'Refinement Strategist', 'description': 'Develops strategies for refining the system.'}, {'title': 'Model Tuner', 'description': 'Adjusts parameters for optimal performance.'}, {'title': 'Workflow Designer', 'description': 'Designs and optimizes the workflow for development and execution.'}, {'title': 'Configuration Manager', 'description': 'Manages system configurations and settings.'}, {'title': 'Prompt Engineer', 'description': 'Structures workflows and ensures clarity in agent instructions, system prompt engineering.'}, {'title': 'Task-Agnostic Step Extractor', 'description': "Identifies and extracts each 'Task Agnostic Step' (TAS) towards the high-level goal."}], 'tasks': [{'task_id': 'T1', 'task': 'Define the core requirements for a Python script that can load itself and respawn services. This includes identifying essential functionalities, potential challenges, and desired outcomes.', 'role': 'Requirements Analyst', 'name': 'LaReqAnalyst', 'requires': []}, {'task_id': 'T2', 'task': 'Research existing Python libraries and techniques for self-loading scripts and service management (e.g., `importlib`, `subprocess`, systemd, supervisor).', 'role': 'Researcher', 'name': 'LaResearcher', 'requires': []}, {'task_id': 'T3', 'task': 'Analyze the theoretical underpinnings of self-modifying code and dynamic service management to ensure a robust and secure approach.', 'role': 'Theoretical Analyst', 'name': 'LaTheolAna', 'requires': []}, {'task_id': 'T4', 'task': 'Based on requirements and research, propose a high-level system architecture for the Python script, outlining key components and their interactions.', 'role': 'System Architect', 'name': 'LaSysDesigner', 'requires': ['T1', 'T2']}, {'task_id': 'T5', 'task': 'Refine the system architecture and conceptual design, ensuring logical consistency and feasibility.', 'role': 'Conceptual Analyst', 'name': 'LaConceptAna', 'requires': ['T4']}, {'task_id': 'T6', 'task': "Develop a detailed plan for the Python script's implementation, including module breakdown, data structures, and control flow.", 'role': 'Workflow Designer', 'name': 'LaWorkflowDes', 'requires': ['T5']}, {'task_id': 'T7', 'task': 'Define the prompt engineering strategy for guiding the development of the Python script, focusing on clarity and effectiveness for AI agents.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['T6']}, {'task_id': 'T8', 'task': 'Extract Task-Agnostic Steps (TAS) from the refined requirements and conceptual design to guide the implementation.', 'role': 'Task-Agnostic Step Extractor', 'name': 'TASe', 'requires': ['T5']}, {'task_id': 'T9', 'task': 'Extract Task-Agnostic Steps (TAS) from the detailed implementation plan.', 'role': 'Task-Agnostic Step Extractor', 'name': 'uTASe', 'requires': ['T6']}, {'task_id': 'T10', 'task': 'Extract Task-Agnostic Steps (TAS) from the prompt engineering strategy.', 'role': 'Task-Agnostic Step Extractor', 'name': 'GPTASe', 'requires': ['T7']}, {'task_id': 'T11', 'task': 'Implement the core logic for the Python script to load itself, potentially using dynamic import mechanisms.', 'role': 'System Integrator', 'name': 'LaSysIntegrator', 'requires': ['T8', 'T9']}, {'task_id': 'T12', 'task': 'Implement the service respawning functionality within the Python script, considering different service management approaches.', 'role': 'Technical Expert', 'name': 'LaTheoExpert', 'requires': ['T8', 'T9']}, {'task_id': 'T13', 'task': 'Integrate the self-loading and service respawning components, ensuring seamless operation.', 'role': 'System Integrator', 'name': 'LaSysIntegrator', 'requires': ['T11', 'T12']}, {'task_id': 'T14', 'task': 'Develop a configuration management strategy for the script, allowing for flexible service definitions and respawn parameters.', 'role': 'Configuration Manager', 'name': 'LaConfigMgr', 'requires': ['T13']}, {'task_id': 'T15', 'task': "Define metrics for evaluating the script's performance, reliability, and resource usage.", 'role': 'Metrics Designer', 'name': 'LaMetricsDes', 'requires': ['T1']}, {'task_id': 'T16', 'task': 'Create a comprehensive test plan, including unit tests, integration tests, and stress tests for the script.', 'role': 'Quality Assurance Specialist', 'name': 'LaQASpecialist', 'requires': ['T13', 'T15']}, {'task_id': 'T17', 'task': 'Execute the test plan and document any bugs or performance issues.', 'role': 'Quality Assurance Specialist', 'name': 'LaQASpecialist', 'requires': ['T16']}, {'task_id': 'T18', 'task': "Analyze test results and identify areas for improvement in the script's logic, efficiency, or robustness.", 'role': 'Improvement Analyst', 'name': 'LaImproveAna', 'requires': ['T17']}, {'task_id': 'T19', 'task': 'Refine the script based on feedback from testing and analysis, iterating on the implementation.', 'role': 'Refinement Strategist', 'name': 'LaRefineStrat', 'requires': ['T18']}, {'task_id': 'T20', 'task': 'Document the Python script, including its functionality, usage, configuration, and maintenance procedures.', 'role': 'Linguistic Mapper', 'name': 'LaLingMapper', 'requires': ['T19']}, {'task_id': 'T21', 'task': 'Establish a feedback loop for ongoing monitoring and improvement of the script.', 'role': 'Feedback System', 'name': 'LaFeedbackSys', 'requires': ['T20']}, {'task_id': 'T22', 'task': 'Review and refine the prompt engineering strategy based on the development process and outcomes.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['T19', 'T21']}]}

Please use the following outputs from the other agents as your input:

Artifact from 1__step_10_LaSysIntegrator_result.txt (System Integrator)[T11]:
{
  "reasoning": "The user wants me to implement the core logic for a Python script to load itself and potentially use dynamic import mechanisms. I have been provided with Task-Agnostic Steps (TAS) from previous tasks (T8 and T9) that outline the general actions needed for system design and implementation. My sub-task is to focus on the 'self-loading' aspect. I will create a Python script that demonstrates this by using `importlib` to dynamically import modules, and potentially uses `sys.executable` and `os.execv` to achieve a form of self-reloading or respawning. This directly addresses the requirement of 'implement the core logic for the Python script to load itself'. The output will be a Python script file.",
  "output": "The Python script `self_loader.py` implements the core logic for dynamically loading modules and a basic mechanism for self-respawning using `os.execv`. It demonstrates how a script can effectively 'load itself' in a controlled manner, which is a foundational step for the overall goal of creating a script that can load itself and respawn services.",
  "files": [
    {
      "name": "self_loader.py",
      "content": "import importlib\nimport sys\nimport os\nimport time\n\n# This script demonstrates a basic form of self-loading/respawning.\n# In a real-world scenario, the 'services' would be actual applications or modules to manage.\n\n# --- TAS: Define Orchestration Strategy (from T8)\n# For this example, we'll use a simple self-respawn mechanism via os.execv.\n# The 'services' are represented by modules that can be dynamically imported.\n\n# --- TAS: Standardize Logging (from T8)\n# Basic logging implementation\ndef log(message):\n    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')\n    print(f\"[{timestamp}] {message}\")\n\n# --- TAS: Load Service Configurations (from T9)\n# In a real application, this would parse a config file.\n# For this example, we define the modules to be loaded directly.\nSERVICES_TO_LOAD = [\n    \"example_service_1\",\n    \"example_service_2\"\n]\n\n# --- TAS: Implement Process Monitoring (from T8) & Monitor Service Status (from T9)\n# In this simplified example, we'll simulate monitoring by checking if dynamically loaded modules\n# have a 'run' method and calling it. A real system would use subprocess or other methods.\n\n# --- TAS: Handle Process Errors (from T8)\ndef safe_dynamic_import(module_name):\n    try:\n        log(f\"Attempting to import module: {module_name}\")\n        # Use importlib for dynamic loading\n        module = importlib.import_module(module_name)\n        log(f\"Successfully imported {module_name}\")\n        return module\n    except ImportError:\n        log(f\"Error: Module '{module_name}' not found.\")\n        return None\n    except Exception as e:\n        log(f\"An unexpected error occurred during import of {module_name}: {e}\")\n        return None\n\n# --- TAS: Manage Service Lifecycle (from T8 & T9)\ndef run_services(loaded_modules):\n    active_services = {}\n    for module_name, module in loaded_modules.items():\n        if module and hasattr(module, 'run'):\n            try:\n                log(f\"Starting service: {module_name}\")\n                # In a real scenario, this might be a subprocess call\n                # For demonstration, we just call a method.\n                # We'll simulate a 'running' state.\n                active_services[module_name] = True\n                log(f\"Service '{module_name}' is now running.\")\n            except Exception as e:\n                log(f\"Error starting service {module_name}: {e}\")\n                active_services[module_name] = False\n        elif module:\n            log(f\"Module {module_name} loaded but has no 'run' method.\")\n            active_services[module_name] = False\n        else:\n            active_services[module_name] = False\n    return active_services\n\n# --- TAS: Implement Respawn Policy (from T9)\n# Basic respawn logic: if the script is executed with a specific argument, it respawns.\n# In a more complex system, this would be triggered by service failures.\ndef respawn_self(reason=\"\"): \n    log(f\"Initiating self-respawn. Reason: {reason}\")\n    log(f\"Current script: {sys.argv[0]}\")\n    log(f\"Arguments: {sys.argv[1:]}\")\n    \n    # Prepare arguments for the new process. If the script was called with arguments, \n    # we might want to preserve them or modify them.\n    # For a simple respawn, we might just restart the script without arguments, \n    # or pass a flag indicating it's a respawn.\n    new_args = [sys.executable, os.path.abspath(__file__)]\n    # Example: add a flag to indicate it's a respawned instance\n    new_args.append(\"--respawned\") \n    \n    log(f\"Executing: {' '.join(new_args)}\")\n    \n    try:\n        # os.execv replaces the current process with a new one.\n        # It does not return.\n        os.execv(sys.executable, new_args)\n    except OSError as e:\n        log(f\"Failed to respawn script: {e}\")\n        sys.exit(1) # Exit if respawn fails\n\n# --- TAS: Implement Graceful Shutdown (from T8 & T9)\ndef graceful_shutdown(loaded_modules, active_services):\n    log(\"Initiating graceful shutdown...\")\n    for module_name, is_active in active_services.items():\n        if is_active and module_name in loaded_modules and hasattr(loaded_modules[module_name], 'stop'):\n            try:\n                log(f\"Stopping service: {module_name}\")\n                loaded_modules[module_name].stop()\n                log(f\"Service '{module_name}' stopped.\")\n            except Exception as e:\n                log(f\"Error stopping service {module_name}: {e}\")\n    log(\"All services stopped. Shutting down main process.\")\n\n# --- Main Execution Logic ---\ndef main():\n    log(\"Script started.\")\n    \n    # Check if this is a respawned instance (optional, for demonstration)\n    if \"--respawned\" in sys.argv:\n        log(\"This is a respawned instance.\")\n        # Potentially adjust behavior for respawned instance\n\n    loaded_modules = {}\n    for service_name in SERVICES_TO_LOAD:\n        module = safe_dynamic_import(service_name)\n        if module:\n            loaded_modules[service_name] = module\n            \n    if not loaded_modules:\n        log(\"No services were successfully loaded. Exiting.\")\n        # In a real scenario, might trigger respawn or exit gracefully.\n        # For this example, let's demonstrate respawn if no services can load.\n        respawn_self(\"No services loaded\")\n        return\n\n    active_services = run_services(loaded_modules)\n\n    # Simulate the main loop or long-running process\n    try:\n        while True:\n            # In a real application, this loop would: \n            # 1. Monitor services for failures.\n            # 2. Check for external triggers (e.g., config updates, shutdown signals).\n            # 3. Potentially respawn failed services based on policy.\n            \n            # For demonstration, we'll just sleep and periodically check if any service needs to be respawned.\n            time.sleep(5) \n            \n            # Simulate a failure and respawn trigger for one service after some time\n            if \"example_service_1\" in active_services and active_services[\"example_service_1\"] and time.time() % 20 < 5: # every 20 seconds, for 5 seconds\n                 log(\"Simulating failure for example_service_1\")\n                 active_services[\"example_service_1\"] = False # Mark as inactive\n                 # In a real scenario, we'd check exit codes, etc. \n                 # and then decide to respawn based on policy.\n                 respawn_self(\"Simulated failure of example_service_1\")\n                 # Note: os.execv replaces the current process, so the loop won't continue \n                 # after respawn is called.\n\n    except KeyboardInterrupt:\n        log(\"KeyboardInterrupt received.\")\n        graceful_shutdown(loaded_modules, active_services)\n    except Exception as e:\n        log(f\"An unexpected error occurred in the main loop: {e}\")\n        graceful_shutdown(loaded_modules, active_services)\n        # Optionally, trigger a self-respawn on critical errors\n        respawn_self(\"Critical error in main loop\")\n\nif __name__ == \"__main__\":\n    # Create dummy service files for demonstration if they don't exist\n    if not os.path.exists(\"example_service_1.py\"):\n        with open(\"example_service_1.py\", \"w\") as f:\n            f.write(\"import time\\nimport sys\\n\\ndef run():\\n    print('[Service 1] Running...')\\n    # Simulate a process that might fail\\n    # sys.exit(1) # Uncomment to simulate a crash\\n    while True:\\n        print('[Service 1] Heartbeat...')\\n        time.sleep(2)\\n\\ndef stop():\\n    print('[Service 1] Stopping gracefully...')\\n\")\n\n    if not os.path.exists(\"example_service_2.py\"):\n        with open(\"example_service_2.py\", \"w\") as f:\n            f.write(\"import time\\n\\ndef run():\\n    print('[Service 2] Running...')\\n    while True:\\n        print('[Service 2] Working...')\\n        time.sleep(3)\\n\\ndef stop():\\n    print('[Service 2] Stopping gracefully...')\\n\")\n\n    main()\n"
    }
  ]
}

---

Artifact from 1__step_11_LaTheoExpert_result.txt (Technical Expert)[T12]:
{
  "reasoning": "The user wants me to implement the service respawning functionality within the Python script. I have been provided with Task-Agnostic Steps (TAS) from `extracted_tas.json` (T8) and `extracted_tas.json` (T9). I need to synthesize these TAS to create a Python script snippet that addresses service respawning. The relevant TAS are 'Implement Process Monitoring', 'Implement Respawn Logic', 'Manage Process Lifecycle', 'Handle Process Errors', and 'Implement Graceful Shutdown'. I will use the `subprocess` module in Python for process management and implement a basic monitoring and respawning loop.",
  "output": "```python\nimport subprocess\nimport time\nimport sys\nimport os\n\nclass ServiceManager:\n    def __init__(self, service_configs):\n        self.service_configs = service_configs\n        self.processes = {}\n        self.running = True\n\n    def start_service(self, service_name):\n        config = self.service_configs[service_name]\n        command = config['command']\n        restart_policy = config.get('restart_policy', 'on-failure')\n        max_retries = config.get('max_retries', 5)\n        retry_delay = config.get('retry_delay', 5)\n\n        if service_name in self.processes and self.processes[service_name]['process'].poll() is None:\n            print(f\"Service {service_name} is already running.\")\n            return\n\n        try:\n            print(f\"Starting service: {service_name} with command: {command}\")\n            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            self.processes[service_name] = {\n                'process': process,\n                'command': command,\n                'restart_policy': restart_policy,\n                'max_retries': max_retries,\n                'retry_delay': retry_delay,\n                'retries': 0,\n                'start_time': time.time()\n            }\n        except Exception as e:\n            print(f\"Error starting service {service_name}: {e}\")\n            # Handle initial start failure based on policy\n            if restart_policy != 'no' and self.processes[service_name]['retries'] < max_retries:\n                self.processes[service_name]['retries'] += 1\n                print(f\"Retrying service {service_name} in {retry_delay} seconds...\")\n                time.sleep(retry_delay)\n                self.start_service(service_name) # Recursive call for retry\n            else:\n                print(f\"Failed to start service {service_name} after {max_retries} retries.\")\n\n    def stop_service(self, service_name):\n        if service_name in self.processes:\n            process_info = self.processes[service_name]\n            process = process_info['process']\n            if process.poll() is None:  # If process is running\n                print(f\"Stopping service: {service_name}\")\n                try:\n                    process.terminate() # Send SIGTERM\n                    process.wait(timeout=5) # Wait for termination\n                    print(f\"Service {service_name} stopped.\")\n                except subprocess.TimeoutExpired:\n                    print(f\"Service {service_name} did not terminate gracefully, killing.\")\n                    process.kill() # Send SIGKILL\n                    process.wait()\n                except Exception as e:\n                    print(f\"Error stopping service {service_name}: {e}\")\n            del self.processes[service_name]\n\n    def monitor_services(self):\n        for service_name, process_info in list(self.processes.items()): # Use list to allow modification during iteration\n            process = process_info['process']\n            exit_code = process.poll() # Check if process has exited\n\n            if exit_code is not None: # Process has terminated\n                print(f\"Service {service_name} terminated with exit code: {exit_code}\")\n                process_info['retries'] += 1\n                restart_policy = process_info['restart_policy']\n                max_retries = process_info['max_retries']\n                retry_delay = process_info['retry_delay']\n\n                should_restart = False\n                if restart_policy == 'always':\n                    should_restart = True\n                elif restart_policy == 'on-failure' and exit_code != 0:\n                    should_restart = True\n                elif restart_policy == 'on-abnormal-exit' and exit_code not in [0, 1]: # Example: 0 is success, 1 might be controlled exit\n                    should_restart = True\n\n                if should_restart and process_info['retries'] <= max_retries:\n                    print(f\"Restarting service {service_name} (Attempt {process_info['retries']}/{max_retries}) in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n                    self.start_service(service_name) # Restart the service\n                else:\n                    print(f\"Service {service_name} will not be restarted (Max retries reached or policy forbids).\")\n                    del self.processes[service_name] # Remove from monitoring if not restarting\n\n    def run(self):\n        # Initial start of all services\n        for service_name in self.service_configs:\n            self.start_service(service_name)\n\n        # Monitoring loop\n        while self.running:\n            self.monitor_services()\n            time.sleep(2) # Check every 2 seconds\n\n    def shutdown(self):\n        print(\"Initiating shutdown...\")\n        self.running = False\n        for service_name in list(self.processes.keys()):\n            self.stop_service(service_name)\n        print(\"All services stopped. Exiting.\")\n\nif __name__ == \"__main__\":\n    # Example Service Configurations\n    # In a real scenario, this would likely be loaded from a config file (e.g., JSON, YAML)\n    # TAS: Load Service Configurations\n    service_configurations = {\n        \"web_server\": {\n            \"command\": \"python -m http.server 8000\",\n            \"restart_policy\": \"always\",\n            \"max_retries\": 10,\n            \"retry_delay\": 5\n        },\n        \"background_task\": {\n            \"command\": \"python background_worker.py\", # Assumes background_worker.py exists\n            \"restart_policy\": \"on-failure\",\n            \"max_retries\": 5,\n            \"retry_delay\": 10\n        },\n        \"failing_service\": {\n            \"command\": \"python failing_script.py\", # Assumes failing_script.py exists and exits with non-zero code\n            \"restart_policy\": \"on-failure\",\n            \"max_retries\": 3,\n            \"retry_delay\": 3\n        }\n    }\n\n    # TAS: Initialize Orchestrator\n    manager = ServiceManager(service_configurations)\n\n    # Handle graceful shutdown via signals\n    import signal\n    def signal_handler(sig, frame):\n        manager.shutdown()\n        sys.exit(0)\n\n    signal.signal(signal.SIGINT, signal_handler) # Handle Ctrl+C\n    signal.signal(signal.SIGTERM, signal_handler) # Handle termination signal\n\n    try:\n        # TAS: Manage Service Lifecycle (through start_service and monitor_services)\n        # TAS: Monitor Service Status (within monitor_services)\n        # TAS: Implement Respawn Policy (within monitor_services)\n        # TAS: Handle Process Errors (implicitly via subprocess and try-except blocks)\n        # TAS: Implement Graceful Shutdown (via signal_handler and manager.shutdown())\n        manager.run()\n    except Exception as e:\n        print(f\"An unexpected error occurred in the main loop: {e}\")\n        manager.shutdown()\n        sys.exit(1)\n\n```",
  "files": [
    {
      "name": "service_manager.py",
      "content": "import subprocess\nimport time\nimport sys\nimport os\n\nclass ServiceManager:\n    def __init__(self, service_configs):\n        self.service_configs = service_configs\n        self.processes = {}\n        self.running = True\n\n    def start_service(self, service_name):\n        config = self.service_configs[service_name]\n        command = config['command']\n        restart_policy = config.get('restart_policy', 'on-failure')\n        max_retries = config.get('max_retries', 5)\n        retry_delay = config.get('retry_delay', 5)\n\n        if service_name in self.processes and self.processes[service_name]['process'].poll() is None:\n            print(f\"Service {service_name} is already running.\")\n            return\n\n        try:\n            print(f\"Starting service: {service_name} with command: {command}\")\n            # Use Popen for non-blocking execution\n            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=os.setsid) # os.setsid to create a new process group\n            self.processes[service_name] = {\n                'process': process,\n                'command': command,\n                'restart_policy': restart_policy,\n                'max_retries': max_retries,\n                'retry_delay': retry_delay,\n                'retries': 0,\n                'start_time': time.time()\n            }\n        except Exception as e:\n            print(f\"Error starting service {service_name}: {e}\")\n            # Handle initial start failure based on policy\n            if restart_policy != 'no' and self.processes[service_name]['retries'] < max_retries:\n                self.processes[service_name]['retries'] += 1\n                print(f\"Retrying service {service_name} in {retry_delay} seconds...\")\n                time.sleep(retry_delay)\n                self.start_service(service_name) # Recursive call for retry\n            else:\n                print(f\"Failed to start service {service_name} after {max_retries} retries.\")\n\n    def stop_service(self, service_name):\n        if service_name in self.processes:\n            process_info = self.processes[service_name]\n            process = process_info['process']\n            if process.poll() is None:  # If process is running\n                print(f\"Stopping service: {service_name}\")\n                try:\n                    # Send SIGTERM to the process group\n                    os.killpg(os.getpgid(process.pid), signal.SIGTERM)\n                    process.wait(timeout=5) # Wait for termination\n                    print(f\"Service {service_name} stopped.\")\n                except subprocess.TimeoutExpired:\n                    print(f\"Service {service_name} did not terminate gracefully, killing process group.\")\n                    os.killpg(os.getpgid(process.pid), signal.SIGKILL) # Send SIGKILL to the process group\n                    process.wait()\n                except ProcessLookupError:\n                    print(f\"Service {service_name} process already terminated.\")\n                except Exception as e:\n                    print(f\"Error stopping service {service_name}: {e}\")\n            del self.processes[service_name]\n\n    def monitor_services(self):\n        for service_name, process_info in list(self.processes.items()): # Use list to allow modification during iteration\n            process = process_info['process']\n            exit_code = process.poll() # Check if process has exited\n\n            if exit_code is not None: # Process has terminated\n                print(f\"Service {service_name} terminated with exit code: {exit_code}\")\n                process_info['retries'] += 1\n                restart_policy = process_info['restart_policy']\n                max_retries = process_info['max_retries']\n                retry_delay = process_info['retry_delay']\n\n                should_restart = False\n                if restart_policy == 'always':\n                    should_restart = True\n                elif restart_policy == 'on-failure' and exit_code != 0:\n                    should_restart = True\n                elif restart_policy == 'on-abnormal-exit' and exit_code not in [0, 1]: # Example: 0 is success, 1 might be controlled exit\n                    should_restart = True\n\n                if should_restart and process_info['retries'] <= max_retries:\n                    print(f\"Restarting service {service_name} (Attempt {process_info['retries']}/{max_retries}) in {retry_delay} seconds...\")\n                    time.sleep(retry_delay)\n                    self.start_service(service_name) # Restart the service\n                else:\n                    print(f\"Service {service_name} will not be restarted (Max retries reached or policy forbids).\")\n                    del self.processes[service_name] # Remove from monitoring if not restarting\n\n    def run(self):\n        # Initial start of all services\n        for service_name in self.service_configs:\n            self.start_service(service_name)\n\n        # Monitoring loop\n        while self.running:\n            self.monitor_services()\n            time.sleep(2) # Check every 2 seconds\n\n    def shutdown(self):\n        print(\"Initiating shutdown...\")\n        self.running = False\n        for service_name in list(self.processes.keys()):\n            self.stop_service(service_name)\n        print(\"All services stopped. Exiting.\")\n\nif __name__ == \"__main__\":\n    # Example Service Configurations\n    # In a real scenario, this would likely be loaded from a config file (e.g., JSON, YAML)\n    # TAS: Load Service Configurations\n    service_configurations = {\n        \"web_server\": {\n            \"command\": \"python -m http.server 8000\",\n            \"restart_policy\": \"always\",\n            \"max_retries\": 10,\n            \"retry_delay\": 5\n        },\n        \"background_task\": {\n            \"command\": \"python background_worker.py\", # Assumes background_worker.py exists\n            \"restart_policy\": \"on-failure\",\n            \"max_retries\": 5,\n            \"retry_delay\": 10\n        },\n        \"failing_service\": {\n            \"command\": \"python failing_script.py\", # Assumes failing_script.py exists and exits with non-zero code\n            \"restart_policy\": \"on-failure\",\n            \"max_retries\": 3,\n            \"retry_delay\": 3\n        }\n    }\n\n    # TAS: Initialize Orchestrator\n    manager = ServiceManager(service_configurations)\n\n    # Handle graceful shutdown via signals\n    import signal\n    def signal_handler(sig, frame):\n        manager.shutdown()\n        sys.exit(0)\n\n    signal.signal(signal.SIGINT, signal_handler) # Handle Ctrl+C\n    signal.signal(signal.SIGTERM, signal_handler) # Handle termination signal\n\n    try:\n        # TAS: Manage Service Lifecycle (through start_service and monitor_services)\n        # TAS: Monitor Service Status (within monitor_services)\n        # TAS: Implement Respawn Policy (within monitor_services)\n        # TAS: Handle Process Errors (implicitly via subprocess and try-except blocks)\n        # TAS: Implement Graceful Shutdown (via signal_handler and manager.shutdown())\n        manager.run()\n    except Exception as e:\n        print(f\"An unexpected error occurred in the main loop: {e}\")\n        manager.shutdown()\n        sys.exit(1)\n"
    }
  ]
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.
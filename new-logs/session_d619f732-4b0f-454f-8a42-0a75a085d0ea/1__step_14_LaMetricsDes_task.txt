The overall goal is: 'Python Script that loads itself and respawns services'

Your role's specific goal is: ''
Your specific sub-task is: 'Define metrics for evaluating the script's performance, reliability, and resource usage.'

The team's roles are:
    {'reasoning': 'The goal is to create a Python script that can load itself and respawn services. This requires a systematic approach, starting with understanding the core requirements, designing the system architecture, implementing the script, and ensuring its reliability through testing and refinement. The roles provided are diverse, and their tasks should reflect a logical progression from conceptualization to execution and maintenance. The plan is structured to first define the problem and requirements, then design the solution, followed by implementation, and finally, testing and iteration. Prompt engineering is integrated to refine agent instructions at each stage.', 'roles': [{'title': 'System Architect', 'description': 'Designs the overall structure and components of the system.'}, {'title': 'Requirements Analyst', 'description': 'Gathers and analyzes the functional and non-functional requirements of the system.'}, {'title': 'Technical Expert', 'description': 'Provides in-depth knowledge on specific technologies and implementation details.'}, {'title': 'Conceptual Analyst', 'description': 'Analyzes and refines the core concepts and logic of the system.'}, {'title': 'Researcher', 'description': 'Investigates existing solutions, libraries, and best practices.'}, {'title': 'Linguistic Mapper', 'description': 'Ensures clear and consistent communication and terminology within the project.'}, {'title': 'Lexicographer', 'description': 'Defines and standardizes the vocabulary used in the project.'}, {'title': 'Theoretical Liaison', 'description': 'Bridges theoretical concepts with practical implementation.'}, {'title': 'Relevance Assessor', 'description': 'Evaluates the relevance and applicability of proposed solutions and ideas.'}, {'title': 'Contextual Analyst', 'description': 'Analyzes the operational context and constraints of the system.'}, {'title': 'System Integrator', 'description': 'Oversees the integration of different system components.'}, {'title': 'Metrics Designer', 'description': 'Defines metrics for evaluating system performance and success.'}, {'title': 'Quality Assurance Specialist', 'description': 'Develops and executes test plans to ensure system quality.'}, {'title': 'Theoretical Advisor', 'description': 'Provides guidance on theoretical underpinnings and advanced concepts.'}, {'title': 'Feedback System', 'description': 'Designs and manages mechanisms for collecting and processing feedback.'}, {'title': 'Data Engineer', 'description': 'Handles data-related aspects, if any, in the system.'}, {'title': 'UX Researcher', 'description': "Focuses on user experience, if applicable to the script's interaction."}, {'title': 'Ingestion Specialist', 'description': 'Manages the process of bringing in necessary resources or data.'}, {'title': 'Data Validator', 'description': 'Ensures the integrity and correctness of data.'}, {'title': 'Source Integrator', 'description': 'Integrates with external data sources or services.'}, {'title': 'Theoretical Analyst', 'description': 'Analyzes theoretical aspects relevant to the project.'}, {'title': 'Pattern Recognizer', 'description': 'Identifies patterns in data or behavior for optimization.'}, {'title': 'Insight Extractor', 'description': 'Derives actionable insights from analysis.'}, {'title': 'Response Generator', 'description': 'Formulates responses or outputs based on analysis.'}, {'title': 'Theoretical Content Curator', 'description': 'Manages and organizes theoretical knowledge relevant to the project.'}, {'title': 'Context Synthesizer', 'description': 'Synthesizes information from various contexts.'}, {'title': 'Feedback Processor', 'description': 'Processes and categorizes feedback received.'}, {'title': 'Theoretical Evaluator', 'description': 'Evaluates theoretical models and approaches.'}, {'title': 'Improvement Analyst', 'description': 'Analyzes areas for improvement in the system or process.'}, {'title': 'Refinement Strategist', 'description': 'Develops strategies for refining the system.'}, {'title': 'Model Tuner', 'description': 'Adjusts parameters for optimal performance.'}, {'title': 'Workflow Designer', 'description': 'Designs and optimizes the workflow for development and execution.'}, {'title': 'Configuration Manager', 'description': 'Manages system configurations and settings.'}, {'title': 'Prompt Engineer', 'description': 'Structures workflows and ensures clarity in agent instructions, system prompt engineering.'}, {'title': 'Task-Agnostic Step Extractor', 'description': "Identifies and extracts each 'Task Agnostic Step' (TAS) towards the high-level goal."}], 'tasks': [{'task_id': 'T1', 'task': 'Define the core requirements for a Python script that can load itself and respawn services. This includes identifying essential functionalities, potential challenges, and desired outcomes.', 'role': 'Requirements Analyst', 'name': 'LaReqAnalyst', 'requires': []}, {'task_id': 'T2', 'task': 'Research existing Python libraries and techniques for self-loading scripts and service management (e.g., `importlib`, `subprocess`, systemd, supervisor).', 'role': 'Researcher', 'name': 'LaResearcher', 'requires': []}, {'task_id': 'T3', 'task': 'Analyze the theoretical underpinnings of self-modifying code and dynamic service management to ensure a robust and secure approach.', 'role': 'Theoretical Analyst', 'name': 'LaTheolAna', 'requires': []}, {'task_id': 'T4', 'task': 'Based on requirements and research, propose a high-level system architecture for the Python script, outlining key components and their interactions.', 'role': 'System Architect', 'name': 'LaSysDesigner', 'requires': ['T1', 'T2']}, {'task_id': 'T5', 'task': 'Refine the system architecture and conceptual design, ensuring logical consistency and feasibility.', 'role': 'Conceptual Analyst', 'name': 'LaConceptAna', 'requires': ['T4']}, {'task_id': 'T6', 'task': "Develop a detailed plan for the Python script's implementation, including module breakdown, data structures, and control flow.", 'role': 'Workflow Designer', 'name': 'LaWorkflowDes', 'requires': ['T5']}, {'task_id': 'T7', 'task': 'Define the prompt engineering strategy for guiding the development of the Python script, focusing on clarity and effectiveness for AI agents.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['T6']}, {'task_id': 'T8', 'task': 'Extract Task-Agnostic Steps (TAS) from the refined requirements and conceptual design to guide the implementation.', 'role': 'Task-Agnostic Step Extractor', 'name': 'TASe', 'requires': ['T5']}, {'task_id': 'T9', 'task': 'Extract Task-Agnostic Steps (TAS) from the detailed implementation plan.', 'role': 'Task-Agnostic Step Extractor', 'name': 'uTASe', 'requires': ['T6']}, {'task_id': 'T10', 'task': 'Extract Task-Agnostic Steps (TAS) from the prompt engineering strategy.', 'role': 'Task-Agnostic Step Extractor', 'name': 'GPTASe', 'requires': ['T7']}, {'task_id': 'T11', 'task': 'Implement the core logic for the Python script to load itself, potentially using dynamic import mechanisms.', 'role': 'System Integrator', 'name': 'LaSysIntegrator', 'requires': ['T8', 'T9']}, {'task_id': 'T12', 'task': 'Implement the service respawning functionality within the Python script, considering different service management approaches.', 'role': 'Technical Expert', 'name': 'LaTheoExpert', 'requires': ['T8', 'T9']}, {'task_id': 'T13', 'task': 'Integrate the self-loading and service respawning components, ensuring seamless operation.', 'role': 'System Integrator', 'name': 'LaSysIntegrator', 'requires': ['T11', 'T12']}, {'task_id': 'T14', 'task': 'Develop a configuration management strategy for the script, allowing for flexible service definitions and respawn parameters.', 'role': 'Configuration Manager', 'name': 'LaConfigMgr', 'requires': ['T13']}, {'task_id': 'T15', 'task': "Define metrics for evaluating the script's performance, reliability, and resource usage.", 'role': 'Metrics Designer', 'name': 'LaMetricsDes', 'requires': ['T1']}, {'task_id': 'T16', 'task': 'Create a comprehensive test plan, including unit tests, integration tests, and stress tests for the script.', 'role': 'Quality Assurance Specialist', 'name': 'LaQASpecialist', 'requires': ['T13', 'T15']}, {'task_id': 'T17', 'task': 'Execute the test plan and document any bugs or performance issues.', 'role': 'Quality Assurance Specialist', 'name': 'LaQASpecialist', 'requires': ['T16']}, {'task_id': 'T18', 'task': "Analyze test results and identify areas for improvement in the script's logic, efficiency, or robustness.", 'role': 'Improvement Analyst', 'name': 'LaImproveAna', 'requires': ['T17']}, {'task_id': 'T19', 'task': 'Refine the script based on feedback from testing and analysis, iterating on the implementation.', 'role': 'Refinement Strategist', 'name': 'LaRefineStrat', 'requires': ['T18']}, {'task_id': 'T20', 'task': 'Document the Python script, including its functionality, usage, configuration, and maintenance procedures.', 'role': 'Linguistic Mapper', 'name': 'LaLingMapper', 'requires': ['T19']}, {'task_id': 'T21', 'task': 'Establish a feedback loop for ongoing monitoring and improvement of the script.', 'role': 'Feedback System', 'name': 'LaFeedbackSys', 'requires': ['T20']}, {'task_id': 'T22', 'task': 'Review and refine the prompt engineering strategy based on the development process and outcomes.', 'role': 'Prompt Engineer', 'name': 'Lyra', 'requires': ['T19', 'T21']}]}

Please use the following outputs from the other agents as your input:

Artifact from 1__step_0_LaReqAnalyst_result.txt (Requirements Analyst)[T1]:
{
  "reasoning": "The user wants me to define the core requirements for a Python script that can load itself and respawn services. This involves identifying essential functionalities, potential challenges, and desired outcomes. I need to act as a Requirements Analyst and fulfill task T1.",
  "output": "### Core Requirements for a Self-Loading and Service-Respawning Python Script\n\n**1. Essential Functionalities:**\n\n*   **Self-Loading/Execution:** The script must be able to initiate its own execution, potentially by being triggered by an external event or a scheduled task, and then manage its lifecycle.\n*   **Service Detection and Monitoring:** The script needs to identify and monitor the status of target services (e.g., other Python scripts, external processes, system services).\n*   **Service Respawning:** Upon detecting a service failure (crash, unexpected termination), the script must automatically restart or respawn that service.\n*   **Configuration Management:** A mechanism to define which services to monitor, their restart policies (e.g., number of retries, delay between restarts), and any associated startup commands or parameters.\n*   **Logging and Auditing:** Comprehensive logging of script actions, service status changes, respawn attempts, and any errors encountered for debugging and monitoring purposes.\n*   **Graceful Shutdown:** The script should be able to shut down its own operations and any managed services in a controlled manner.\n*   **Error Handling:** Robust error handling for unexpected situations, such as inability to restart a service, configuration errors, or permission issues.\n\n**2. Potential Challenges:**\n\n*   **Infinite Restart Loops:** Preventing the script from getting stuck in a loop of continuously trying to restart a service that is fundamentally broken or misconfigured.\n*   **Resource Management:** Ensuring the script itself doesn't consume excessive resources while monitoring and respawning services.\n*   **Service Dependencies:** Handling scenarios where services have interdependencies; restarting one service might require others to be running or stopped first.\n*   **Platform Compatibility:** Ensuring the script works across different operating systems and environments if deployed broadly.\n*   **Security Considerations:** Managing permissions for starting/stopping services, and preventing malicious use of the self-loading capability.\n*   **Complex Service Definitions:** Supporting various types of services (e.g., command-line applications, daemons, web services) with different startup/shutdown mechanisms.\n*   **Distinguishing Script vs. Service Failure:** Accurately determining if the main script has failed or if it's a managed service that has failed.\n\n**3. Desired Outcomes:**\n\n*   **High Availability:** Increased uptime and reliability for the managed services.\n*   **Automated Recovery:** Reduced manual intervention required for service failures.\n*   **Simplified Operations:** A single point of control for managing the lifecycle of multiple related services.\n*   **Robustness:** A stable and predictable script that reliably performs its intended functions without introducing new problems.\n*   **Observability:** Clear visibility into the status and history of managed services through effective logging.",
  "files": [
    {
      "name": "requirements.md",
      "content": "# Core Requirements for a Self-Loading and Service-Respawning Python Script\n\n## 1. Essential Functionalities:\n\n*   **Self-Loading/Execution:** The script must be able to initiate its own execution, potentially by being triggered by an external event or a scheduled task, and then manage its lifecycle.\n*   **Service Detection and Monitoring:** The script needs to identify and monitor the status of target services (e.g., other Python scripts, external processes, system services).\n*   **Service Respawning:** Upon detecting a service failure (crash, unexpected termination), the script must automatically restart or respawn that service.\n*   **Configuration Management:** A mechanism to define which services to monitor, their restart policies (e.g., number of retries, delay between restarts), and any associated startup commands or parameters.\n*   **Logging and Auditing:** Comprehensive logging of script actions, service status changes, respawn attempts, and any errors encountered for debugging and monitoring purposes.\n*   **Graceful Shutdown:** The script should be able to shut down its own operations and any managed services in a controlled manner.\n*   **Error Handling:** Robust error handling for unexpected situations, such as inability to restart a service, configuration errors, or permission issues.\n\n## 2. Potential Challenges:\n\n*   **Infinite Restart Loops:** Preventing the script from getting stuck in a loop of continuously trying to restart a service that is fundamentally broken or misconfigured.\n*   **Resource Management:** Ensuring the script itself doesn't consume excessive resources while monitoring and respawning services.\n*   **Service Dependencies:** Handling scenarios where services have interdependencies; restarting one service might require others to be running or stopped first.\n*   **Platform Compatibility:** Ensuring the script works across different operating systems and environments if deployed broadly.\n*   **Security Considerations:** Managing permissions for starting/stopping services, and preventing malicious use of the self-loading capability.\n*   **Complex Service Definitions:** Supporting various types of services (e.g., command-line applications, daemons, web services) with different startup/shutdown mechanisms.\n*   **Distinguishing Script vs. Service Failure:** Accurately determining if the main script has failed or if it's a managed service that has failed.\n\n## 3. Desired Outcomes:\n\n*   **High Availability:** Increased uptime and reliability for the managed services.\n*   **Automated Recovery:** Reduced manual intervention required for service failures.\n*   **Simplified Operations:** A single point of control for managing the lifecycle of multiple related services.\n*   **Robustness:** A stable and predictable script that reliably performs its intended functions without introducing new problems.\n*   **Observability:** Clear visibility into the status and history of managed services through effective logging."
    }
  ]
}



Please execute your sub-task, keeping the overall goal and your role's specific goal in mind to ensure your output is relevant to the project.